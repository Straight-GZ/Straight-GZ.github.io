<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Straight</title>
  
  
  <link href="https://github.com/Straight-GZ/atom.xml" rel="self"/>
  
  <link href="https://github.com/Straight-GZ/"/>
  <updated>2021-02-19T03:35:19.420Z</updated>
  <id>https://github.com/Straight-GZ/</id>
  
  <author>
    <name>GENGZHI</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>极简记账</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/%E8%AE%B0%E8%B4%A6/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/%E8%AE%B0%E8%B4%A6/</id>
    <published>2021-02-19T03:35:19.420Z</published>
    <updated>2021-02-19T03:35:19.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p>先写 HTML，写好类</p><p>再写 css 好 css 选择器</p><p>Vue.compontent(‘Nav’,Nav) //全局声明 Nav 组件</p><p>手机端使用 flex 定位（不使用 fixed）</p><p>flex-direction:clumn</p><p>flex-grow:1 剩余空间分配，宽或者高取决于 flex-direction</p><p>overflow:auto</p><p>使用 Vue 插槽 <code>&lt;v-slot/&gt;</code></p><a id="more"></a><h4 id="svg-loader"><a href="#svg-loader" class="headerlink" title="svg-loader"></a>svg-loader</h4><p>svgo-loader svg 优化 loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  lintOnSave: <span class="literal">false</span>,</span><br><span class="line">  chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dir = path.resolve(__dirname, <span class="string">&quot;src/assets/icons&quot;</span>);</span><br><span class="line"></span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">&quot;svg-sprite&quot;</span>)</span><br><span class="line">      .test(<span class="regexp">/\.svg$/</span>) <span class="comment">//.icon结尾的</span></span><br><span class="line">      .include.add(dir)</span><br><span class="line">      .end() <span class="comment">//只包含icons目录</span></span><br><span class="line">      .use(<span class="string">&quot;svg-sprite-loader&quot;</span>)</span><br><span class="line">      .loader(<span class="string">&quot;svg-sprite-loader&quot;</span>)</span><br><span class="line">      .options(&#123; <span class="attr">extract</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      .end()</span><br><span class="line">      .use(<span class="string">&quot;svgo-loader&quot;</span>)</span><br><span class="line">      .loader(<span class="string">&quot;svgo-loader&quot;</span>)</span><br><span class="line">      .tap(<span class="function">(<span class="params">options</span>) =&gt;</span> (&#123;</span><br><span class="line">        ...options,</span><br><span class="line">        plugins: [&#123; <span class="attr">removeAttrs</span>: &#123; <span class="attr">attrs</span>: <span class="string">&quot;fill&quot;</span> &#125; &#125;],</span><br><span class="line">      &#125;))</span><br><span class="line">      .end();</span><br><span class="line">    config</span><br><span class="line">      .plugin(<span class="string">&quot;svg-sprite&quot;</span>)</span><br><span class="line">      .use(<span class="built_in">require</span>(<span class="string">&quot;svg-sprite-loader/plugin&quot;</span>), [&#123; <span class="attr">plainSprite</span>: <span class="literal">true</span> &#125;]);</span><br><span class="line">    config.module.rule(<span class="string">&quot;svg&quot;</span>).exclude.add(dir); <span class="comment">//其他 svg loader 排除 icons目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="css-reset"><a href="#css-reset" class="headerlink" title="css reset"></a>css reset</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">  padding: <span class="number">0</span>;margin: <span class="number">0</span>;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line">a&#123;</span><br><span class="line">  text-decoration: none;<span class="comment">//修饰线  a标签默认下划线</span></span><br><span class="line">  color:inherit;</span><br><span class="line">&#125;</span><br><span class="line">ul,ol&#123;</span><br><span class="line">  list-style: none;  <span class="comment">//列表样式</span></span><br><span class="line">&#125;</span><br><span class="line">button,input&#123;</span><br><span class="line">  font:inherit;  <span class="comment">//字体继承</span></span><br><span class="line">&#125;</span><br><span class="line">:focus&#123;</span><br><span class="line"> outline:none;  <span class="comment">//选中时的边框</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="css-helper"><a href="#css-helper" class="headerlink" title="css helper"></a>css helper</h4><p>创建一个文件，统一使用次数多的样式，使用的时候直接引入</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$font-hei</span>: -apple-system, <span class="string">&quot;Noto Sans&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, Helvetica,</span><br><span class="line">  <span class="string">&quot;Nimbus Sans L&quot;</span>, Arial, <span class="string">&quot;Liberation Sans&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Hiragino Sans GB&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Noto Sans CJK SC&quot;</span>, <span class="string">&quot;Source Han Sans SC&quot;</span>, <span class="string">&quot;Source Han Sans CN&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Microsoft YaHei&quot;</span>, <span class="string">&quot;Wenquanyi Micro Hei&quot;</span>, <span class="string">&quot;WenQuanYi Zen Hei&quot;</span>, <span class="string">&quot;ST Heiti&quot;</span>,</span><br><span class="line">  SimHei, <span class="string">&quot;WenQuanYi Zen Hei Sharp&quot;</span>, sans-serif;</span><br><span class="line"><span class="variable">$font-kai</span>: Baskerville, Georgia, <span class="string">&quot;Liberation Serif&quot;</span>, <span class="string">&quot;Kaiti SC&quot;</span>, STKaiti,</span><br><span class="line">  <span class="string">&quot;AR PL UKai CN&quot;</span>, <span class="string">&quot;AR PL UKai HK&quot;</span>, <span class="string">&quot;AR PL UKai TW&quot;</span>, <span class="string">&quot;AR PL UKai TW MBE&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AR PL KaitiM GB&quot;</span>, KaiTi, KaiTi_GB2312, DFKai-SB, <span class="string">&quot;TW\-Kai&quot;</span>, serif;</span><br><span class="line"><span class="variable">$font-song</span>: Georgia, <span class="string">&quot;Nimbus Roman No9 L&quot;</span>, <span class="string">&quot;Songti SC&quot;</span>, <span class="string">&quot;Noto Serif CJK SC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Source Han Serif SC&quot;</span>, <span class="string">&quot;Source Han Serif CN&quot;</span>, STSong, <span class="string">&quot;AR PL New Sung&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AR PL SungtiL GB&quot;</span>, NSimSun, SimSun, <span class="string">&quot;TW\-Sung&quot;</span>, <span class="string">&quot;WenQuanYi Bitmap Song&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AR PL UMing CN&quot;</span>, <span class="string">&quot;AR PL UMing HK&quot;</span>, <span class="string">&quot;AR PL UMing TW&quot;</span>, <span class="string">&quot;AR PL UMing TW MBE&quot;</span>,</span><br><span class="line">  PMingLiU, MingLiU, serif;</span><br><span class="line"><span class="comment">// 引入三种字体  fonts.css中文</span></span><br><span class="line"><span class="variable">$color-highlight</span>: <span class="number">#f00</span>; <span class="comment">//统一颜色</span></span><br><span class="line"></span><br><span class="line">%clearFix &#123;</span><br><span class="line">  <span class="comment">// %语法     使用方法：@extend %clearFix;</span></span><br><span class="line">  &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="comment">//float 布局必须要写</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$color-shadow</span>: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.25</span>);</span><br><span class="line">%innerShadow &#123;</span><br><span class="line">  <span class="comment">//统一阴影样式</span></span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">3px</span> <span class="number">3px</span> -<span class="number">3px</span> <span class="variable">$color-shadow</span>, inset <span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span> -<span class="number">3px</span></span><br><span class="line">      <span class="variable">$color-shadow</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%outerShadow &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="variable">$color-shadow</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> NumberPad <span class="keyword">from</span> <span class="string">&#x27;@/components/Money/NumberPad.vue&#x27;</span>;<span class="comment">//引入组件 @为src目录</span></span><br><span class="line"> @<span class="keyword">import</span> <span class="string">&quot;~@/assets/style/helper.scss&quot;</span>;  <span class="comment">//引入css @为src目录 需要加‘~’</span></span><br></pre></td></tr></table></figure><h4 id="渐变背景"><a href="#渐变背景" class="headerlink" title="渐变背景"></a>渐变背景</h4><p><img src="https://i.loli.net/2021/01/23/ipLwyUb4gX3tSEx.png" alt="image-20210123221640646"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似计算器的按键</span></span><br><span class="line">.buttons&#123;</span><br><span class="line">$bg: #f2f2f2; <span class="comment">//定义一个颜色</span></span><br><span class="line">    &amp;:nth-<span class="function"><span class="title">child</span>(<span class="params"><span class="number">1</span></span>)</span> &#123;<span class="comment">// .buttons 中第一个子元素</span></span><br><span class="line">        background: $bg;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:nth-child(<span class="number">2</span>), &amp;:nth-<span class="function"><span class="title">child</span>(<span class="params"><span class="number">6</span></span>)</span> &#123;</span><br><span class="line">        background: darken($bg, <span class="number">4</span>%); <span class="comment">//比之前深4%</span></span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:nth-child(<span class="number">3</span>), &amp;:nth-child(<span class="number">7</span>), &amp;:nth-<span class="function"><span class="title">child</span>(<span class="params"><span class="number">11</span></span>)</span> &#123;</span><br><span class="line">        background: darken($bg, <span class="number">4</span>*<span class="number">2</span>%);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模块化：一个文件不要超过-100-行"><a href="#模块化：一个文件不要超过-100-行" class="headerlink" title="模块化：一个文件不要超过 100 行"></a>模块化：一个文件不要超过 100 行</h4><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span>;</span><br><span class="line"><span class="meta">@Componrent</span> <span class="comment">//见文档</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Types</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Prop</span>(<span class="built_in">Number</span>) xxx <span class="built_in">number</span> | <span class="literal">undefined</span>; <span class="comment">//prop写法</span></span><br><span class="line">   <span class="meta">@Prop</span>(<span class="built_in">Number</span>) xxx=<span class="number">0</span>;<span class="comment">//初始化默认值，不需要给类型</span></span><br><span class="line">    <span class="keyword">type</span>=<span class="string">&#x27;-&#x27;</span>; <span class="comment">//data 直接写</span></span><br><span class="line">  <span class="function"><span class="title">selectType</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">string</span></span>)</span> &#123;  <span class="comment">//methods直接写</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">type</span> !== <span class="string">&#x27;-&#x27;</span> &amp;&amp; <span class="keyword">type</span> !== <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;type is unknown&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.type = <span class="keyword">type</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;<span class="comment">//生命周期直接写</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.xxx.yyy)</span><br><span class="line">        <span class="comment">//报错1：this.xxx有可能是undefined，不能使用.yyy</span></span><br><span class="line">        <span class="comment">//报错2：this.xxx上没有yyy方法</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//改写为</span></span><br><span class="line"><span class="function"><span class="title">Mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.xxx===<span class="literal">undefined</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.xxx.yyy)</span><br><span class="line">            <span class="comment">//报错2：this.xxx没有yyy方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kaorun343/vue-property-decorator#Prop">vue-property-decorator</a></p><p>编译时 和 运行时</p><p>​ TS—&gt;JS：将 TS 代码编译为 JS 代码 (编译时) 编辑器控制台报错</p><p>​ JS—&gt;浏览器：在浏览器运行(运行时) 浏览器控制台报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Prop(Number) xxx: number | undefined;</span><br><span class="line">&#x2F;&#x2F;Prop告诉 Vue xxx 不是data 而是 prop</span><br><span class="line">&#x2F;&#x2F;Number 告诉 TS Vue xxx 是个Number类型 (运行时)</span><br><span class="line">&#x2F;&#x2F;xxx 是 属性名</span><br><span class="line">&#x2F;&#x2F;number|undefined 是类型  (编译时)</span><br></pre></td></tr></table></figure><p>TS 的特点:</p><ol><li>类型提示：更多的代码提示</li><li>类型检查：不能随便.调用 比如 .tostring() （大小写）</li><li>编译报错 ，没运行就知道写错了，更加严谨，但仍会编译成 JS</li></ol><p>TS： <code>JS:数据类型</code></p><p><img src="https://i.loli.net/2021/01/23/P9d672ZLY3aWjEs.png" alt="image-20210123233633208"></p><p>编译时会删掉类型</p><h4 id="Vue-组件三种方式（单文件组件）"><a href="#Vue-组件三种方式（单文件组件）" class="headerlink" title="Vue 组件三种方式（单文件组件）"></a>Vue 组件三种方式（单文件组件）</h4><ol><li><p>用 JS 对象</p><p><code>export default &#123;data,props,methods,created,...&#125;</code></p></li><li><p>用 TS 类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> 组件名 <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  xxx: string = <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">  @prop(<span class="built_in">Number</span>) xxx: number | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用 JS 类 (和 TS 类似)</p><p><code>export default class 组件名 extends Vue&#123;xxx=&#39;hi&#39;&#125;</code></p></li></ol><h4 id="搜集组件的数据"><a href="#搜集组件的数据" class="headerlink" title="搜集组件的数据"></a>搜集组件的数据</h4><p>子组件触发事件,将数据发送到父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&quot;update:value&quot;</span>, <span class="built_in">this</span>.selectedTags);</span><br></pre></td></tr></table></figure><p>默认数据可以是外部传入的 Prop，这样可以使用.sync 语法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Tags</span> <span class="attr">:data-source.sync</span>=<span class="string">&quot;tags&quot;</span> <span class="attr">:value.sync</span>=<span class="string">&quot;record.tags&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前版本号</span></span><br><span class="line"><span class="keyword">const</span> version = <span class="built_in">window</span>.localStorage.getItem(<span class="string">&quot;version&quot;</span>);</span><br><span class="line"><span class="comment">//获取当前数据</span></span><br><span class="line"><span class="keyword">const</span> recordList: Record[] = <span class="built_in">JSON</span>.parse(</span><br><span class="line">  <span class="built_in">window</span>.localStorage.getItem(recordList)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;version&quot;</span> === <span class="string">&quot;0.0.1&quot;</span>) &#123;</span><br><span class="line">  recordList.forEach(<span class="function">(<span class="params">record</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//遍历数据</span></span><br><span class="line">    record.createTime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2020</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">//将每个数据增加时间</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//保存数据</span></span><br><span class="line">  <span class="built_in">window</span>.localStorage.setItem(<span class="string">&quot;recordList&quot;</span>, <span class="built_in">JSON</span>.stringfy(recordList));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;version&quot;</span> === <span class="string">&quot;0.0.2&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">//迁移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置当前版本号</span></span><br><span class="line"><span class="built_in">window</span>.localStorage.setItem(<span class="string">&quot;version&quot;</span>, <span class="string">&quot;0.0.3&quot;</span>);</span><br></pre></td></tr></table></figure><p>迁移数据只需要将版本一个版本一个版本的向上迁移</p><h4 id="TS-中引用-JS"><a href="#TS-中引用-JS" class="headerlink" title="TS 中引用 JS"></a>TS 中引用 JS</h4><p><code>import model from &#39;@/model.js&#39;</code> //报错，用不了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果使用 <span class="string">&#x27;export default 对象名&#x27;</span> 导出</span><br><span class="line"><span class="keyword">const</span> model=<span class="built_in">require</span>(<span class="string">&#x27;@/model.js&#x27;</span>).defult</span><br><span class="line"></span><br><span class="line">如果直接导出 <span class="string">&#x27;export 对象名&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;model&#125;=<span class="built_in">require</span>(<span class="string">&#x27;@/model.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> model=<span class="built_in">require</span>(<span class="string">&#x27;@/model.js&#x27;</span>).model</span><br></pre></td></tr></table></figure><h4 id="定义-TS-类型"><a href="#定义-TS-类型" class="headerlink" title="定义 TS 类型"></a>定义 TS 类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RecordItem = &#123;</span><br><span class="line">  tags: <span class="built_in">string</span>[];</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  notes: <span class="built_in">string</span>;</span><br><span class="line">  amount: <span class="built_in">string</span>;</span><br><span class="line">  createdTime?: <span class="built_in">Date</span>; <span class="comment">// ?表示有也可能没有</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以将内容放在根目录独立文件中，全局定义，文件名以<code>.d.ts</code>结尾，<code>cunstorm.d.ts</code>,当前文件夹内容都可以使用</p><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p>Model(模型):管理应用的行为和数据，响应数据请求（经常来自视图）和更新状态的指令</p><p>View(视图):管理作为位图展示到屏幕上的图形和文字输出；</p><p>Controller(控制器)：翻译用户的输入并依照用户的输入操作模型和视图</p><p>//model.js 将读取数据、保存数据，复制数据封装到同一文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const key &#x3D; &#39;recordList&#39;;</span><br><span class="line">const model &#x3D; &#123;</span><br><span class="line">  clone(data) &#123; return JSON.parse(JSON.stringify(data));&#125;,</span><br><span class="line">  fetch() &#123;return JSON.parse(window.localStorage.getItem(key) || &#39;[]&#39;); &#125;,</span><br><span class="line"></span><br><span class="line">  save(data: RecordItem[]) &#123;</span><br><span class="line">    return window.localStorage.setItem(key, JSON.stringify(data));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default model;</span><br></pre></td></tr></table></figure><p>TS 中引用 JS</p><p><code>import model from &#39;@/model.js&#39;</code> //报错，用不了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果使用 &#39;export default 对象名&#39; 导出</span><br><span class="line">const model&#x3D;require(&#39;@&#x2F;model.js&#39;).defult</span><br><span class="line"></span><br><span class="line">如果直接导出 &#39;export 对象名&#39;</span><br><span class="line">const &#123;model&#125;&#x3D;require(&#39;@&#x2F;model.js&#39;)</span><br><span class="line"></span><br><span class="line">const model&#x3D;require(&#39;@&#x2F;model.js&#39;).model</span><br></pre></td></tr></table></figure><p>将 JS 改写为 TS</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">&quot;recordList&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> model = &#123;</span><br><span class="line">  <span class="function"><span class="title">clone</span>(<span class="params">data: RecordItem | RecordItem[]</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">fetch</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(key) || <span class="string">&quot;[]&quot;</span>) <span class="keyword">as</span> RecordItem[];</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">save</span>(<span class="params">data: RecordItem[]</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.localStorage.setItem(key, <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> model;</span><br></pre></td></tr></table></figure><ol><li>修改文件名</li><li>声明类型</li><li>import 引入</li></ol><p>Vue Router</p><p>​ //index.ts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   path: &#39;&#x2F;labels&#x2F;edit&#x2F;:id&#39;,  &#x2F;&#x2F;不确定的路径</span><br><span class="line">   component: LabelEdit</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>//EditLabel.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$route.params.id&#x2F;&#x2F;获取当前路径 id对应的值</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转到404页面，无法后退</span></span><br><span class="line">$router.push(<span class="string">&quot;/404&quot;</span>);</span><br><span class="line"><span class="comment">//跳转到404页面，可以后退</span></span><br><span class="line">$router.replace(<span class="string">&quot;/404&quot;</span>);</span><br></pre></td></tr></table></figure><p>​</p><h4 id="父组件监听子组件事件"><a href="#父组件监听子组件事件" class="headerlink" title="父组件监听子组件事件"></a>父组件监听子组件事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&#x2F;&#x2F;将事件传递给父组件</span><br><span class="line">  &lt;button @click&#x3D;&quot;$emit(&#39;click&#39;,$event)&quot;&gt;</span><br><span class="line">    &lt;slot&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Labels.vue</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&#x2F;&#x2F;监听子组件传来的 click 事件</span><br><span class="line">&lt;Button @click&#x3D;&quot;createTag&quot;&gt;新建标签&lt;&#x2F;Button&gt;</span><br><span class="line">&#x2F;&#x2F;或者直接使用 .native  外部不用再监听</span><br><span class="line">&lt;Button @click.native&#x3D;&quot;createTag&quot;&gt;新建标签&lt;&#x2F;Button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>Vue 官方文档：<a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#%E5%B0%86%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6">将原生事件绑定到组件</a></p><p>在 Window 上声明变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Window &#123;</span><br><span class="line">  tagList: tag[]; <span class="comment">//变量名tagList ,类型 tag数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.tagList = xxx;</span><br></pre></td></tr></table></figure><h4 id="将-window-上的变量-放在-store-对象上"><a href="#将-window-上的变量-放在-store-对象上" class="headerlink" title="将 window 上的变量 放在 store 对象上"></a>将 window 上的变量 放在 store 对象上</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> recordStore <span class="keyword">from</span> <span class="string">&quot;@/store/recordStore&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> tagStore <span class="keyword">from</span> <span class="string">&quot;@/store/tagStore&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = &#123;</span><br><span class="line">  <span class="comment">//count:0,</span></span><br><span class="line">  <span class="comment">//add()&#123;this.count+=1&#125;,  在别的组件调用无法实现+1操作，因为count并不是对象，调用add方法无法改变</span></span><br><span class="line">  ...recordStore,</span><br><span class="line">  ...tagStore,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><h4 id="将-store-变成-this-store2"><a href="#将-store-变成-this-store2" class="headerlink" title="将 store 变成 this.$store2"></a>将 store 变成 this.$store2</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> store2 <span class="keyword">from</span> <span class="string">&quot;@/store/index2&quot;</span>;</span><br><span class="line">Vue.prototype.$store2 = store2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//custom.d.ts</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定制一个文件，设置你想要补充的类型</span></span><br><span class="line"><span class="comment">//    在 types/vue.d.ts 里 Vue 有构造函数类型</span></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&quot;vue/types/vue&quot;</span> &#123;</span><br><span class="line">  <span class="comment">// 3. 声明为 Vue 补充的东西</span></span><br><span class="line">  <span class="keyword">interface</span> Vue &#123;</span><br><span class="line">    $store2: <span class="built_in">any</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/guide/typescript.html#%E5%A2%9E%E5%BC%BA%E7%B1%BB%E5%9E%8B%E4%BB%A5%E9%85%8D%E5%90%88%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8">vuejs</a></p><h4 id="全局状态管理"><a href="#全局状态管理" class="headerlink" title="全局状态管理"></a>全局状态管理</h4><ol><li>解耦：将所有数据相关的逻辑放入 store（也就是 MVC 中的 Model，换了个名字而已）</li><li>数据读写更方便：任何组件不管在哪里，都可以直接读写数据</li><li>控制力更强：组件对数据的读写只能使用 store 提供的 API 进行（当然也不排除有猪队友直接对 tagList 和 recordList 进行 push 等操作，这是没有办法禁止的）</li></ol><h4 id="使用多个-class"><a href="#使用多个-class" class="headerlink" title="使用多个:class"></a>使用多个<code>:class</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;li :class&#x3D;&quot;value&#x3D;&#x3D;&#x3D;&#39;-&#39; &amp;&amp; &#39;selected&#39;&#125;&quot;  &#x2F;&#x2F;类名加引号 @click&#x3D;&quot;selectType(&#39;-&#39;)&quot;&gt;支出&lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">&lt;li :class&#x3D;&quot;&#123;[classPrefix+&#39;-item&#39;]:classPrefix,&#39;selected&#39;:value&#x3D;&#x3D;&#x3D;&#39;-&#39;&#125;&quot; @click&#x3D;&quot;selectType(&#39;-&#39;)&quot;&gt;支出&lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;如果存在classPrefix 就存在前面的类名  如果类名存在变量，使用[]</span><br><span class="line">[classPrefix+&#39;-item&#39;]:classPrefix,</span><br><span class="line">&#39;selected&#39;:value&#x3D;&#x3D;&#x3D;&#39;-&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ISO-8601-维基百科"><a href="#ISO-8601-维基百科" class="headerlink" title="ISO 8601 维基百科"></a>ISO 8601 <a href="https://zh.wikipedia.org/wiki/ISO_8601#%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E7%9A%84%E7%BB%84%E5%90%88%E8%A1%A8%E7%A4%BA%E6%B3%95">维基百科</a></h4>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue&quot;&gt;&lt;a href=&quot;#Vue&quot; class=&quot;headerlink&quot; title=&quot;Vue&quot;&gt;&lt;/a&gt;Vue&lt;/h1&gt;&lt;p&gt;先写 HTML，写好类&lt;/p&gt;
&lt;p&gt;再写 css 好 css 选择器&lt;/p&gt;
&lt;p&gt;Vue.compontent(‘Nav’,Nav) //全局声明 Nav 组件&lt;/p&gt;
&lt;p&gt;手机端使用 flex 定位（不使用 fixed）&lt;/p&gt;
&lt;p&gt;flex-direction:clumn&lt;/p&gt;
&lt;p&gt;flex-grow:1 剩余空间分配，宽或者高取决于 flex-direction&lt;/p&gt;
&lt;p&gt;overflow:auto&lt;/p&gt;
&lt;p&gt;使用 Vue 插槽 &lt;code&gt;&amp;lt;v-slot/&amp;gt;&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="https://github.com/Straight-GZ/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://github.com/Straight-GZ/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="Vue" scheme="https://github.com/Straight-GZ/tags/Vue/"/>
    
    <category term="TS" scheme="https://github.com/Straight-GZ/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>Vue3轮子</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/Vue3%E9%80%A0%E8%BD%AE%E5%AD%90/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/Vue3%E9%80%A0%E8%BD%AE%E5%AD%90/</id>
    <published>2021-02-19T03:35:19.385Z</published>
    <updated>2021-02-19T03:35:19.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、使用-Vite-搭建官网"><a href="#一、使用-Vite-搭建官网" class="headerlink" title="一、使用 Vite 搭建官网"></a>一、使用 Vite 搭建官网</h2><h4 id="1、安装、创建项目命令"><a href="#1、安装、创建项目命令" class="headerlink" title="1、安装、创建项目命令"></a>1、安装、创建项目命令</h4><ol><li><p>vite 文档给出的命令是</p><p>npm init vite-app <project-name></project-name></p><p>yarn create vite-app <project-name></project-name></p></li><li><p>等价于</p><p>全局安装 create-vite-app 然后</p><p>cva <project-name></project-name></p></li><li><p>等价于</p><p>npx createa-vite-app <project-name></project-name></p><p>即 npx 会帮你全局安装用到的包</p><a id="more"></a></li></ol><h4 id="2、Vue2-和-Vue3-的区别"><a href="#2、Vue2-和-Vue3-的区别" class="headerlink" title="2、Vue2 和 Vue3 的区别"></a>2、Vue2 和 Vue3 的区别</h4><ol><li>Vue3 的<code>template</code>标签支持多个根<strong>标签</strong>，Vue2 不支持</li><li>Vue3 有<code>createApp()</code>,而 Vue2 是<code>new Vue()</code></li><li><code>createApp(&#39;组件&#39;)，new Vue(&#123;template,render&#125;)</code></li></ol><h4 id="3、初始化-vue-router"><a href="#3、初始化-vue-router" class="headerlink" title="3、初始化 vue-router"></a>3、初始化 vue-router</h4><p>查看 vue-router 所有版本号：<code>npm info vue-router versions</code></p><ol><li><p>新建 history 对象</p></li><li><p>新建 router 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createWebHashHistory, createRouter &#125; from &quot;vue-router&quot;; const</span><br><span class="line">history &#x3D; createWebHashHistory(); const router &#x3D; createRouter(&#123; history:</span><br><span class="line">history, routes: [ &#123; path: &quot;&#x2F;&quot;, component: Home &#125;, &#123; path: &quot;&#x2F;doc&quot;, component:</span><br><span class="line">Doc, children: [ ​ &#123; path: &quot;&quot;, component: DocDemo &#125;, ​ &#123; path: &quot;switch&quot;,</span><br><span class="line">component: SwitchDemo &#125;, ​ &#123; path: &quot;button&quot;, component: ButtonDemo &#125;, ​ &#123;</span><br><span class="line">path: &quot;dialog&quot;, component: DialogDemo &#125;, ​ &#123; path: &quot;tabs&quot;, component:</span><br><span class="line">TabsDemo &#125;, ], &#125;, ], &#125;);</span><br></pre></td></tr></table></figure></li><li><p>引入 Typescript</p></li><li><p>app.use(router)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const app &#x3D; createApp(App); app.use(router); app.mount(&quot;#app&quot;);</span><br></pre></td></tr></table></figure></li><li><p>添加<router-view> //</router-view></p></li><li><p>添加<router-link></router-link></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;aside v-if&#x3D;&quot;menuVisible&quot;&gt;</span><br><span class="line">   &lt;h2&gt;组件列表&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">        &lt;!-- 使用 router-link 组件来导航. --&gt;</span><br><span class="line">    &lt;!-- 通过传入 &#96;to&#96; 属性指定链接. --&gt;</span><br><span class="line">    &lt;!-- &lt;router-link&gt; 默认会被渲染成一个 &#96;&lt;a&gt;&#96; 标签 --&gt;</span><br><span class="line">    &lt;li&gt;&lt;router-link to&#x3D;&quot;&#x2F;doc&#x2F;switch&quot;&gt;Switch 组件&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;router-link to&#x3D;&quot;&#x2F;doc&#x2F;button&quot;&gt;Button 组件&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;router-link to&#x3D;&quot;&#x2F;doc&#x2F;dialog&quot;&gt;Dialog 组件&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;router-link to&#x3D;&quot;&#x2F;doc&#x2F;tabs&quot;&gt;Tabs 组件&lt;&#x2F;router-link&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br><span class="line">&lt;&#x2F;aside&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">     &lt;!-- 路由出口 --&gt;</span><br><span class="line">  &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br><span class="line">    &lt;router-view &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;main&gt;</span><br></pre></td></tr></table></figure><h4 id="4、provide-和-inject"><a href="#4、provide-和-inject" class="headerlink" title="4、provide 和 inject"></a>4、provide 和 inject</h4></li><li><p><strong>set</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> menuVisible = ref(width &gt; <span class="number">500</span>);</span><br><span class="line">provide(<span class="string">&quot;menuVisible&quot;</span>, menuVisible); <span class="comment">// set</span></span><br></pre></td></tr></table></figure></li><li><p><strong>get</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> menuVisible = inject&lt;Ref&lt;<span class="built_in">boolean</span>&gt;&gt;(<span class="string">&quot;menuVisible&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="二、switch-组件"><a href="#二、switch-组件" class="headerlink" title="二、switch 组件"></a>二、switch 组件</h2></li></ol><h4 id="1、router-aftereach-，router-路由切换时调用"><a href="#1、router-aftereach-，router-路由切换时调用" class="headerlink" title="1、router.aftereach()，router 路由切换时调用"></a>1、router.aftereach()，router 路由切换时调用</h4><h4 id="2、calc"><a href="#2、calc" class="headerlink" title="2、calc():"></a>2、calc():</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS</a> 函数允许在声明 CSS 属性值时执行一些计算,calc()函数用一个表达式作为它的参数，用这个表达式的结果作为值</p><h4 id="3、v-model"><a href="#3、v-model" class="headerlink" title="3、v-model"></a>3、v-model</h4><ol><li>要求：</li></ol><ul><li>属性名任意，假设为 x</li><li>事件名必须为 <code>&quot;update:x&quot;</code></li></ul><ol start="2"><li>效果</li></ol><ul><li><code>&lt;Switch:value=&quot;y&quot; @update=&quot;y=$event&quot; /&gt;</code></li><li>可以简写为：<code>&lt;Switch v-model:value=&quot;y&quot;&gt;</code></li></ul><h4 id="4、知识点总结："><a href="#4、知识点总结：" class="headerlink" title="4、知识点总结："></a>4、知识点总结：</h4><ol><li><p><code>value=&quot;true&quot;</code>和<code>:value=&quot;true&quot;</code>的区别</p></li><li><p>css transition 添加过渡动画</p></li><li><p>使用 ref 创建内部数据</p></li><li><p>使用 <code>:value</code> 和 <code>@input</code> 让父子组件通信</p></li><li><p>使用<code>$event</code></p></li><li><p><code>v-model</code></p></li><li><p>不允许修改<code>props</code></p></li><li><p>vue2 与 vue3 的区别：</p></li></ol><ul><li>新增<code>v-model</code>代替以前的<code>v-model</code>和<code>.sync</code></li><li>新增<code>context.emit</code>，与<code>this.$event</code>作用相同</li></ul><h2 id="三、Button-组件"><a href="#三、Button-组件" class="headerlink" title="三、Button 组件"></a>三、Button 组件</h2><h4 id="1、Vue3-属性绑定"><a href="#1、Vue3-属性绑定" class="headerlink" title="1、Vue3 属性绑定"></a>1、Vue3 属性绑定</h4><ol><li><p>默认所有属性都绑定到根元素</p><p>//<strong>Button.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button&gt;&lt;slot &#x2F;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>//<strong>ButtonDemo.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;button 内容&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;h1&gt;示例&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;Button @click&#x3D;&quot;&quot; @focus&#x3D;&quot;&quot;&gt;按钮&lt;&#x2F;Button&gt; &#x2F;&#x2F;Button上所有时间属性</span><br><span class="line">  会绑定到Button组件跟元素上</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Button from &quot;..&#x2F;lib&#x2F;Button.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; Button &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>inheritAttrs:false</code>可以取消默认绑定</p></li><li><p>使用<code>$attrs</code>或者 <code>context.attrs</code> 获取所有属性</p></li><li><p>使用 <code>v-bind=&#39;$attrs&#39;</code>批量绑定属性</p></li><li><p>使用<code>const &#123;size,onclick,...xxx&#125;=context.attrs</code>将属性分开</p></li></ol><h4 id="2、props-和-attrs-的区别"><a href="#2、props-和-attrs-的区别" class="headerlink" title="2、props 和 attrs 的区别"></a>2、props 和 attrs 的区别</h4><ol><li>props 要先声明才能取值，attrs 不需要</li><li>props 不包含事件，attrs 包含</li><li>props 没有声明的属性，会跑到 attrs 里</li><li>props 支持 String 之外的类型，attrs 只支持 String 类型</li></ol><h4 id="3、CSS"><a href="#3、CSS" class="headerlink" title="3、CSS"></a>3、CSS</h4><ol><li><code> white-space: nowrap;</code> 来设置如何处理元素中的空白 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space">MDN</a></li><li>**<code>box-shadow</code>**用于在元素的框架上添加阴影效果 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-shadow">MDN</a></li></ol><h4 id="4、库的-css-要求"><a href="#4、库的-css-要求" class="headerlink" title="4、库的 css 要求"></a>4、库的 css 要求</h4><ol><li>不能用<code>scoped</code></li><li>每个 css 类加前缀，防止污染</li><li>css 最小邮箱原则</li></ol><h2 id="四、Dialog-组件"><a href="#四、Dialog-组件" class="headerlink" title="四、Dialog 组件"></a>四、Dialog 组件</h2><h4 id="1、具名插槽"><a href="#1、具名插槽" class="headerlink" title="1、具名插槽"></a>1、具名插槽</h4><p><strong>//DialogDemo.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-slot:content&gt;</span><br><span class="line">  &lt;strong&gt;hi&lt;&#x2F;strong&gt;</span><br><span class="line">  &lt;div&gt;你好&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;template v-slot:title&gt;</span><br><span class="line">  &lt;strong&gt;加粗的标签 &lt;&#x2F;strong&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>//Dialog.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;header&gt;</span><br><span class="line">            &lt;slot name&#x3D;&quot;title&quot; &#x2F;&gt;  &#x2F;&#x2F;对应 v-slot:title</span><br><span class="line">            &lt;span @click&#x3D;&quot;close&quot; class&#x3D;&quot;lunzi-dialog-close&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;header&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">            &lt;slot name&#x3D;&quot;content&quot; &#x2F;&gt;  &#x2F;&#x2F;对应 v-slot:content</span><br><span class="line">          &lt;&#x2F;main&gt;</span><br></pre></td></tr></table></figure><h4 id="2、Teleport-组件"><a href="#2、Teleport-组件" class="headerlink" title="2、Teleport 组件"></a>2、Teleport 组件</h4><p>Teleport 提供了一种干净的方法，允许我们控制在 DOM 中哪个父节点下呈现 HTML，而不必求助于全局状态或将其拆分为两个组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to&#x3D;&quot;body&quot;&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;teleport&gt;</span><br><span class="line">&#x2F;&#x2F;将 div放在body里面</span><br></pre></td></tr></table></figure><h4 id="3、动态加载组件"><a href="#3、动态加载组件" class="headerlink" title="3、动态加载组件"></a>3、动态加载组件</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> openDialog = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; title, content, ok, cancel, closeOnClickOverlay &#125; = options; <span class="comment">//获取参数选项</span></span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>); <span class="comment">//创建div</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div); <span class="comment">//将div作为body的子元素</span></span><br><span class="line">  <span class="keyword">const</span> close = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    app.unmount(div); <span class="comment">//卸载app组件</span></span><br><span class="line">    div.remove(); <span class="comment">//删除多余div</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">    <span class="comment">//创建组件</span></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> h(</span><br><span class="line">        <span class="comment">//通过h函数获取参数 需要的参数</span></span><br><span class="line">        Dialog,</span><br><span class="line">        &#123;</span><br><span class="line">          visible: <span class="literal">true</span>,</span><br><span class="line">          <span class="string">&quot;onUpdate:visible&quot;</span>: <span class="function">(<span class="params">newVisible</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (newVisible === <span class="literal">false</span>) &#123;</span><br><span class="line">              <span class="comment">//当新的visible的值为false</span></span><br><span class="line">              close(); <span class="comment">//直接卸载组件，并删除div</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          ok,</span><br><span class="line">          cancel,</span><br><span class="line">          closeOnClickOverlay,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          title,</span><br><span class="line">          content,</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  app.mount(div); <span class="comment">//将app 挂载到div上</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="五、Tabs-组件"><a href="#五、Tabs-组件" class="headerlink" title="五、Tabs 组件"></a>五、Tabs 组件</h2><h4 id="1、context-slots-default"><a href="#1、context-slots-default" class="headerlink" title="1、context.slots.default()"></a>1、context.slots.default()</h4><p><strong>检查组件内部标签类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context) &#123; const defaults &#x3D; context.slots.default();</span><br><span class="line">defaults.forEach((tag) &#x3D;&gt; &#123; if (tag.type !&#x3D;&#x3D; Tab) &#123; throw new Error(&quot;Tabs</span><br><span class="line">子标签必须是Tab标签&quot;); &#125; &#125;); &#125;,</span><br></pre></td></tr></table></figure><h4 id="2、onMounted、onUpdated、watchEffect"><a href="#2、onMounted、onUpdated、watchEffect" class="headerlink" title="2、onMounted、onUpdated、watchEffect"></a>2、onMounted、onUpdated、watchEffect</h4><p>使用<strong>watchEffect</strong>代替<strong>onMounted</strong>和<strong>onUpdated</strong>时，若第一次无法取到值，导致报错，可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onMounted(()&#x3D;&gt;&#123;</span><br><span class="line">onUpdated(()&#x3D;&gt;&#123;</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>一个 bug：<a href="https://github.com/vuejs/vue-next/issues/2013">https://github.com/vuejs/vue-next/issues/2013</a></p><h2 id="六、官网装修"><a href="#六、官网装修" class="headerlink" title="六、官网装修"></a>六、官网装修</h2><h4 id="1、clip-path-制作圆角"><a href="#1、clip-path-制作圆角" class="headerlink" title="1、clip-path 制作圆角"></a>1、<strong>clip-path</strong> 制作圆角</h4><p>clip-path: ellipse(130px 140px at 10% 20%);</p><h4 id="2、高亮当前路由"><a href="#2、高亮当前路由" class="headerlink" title="2、高亮当前路由"></a>2、高亮当前路由</h4><p>class:<code>router-link-active router-link-exact-active</code></p><h4 id="2、自制插件-支持-markdown"><a href="#2、自制插件-支持-markdown" class="headerlink" title="2、自制插件 支持 markdown"></a>2、自制插件 支持 markdown</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-nocheck</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> marked <span class="keyword">from</span> <span class="string">&quot;marked&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mdToJs = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="built_in">JSON</span>.stringify(marked(str));</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`export default <span class="subst">$&#123;content&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">md</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    configureServer: [</span><br><span class="line">      <span class="comment">// 用于开发</span></span><br><span class="line">      <span class="keyword">async</span> (&#123; app &#125;) =&gt; &#123;</span><br><span class="line">        app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">          <span class="comment">// koa</span></span><br><span class="line">          <span class="keyword">if</span> (ctx.path.endsWith(<span class="string">&quot;.md&quot;</span>)) &#123;</span><br><span class="line">            ctx.type = <span class="string">&quot;js&quot;</span>;</span><br><span class="line">            <span class="keyword">const</span> filePath = path.join(process.cwd(), ctx.path);</span><br><span class="line">            ctx.body = mdToJs(fs.readFileSync(filePath).toString());</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">await</span> next();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    transforms: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用于 rollup // 插件</span></span><br><span class="line">        test: <span class="function">(<span class="params">context</span>) =&gt;</span> context.path.endsWith(<span class="string">&quot;.md&quot;</span>),</span><br><span class="line">        transform: <span class="function">(<span class="params">&#123; code &#125;</span>) =&gt;</span> mdToJs(code),</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="4、demo-组件"><a href="#4、demo-组件" class="headerlink" title="4、demo 组件"></a>4、demo 组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; component.__sourceCodeTitle &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;demo-component&quot;&gt;</span><br><span class="line">      &lt;component :is&#x3D;&quot;component&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;demo-actions&quot;&gt;</span><br><span class="line">      &lt;Button @click&#x3D;&quot;hideCode&quot; level&#x3D;&quot;danger&quot; v-if&#x3D;&quot;codeVisible&quot;</span><br><span class="line">        &gt;隐藏代码&lt;&#x2F;Button</span><br><span class="line">      &gt;</span><br><span class="line">      &lt;Button @click&#x3D;&quot;showCode&quot; level&#x3D;&quot;main&quot; v-else&gt;查看代码&lt;&#x2F;Button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;demo-code&quot; v-if&#x3D;&quot;codeVisible&quot;&gt;</span><br><span class="line">      &lt;pre class&#x3D;&quot;language-css&quot; v-html&#x3D;&quot;html&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import Button from &quot;..&#x2F;lib&#x2F;Button.vue&quot;;</span><br><span class="line">import &quot;prismjs&quot;;</span><br><span class="line">const Prism &#x3D; (window as any).Prism;</span><br><span class="line">import &quot;..&#x2F;themes&#x2F;prism-okaidia.css&quot;;</span><br><span class="line">import &#123; computed, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; Button &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    component: Object,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    const codeVisible &#x3D; ref(false);</span><br><span class="line">    const showCode &#x3D; () &#x3D;&gt; (codeVisible.value &#x3D; true);</span><br><span class="line">    const hideCode &#x3D; () &#x3D;&gt; (codeVisible.value &#x3D; false);</span><br><span class="line">    const html &#x3D; computed(() &#x3D;&gt; &#123;</span><br><span class="line">      return Prism.highlight(</span><br><span class="line">        props.component.__sourceCode,</span><br><span class="line">        Prism.languages.html,</span><br><span class="line">        &quot;html&quot;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    return &#123; Prism, html, codeVisible, showCode, hideCode &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">$border-color: #d9d9d9;</span><br><span class="line">.demo &#123;</span><br><span class="line">  border: 1px solid $border-color;</span><br><span class="line">  margin: 16px 0 32px;</span><br><span class="line">  &gt; h2 &#123;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    padding: 8px 16px;</span><br><span class="line">    border-bottom: 1px solid $border-color;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-component &#123;</span><br><span class="line">    padding: 16px;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-actions &#123;</span><br><span class="line">    padding: 8px 16px;</span><br><span class="line">    border-top: 1px dashed $border-color;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-code &#123;</span><br><span class="line">    padding: 8px 16px;</span><br><span class="line">    border-top: 1px dashed $border-color;</span><br><span class="line">    &gt; pre &#123;</span><br><span class="line">      line-height: 1.1;</span><br><span class="line">      font-family: Consolas, &quot;Courier New&quot;, Courier, monospace;</span><br><span class="line">      margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p><code>vite.config.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-nocheck</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; md &#125; <span class="keyword">from</span> <span class="string">&quot;./plugins/md&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; baseParse &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/compiler-core&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  base: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">  assetsDir: <span class="string">&quot;assets&quot;</span>,</span><br><span class="line">  plugins: [md()],</span><br><span class="line">  vueCustomBlockTransforms: &#123;</span><br><span class="line">    demo: <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; code, path &#125; = options;</span><br><span class="line">      <span class="keyword">const</span> file = fs.readFileSync(path).toString();</span><br><span class="line">      <span class="keyword">const</span> parsed = baseParse(file).children.find(<span class="function">(<span class="params">n</span>) =&gt;</span> n.tag === <span class="string">&quot;demo&quot;</span>);</span><br><span class="line">      <span class="keyword">const</span> title = parsed.children[<span class="number">0</span>].content;</span><br><span class="line">      <span class="keyword">const</span> main = file.split(parsed.loc.source).join(<span class="string">&quot;&quot;</span>).trim();</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`export default function (Component) &#123;</span></span><br><span class="line"><span class="string">        Component.__sourceCode = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(main)&#125;</span></span></span><br><span class="line"><span class="string">        Component.__sourceCodeTitle = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(title)&#125;</span></span></span><br><span class="line"><span class="string">      &#125;`</span>.trim();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、使用-Vite-搭建官网&quot;&gt;&lt;a href=&quot;#一、使用-Vite-搭建官网&quot; class=&quot;headerlink&quot; title=&quot;一、使用 Vite 搭建官网&quot;&gt;&lt;/a&gt;一、使用 Vite 搭建官网&lt;/h2&gt;&lt;h4 id=&quot;1、安装、创建项目命令&quot;&gt;&lt;a href=&quot;#1、安装、创建项目命令&quot; class=&quot;headerlink&quot; title=&quot;1、安装、创建项目命令&quot;&gt;&lt;/a&gt;1、安装、创建项目命令&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;vite 文档给出的命令是&lt;/p&gt;
&lt;p&gt;npm init vite-app &lt;project-name&gt;&lt;/project-name&gt;&lt;/p&gt;
&lt;p&gt;yarn create vite-app &lt;project-name&gt;&lt;/project-name&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;等价于&lt;/p&gt;
&lt;p&gt;全局安装 create-vite-app 然后&lt;/p&gt;
&lt;p&gt;cva &lt;project-name&gt;&lt;/project-name&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;等价于&lt;/p&gt;
&lt;p&gt;npx createa-vite-app &lt;project-name&gt;&lt;/project-name&gt;&lt;/p&gt;
&lt;p&gt;即 npx 会帮你全局安装用到的包&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://github.com/Straight-GZ/categories/Vue/"/>
    
    
    <category term="博客" scheme="https://github.com/Straight-GZ/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>笔记汇总</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/jirengu/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/jirengu/</id>
    <published>2021-02-19T03:35:19.351Z</published>
    <updated>2021-02-19T03:35:19.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门阶段：（git、HTTP、HTML5、css3）"><a href="#入门阶段：（git、HTTP、HTML5、css3）" class="headerlink" title="入门阶段：（git、HTTP、HTML5、css3）"></a>入门阶段：（git、HTTP、HTML5、css3）</h1><h1 id="一、git"><a href="#一、git" class="headerlink" title="一、git:"></a>一、git:</h1><h2 id="1、git-入门："><a href="#1、git-入门：" class="headerlink" title="1、git 入门："></a>1、git 入门：</h2><h3 id="英语小课堂"><a href="#英语小课堂" class="headerlink" title="英语小课堂"></a>英语小课堂</h3><p>list 列表（ls) remove 删除(rm) recursive 递归的 echo 回声 touch 触摸 directory 目录/文件夹 force 强制</p><p>list remove recursive echoecho echo directory forceforce force</p><p>救命快捷键：Ctrl+c 中断</p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><h4 id="查："><a href="#查：" class="headerlink" title="查："></a>查：</h4><p>查看目录绝对路径：pwd</p><p>查看当前目录内容：ls</p><p>查看指定目录内容：ls+路径</p><p>查看文件内容：</p><p>cat 路径：全部内容</p><p>head 路径：前面 10 行，head 路径 -n 14（行数）</p><p>tail 路径：后面 10 行，tail 路径 -n 14（行数）</p><p>less 路径：分页查看 j、k</p><h4 id="增："><a href="#增：" class="headerlink" title="增："></a>增：</h4><p>创建文件：</p><ul><li>touch： a 创建一个空文件 多个文件空格隔开</li><li>echo： echo ‘hi’ &gt; 1.txt （覆盖） “&gt;&gt;”表示添加内容 echo -e ‘1/n2’ &gt;&gt;1.txt 添加多行</li></ul><p>创建目录：</p><ul><li><p>mkdir a/</p></li><li><p>mkdir -p a/b/c/d/e(多层目录) 多个目录 空格隔开</p></li><li><p>复制文件：cp 1.txt 2.txt 将 1.txt 的内容复制给 2.txt</p></li><li><p>复制目录：cp -r a b 将 a 目录里的内容复制给 b 目录 -r：递归、重现</p></li></ul><h4 id="删："><a href="#删：" class="headerlink" title="删："></a>删：</h4><p>rm 1.txt 删除文件</p><p>rm -r a 删除目录</p><h4 id="改："><a href="#改：" class="headerlink" title="改："></a>改：</h4><p>追加、修改内容：echo ‘1’&gt;&gt;1.txt</p><p>打开文件修改：code 1.txt start 1.txt</p><p>清空内容：echo “”&gt;1.txt 空内容代替文档内容 打开文件删除</p><p>修改文件名/目录：mv 1.txt 2.txt mv：移动</p><p>重命名文件名/目录：同上</p><p>修改文件最后更新时间：touch 1.txt</p><h3 id="命令的组合："><a href="#命令的组合：" class="headerlink" title="命令的组合："></a>命令的组合：</h3><p>命令成功：没有提示，返回 0</p><p>命令失败：提示 error，返回非 0</p><p>&amp;&amp;命令：当第一条命令成功之后执行下一条命令</p><p>;命令：不管第一条命令是否成功，都执行下一条</p><h4 id="脚本文件："><a href="#脚本文件：" class="headerlink" title="脚本文件："></a>脚本文件：</h4><ol><li>创建文件，后缀无所谓</li><li>添加可执行性权限：chmod +x ./文件名 （./ ：当前目录）</li><li>文件里写命令</li><li>运行 [sh 路径]执行</li><li>shebang #!/usr/bin/env sh</li><li>必须用正常的路径 ./文件名</li><li>添加 path 可以不写目录，直接执行</li></ol><h2 id="2、git-本地仓库"><a href="#2、git-本地仓库" class="headerlink" title="2、git 本地仓库"></a>2、git 本地仓库</h2><p>git 就是一条命令</p><p>六行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 你的英文名</span><br><span class="line">git config --global user.email 你的邮箱</span><br><span class="line">git config --global push.default simple</span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br><span class="line">git config --global core.editor <span class="string">&quot;code --wait&quot;</span></span><br><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure><h3 id="1-让你代码有版本："><a href="#1-让你代码有版本：" class="headerlink" title="1.让你代码有版本："></a>1.让你代码有版本：</h3><p>git init :初始化（指定目录），创建 .git 目录</p><p><strong>git add</strong> 路径:选择哪些变动是需要提交的</p><p>.gitignore：描述哪些文件是不需要提交的</p><p>git commit -m ：字符串：提交，说明理由 （字符串有空格，用引号）</p><p><strong>git commit -v</strong>：回顾修改的内容，添加详细提交理由<strong>（推荐）</strong></p><p>git reset –hard 提交号前六位：回到指定提交版本</p><p>git log： 查看历史 git reflog：查看所有的历史</p><h3 id="2-分支："><a href="#2-分支：" class="headerlink" title="2.分支："></a>2.分支：</h3><p>git branch ：基于当前 commit 创建分支，在哪个分支提交，就创建在哪个分支</p><p>git checkout：切换分支</p><p>git merge:合并分支</p><p><strong>步骤</strong>：</p><ol><li><p>选择需要保留的分支 master</p></li><li><p>运行 git merge x（合并的分支）</p></li><li><p>冲突</p><ul><li><p>发现冲突：</p><p>合并分支的时候<strong>conflict</strong>提示</p><p>使用 git status -sb 查看冲突文件</p></li><li><p>解决冲突：</p><p>依次打开文件</p><p>搜素‘====’四个等于号</p><p>选择要保留的代码，删除不用的代码</p><p>删除’====‘’&lt;&lt;&lt;&lt;’’&gt;&gt;&gt;&gt;’标记</p><p><strong>git add 对应文件</strong></p><p>再次使用 git status -sb 解决下一个冲突文件</p><p>直到没有冲突，运行<strong>git commit （不需要加选项）</strong></p></li></ul></li><li><p>合并完删除无用的分支 git branch -d x</p></li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>git 目录就是本地仓库</li><li>git add 处理的是文件变化，而不是文件，删除文件后，依然需要 git add 添加到提交区</li><li>常用的命令：<strong>git add</strong> 和<strong>git commit -v</strong></li></ul><h2 id="3、git-远程仓库"><a href="#3、git-远程仓库" class="headerlink" title="3、git 远程仓库"></a>3、git 远程仓库</h2><h3 id="生成-ssh-key（帮助文档）："><a href="#生成-ssh-key（帮助文档）：" class="headerlink" title="生成 ssh key（帮助文档）："></a>生成 ssh key（<a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#">帮助文档</a>）：</h3><ul><li>运行 ssh-keygen -t rsa -b 4096 -C +邮箱地址</li><li>一直回车键到没有提示</li><li>cat ~/.ssh/id_rsa.pub 得到公钥内容，复制内容</li><li>打开 Github，在设置页面粘贴公钥内容</li></ul><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><ul><li>运行 ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;</a></li><li>询问 yes/no,回答 yes</li></ul><h3 id="上传代码："><a href="#上传代码：" class="headerlink" title="上传代码："></a>上传代码：</h3><ol><li><p>新建 Github Repo，复制 ssh 地址</p></li><li><p>运行 git remote add origin git@xxxxx</p><p>（在本地添加远程仓库地址，origin 为远程仓库默认名字）</p></li><li><p>git push -u origin master</p></li></ol><ul><li>推送本地 master 分支到远程 originmaster 分支</li><li>提示应该 git pull…，就运行 git pull<img src="/Straight-GZ/2021/02/19/jirengu/Users\Crystal\AppData\Roaming\Typora\typora-user-images\image-20200929212241934.png" alt="image-20200929212241934"></li><li>-u origin master 意思为设置上游分支，之后不用再设置，直接 git pull，git push</li></ul><p><strong>上传其它分支：</strong></p><p>一：git push x:x</p><p>二：git checkout x</p><p>​ git push -u origin x</p><p><strong>上传到两个本地仓库</strong></p><ul><li>git remote add origin2 git@xxxxx</li><li>git push -u origin master</li></ul><p><strong>git pull 冲突</strong>：查看合并分支冲突</p><h3 id="下载代码："><a href="#下载代码：" class="headerlink" title="下载代码："></a>下载代码：</h3><ol><li>git clone git@xxx</li><li>不同机器需要先上传新的 ssh key(一机一 key)</li><li><strong>cd 目标路径</strong></li><li>运行 git add/git commit/[git pull]/git push</li></ol><p>下载某个分支：先下载整个仓库，再切换分支</p><p><strong>git clone</strong>：</p><ul><li><p>git clone git@?/xxx.git:会在当前目录下创建一个 xxx 目录，xxx/.git 是本地仓库，一般需要接 cd xxx 进入目录</p></li><li><p>git clone git@?/xxx.git yyy：会在本地新建一个 yyy 目录，cd yyy 进入目录</p></li><li><p>git clone git@?/xxx.git .:最后一个字符是点，使用当前目录容纳代码和.git，需要先新建一个目录，cd 进入目录</p></li></ul><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><p>常用命令：git alone/git pull/git push</p><p>远程仓库：本地仓库的备份，要先 commit 到本地仓库，然后 push 到远程仓库</p><p>​ 无法下载部分代码，只能先 clone 整个仓库生成 ssh key（<a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#">帮助文档</a>）：</p><ul><li>运行 ssh-keygen -t rsa -b 4096 -C +邮箱地址</li><li>一直回车键到没有提示</li><li>cat ~/.ssh/id_rsa.pub 得到公钥内容，复制内容</li><li>打开 Github，在设置页面粘贴公钥内容</li></ul><h3 id="测试：-1"><a href="#测试：-1" class="headerlink" title="测试："></a>测试：</h3><ul><li>运行 ssh -T <a href="mailto:&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#109;">&#103;&#x69;&#x74;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#99;&#x6f;&#109;</a></li><li>询问 yes/no,回答 yes</li></ul><h3 id="上传代码：-1"><a href="#上传代码：-1" class="headerlink" title="上传代码："></a>上传代码：</h3><ol><li><p>新建 Github Repo，复制 ssh 地址</p></li><li><p>运行 git remote add origin git@xxxxx</p><p>（在本地添加远程仓库地址，origin 为远程仓库默认名字）</p></li><li><p>git push -u origin master</p></li></ol><ul><li>推送本地 master 分支到远程 originmaster 分支</li><li>提示应该 git pull…，就运行 git pull<img src="/Straight-GZ/2021/02/19/jirengu/Users\Crystal\AppData\Roaming\Typora\typora-user-images\image-20200929212241934.png" alt="image-20200929212241934"></li><li>-u origin master 意思为设置上游分支，之后不用再设置，直接 git pull，git push</li></ul><p><strong>上传其它分支：</strong></p><p>一：git push x:x</p><p>二：git checkout x</p><p>​ git push -u origin x</p><p><strong>上传到两个本地仓库</strong></p><ul><li>git remote add origin2 git@xxxxx</li><li>git push -u origin master</li></ul><p><strong>git pull 冲突</strong>：查看合并分支冲突</p><h3 id="下载代码：-1"><a href="#下载代码：-1" class="headerlink" title="下载代码："></a>下载代码：</h3><ol><li>git clone git@xxx</li><li>不同机器需要先上传新的 ssh key(一机一 key)</li><li><strong>cd 目标路径</strong></li><li>运行 git add/git commit/[git pull]/git push</li></ol><p>下载某个分支：先下载整个仓库，再切换分支</p><p><strong>git clone</strong>：</p><ul><li><p>git clone git@?/xxx.git:会在当前目录下创建一个 xxx 目录，xxx/.git 是本地仓库，一般需要接 cd xxx 进入目录</p></li><li><p>git clone git@?/xxx.git yyy：会在本地新建一个 yyy 目录，cd yyy 进入目录</p></li><li><p>git clone git@?/xxx.git .:最后一个字符是点，使用当前目录容纳代码和.git，需要先新建一个目录，cd 进入目录</p></li></ul><h3 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h3><p>常用命令：git alone/git pull/git push</p><p>远程仓库：本地仓库的备份，要先 commit 到本地仓库，然后 push 到远程仓库</p><p>​ 无法下载部分代码，只能先 clone 整个仓库</p><h2 id="4、git-高级操作"><a href="#4、git-高级操作" class="headerlink" title="4、git 高级操作"></a>4、git 高级操作</h2><p>bash alias 简化命令： ga=”git add” gc=”git commit -v” gl=”git pull” gp=”git push” gco=”git checkout” gst=”git status -sb”</p><p>美化历史命令：git rebase -i xxx</p><h1 id="二、HTML5"><a href="#二、HTML5" class="headerlink" title="二、HTML5"></a>二、HTML5</h1><h2 id="1、概述："><a href="#1、概述：" class="headerlink" title="1、概述："></a>1、概述：</h2><h3 id="万维网："><a href="#万维网：" class="headerlink" title="万维网："></a>万维网：</h3><p>WWW（world wide web）：1990 年诞生，李爵士发明 WWW，同时发明了 HTML HTTP 和 url</p><p><strong>让用户输入网址就能看到网页</strong></p><h2 id="HTML5："><a href="#HTML5：" class="headerlink" title="HTML5："></a>HTML5：</h2><p>1、必须学会：</p><ul><li>语法：怎么写代码</li><li>如何调试：怎么知道代码写错</li><li>查资料：抄代码（MDN）</li><li>标准制定者:W3C 由李爵士创立</li></ul><p>2、CRM 学习法：</p><ul><li>Copy：抄文档，代码</li><li>Run：在自己的机器运行成功</li><li>Modify：加入自己的想法，重新运行</li></ul><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><p>1、标签</p><ul><li><code>&lt;!DOCTYPE html&gt; </code>：文档类型</li><li><code>&lt;tag attr=value&gt;内容&lt;/tag&gt;</code></li><li><code>&lt;tag attr&gt;内容&lt;/tag&gt;</code></li><li><code>&lt;tag attr=value&gt;</code></li><li>大小写没有区别，一般小写；引号看情况加与不加</li></ul><p>2、排错</p><ul><li>vscode 颜色提示</li><li>webstorm 提示（后面用）</li><li>HTML5 验证器：node-w3c-validator -i xxx</li></ul><h3 id="标签全解："><a href="#标签全解：" class="headerlink" title="标签全解："></a>标签全解：</h3><h4 id="1、英语单词"><a href="#1、英语单词" class="headerlink" title="1、英语单词"></a>1、英语单词</h4><p>section 章、节 article 一篇文章 aside 旁边的，与 main 相对</p><p>anchor 锚，定点 emphasis 强调，重读（strong 强壮，重要）</p><p>order 顺序 ordered 有序的 unordered 无序的</p><p>description 描述 term 术语 data 数据 quote 引用</p><h4 id="2、书籍："><a href="#2、书籍：" class="headerlink" title="2、书籍："></a>2、书籍：</h4><p><a href="https://wangdoc.com/html/index.html">网道 HTML 教程</a>：马上、枕上、厕上</p><h4 id="3、章节标签："><a href="#3、章节标签：" class="headerlink" title="3、章节标签："></a>3、章节标签：</h4><ul><li>标题：h1~h6</li><li>章节：section</li><li>文章：article</li><li>段落：p</li><li>头部：header</li><li>footer：脚部</li><li>主要内容：main</li><li>旁支内容：aside</li><li>划分：div</li></ul><p><strong>示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>页眉<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>第一章<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>页尾<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4、全局属性："><a href="#4、全局属性：" class="headerlink" title="4、全局属性："></a>4、全局属性：</h4><ul><li><p>class：类</p><p>属性相同，为同一类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个元素有多个类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p1 p2 p3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>contenteditable：使页面内容可编辑，让 style 标签显示出来，配合使用，可在页面编辑内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>鼠标点击，本句内容可修改。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>hidden：隐藏标签内容 可在 CSS 设置可见</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">hidden</span>&gt;</span>本句不会显示在页面上。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>id：唯一标识符，一般不用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>style：指定标签样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>tabindex： tab 的顺序</p><ol><li>值为负 1，表示永不访问</li><li>值为 0，最后一个切换</li><li>值为正整数，表示顺序</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">tabindex</span>=<span class="string">&quot;0&quot;</span>&gt;</span>这段文字可以获得焦点。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>title：显示完整的内容（附加说明）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;版权说明&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>本站内容使用创意共享许可证，可以自由使用<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5、默认样式："><a href="#5、默认样式：" class="headerlink" title="5、默认样式："></a>5、默认样式：</h4></li><li><p>不符合需求，一般需要重置</p></li><li><p>找到类似代码，复制到自己的项目</p></li></ul><h4 id="6、内容标签："><a href="#6、内容标签：" class="headerlink" title="6、内容标签："></a>6、内容标签：</h4><ul><li><p>ol+li（ordered list）：有序标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">效果： 1. 列表项 A 2. 列表项 B 3. 列表项 C</span><br></pre></td></tr></table></figure></li><li><p>ul+li:无序标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">效果： 1. 列表项 A 2. 列表项 B 3. 列表项 C</span><br></pre></td></tr></table></figure></li><li><p>dl+dt+dd（description list）:描述列表，用 dd 里的内容描述 dt 里的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>CPU<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>中央处理器<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Memory<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>内存<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Hard Disk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>硬盘<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line">效果： CPU 中央处理器 Memory 内存 Hard Disk 硬盘</span><br></pre></td></tr></table></figure></li><li><p>pre（preview）:保留回车、空格、tab</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">hello                      </span><br><span class="line"></span><br><span class="line">   world&lt;/pre</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>hr:分隔线</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第一个主题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第二个主题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>br:强制换行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello<span class="tag">&lt;<span class="name">br</span> /&gt;</span>world</span><br></pre></td></tr></table></figure></li><li><p>a（anchor）:链接标签 target=”_black”在新标签打开链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://wikipedia.org/&quot;</span>&gt;</span>维基百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>em（emphasis）:斜体显示，强调语气</p></li><li><p>strong:粗体显示，强调内容本身</p></li><li><p>code:以等宽字体显示，多行代码放在 pre 标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">  let a = 1;</span><br><span class="line">  console.log(a);</span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>q（quote）:引用</p></li><li><p>blockquote:块级引用，换行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>天才就是 1% 的天赋和99%的汗水。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-重点标签："><a href="#HTML-重点标签：" class="headerlink" title="HTML 重点标签："></a>HTML 重点标签：</h3></li></ul><h4 id="1、英语课堂："><a href="#1、英语课堂：" class="headerlink" title="1、英语课堂："></a>1、英语课堂：</h4><p>hyper：超级 target：目标 reference：引用 href:超链接</p><p>frame：边框，框架 blank：空白 load：加载 canvas:画布</p><p><strong>注：</strong>使用 http-server（hs -c -1）或 parcel 打开 HTML</p><h4 id="2、a-标签"><a href="#2、a-标签" class="headerlink" title="2、a 标签"></a>2、a 标签</h4><ol><li>属性：</li></ol><ul><li><p>href：</p><p>取值：</p><ol><li>网址：</li></ol><ul><li><a href="https://www.baidu.com/">https://www.baidu.com</a></li><li><a href="http://www.baidu.com/">http://www.baidu.com</a></li><li>//<a href="http://www.baidu.com(用这个就可以了)/">www.baidu.com（用这个就可以了）</a></li></ul><ol start="2"><li>路径：</li></ol><ul><li>/a/b/c 和 a/b/c：（绝对路径和相对路径，使用 http-server 效果相同）</li><li>index.html 以及./index.html</li></ul><ol start="3"><li>伪协议</li></ol><ul><li>javascript:代码（”javascript:;”可用于实现 点击没有任何操作)</li><li>mailto:邮箱</li><li>tel：手机号</li></ul><ol start="4"><li>id</li></ol><ul><li>href=#xxx 锚点链接</li></ul></li><li><p>target：</p><ol><li>内置名字</li></ol><ul><li><p>_blank：新窗口打开。</p></li><li><p>_top:</p><p>顶层窗口打开。如果当前窗口就是顶层窗口，这个值等同于<code>_self</code></p></li><li><p>_parent：</p><p>上层窗口打开，这通常用于从父窗口打开的子窗口，或者<code>&lt;iframe&gt;</code>里面的链接。如果当前窗口没有上层窗口，这个值等同于<code>_self</code></p></li><li><p>_self：当前窗口打开，这是默认值。</p></li></ul><ol start="2"><li>程序员命名</li></ol><ul><li><p>window 的 name</p><p>两个页面都在同一个名叫 test 的窗口打开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://foo.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;test&quot;</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://bar.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;test&quot;</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>iframe 的 name</p></li></ul></li><li><p>download：</p><ol><li>作用：不是打开页面，而是下载页面</li><li>问题：不是有浏览器都支持</li></ol></li><li><p>rel=noopener：</p></li></ul><ol start="2"><li>作用：</li></ol><ul><li>跳转到外部页面</li><li>跳转到内部页面</li><li>跳转到邮箱或者号码</li></ul><h4 id="3、table-标签：表格"><a href="#3、table-标签：表格" class="headerlink" title="3、table 标签：表格"></a>3、table 标签：表格</h4><p>相关的标签：</p><ul><li><p>table：表格</p></li><li><p>thead：表头</p></li><li><p>tbody：主体</p></li><li><p>tfoot：表格末尾</p></li><li><p>tr：行</p></li><li><p>td：数据单元格</p></li><li><p>th：表头，标题单元格</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>002<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相关样式：</p><p>table-layout</p><p>border-collapse</p><p>border-spacing</p><h4 id="4、img-标签："><a href="#4、img-标签：" class="headerlink" title="4、img 标签："></a>4、img 标签：</h4><p>作用：</p><p>发出 get 请求，展示一张图片</p><p>属性：</p><ul><li><p>src：指定图片网址</p><p><code>&lt;img src=&quot;foo.jpg&quot;&gt;</code></p></li><li><p>Alt:图片说明。加载失败显示。</p><p><code>&lt;img src=&quot;foo.jpg&quot; alt=&quot;示例图片&quot;&gt;</code></p></li><li><p>height、width：指定高度、宽度 只指定一个，另一个自适应</p></li></ul><p>事件：</p><p>onload/onerror （加载成功/加载失败）</p><p>响应式：</p><p><code>max-width:100%</code> 最大宽度为 100%</p><h4 id="5、form：表单标签"><a href="#5、form：表单标签" class="headerlink" title="5、form：表单标签"></a>5、form：表单标签</h4><p>作用：发 get 或 post 的请求，然后刷新页面</p><p>属性：</p><p>action：服务器接收数据的 url</p><p>autocomplete：是否自动填充（配合 input 标签<code>name=&quot;username&quot;</code>使用，会有用户名建议）</p><p>method：提交数据的 HTTP 方法 （post 或 get）</p><p>target：在哪个窗口展示返回数据</p><p>事件：onsubmit</p><h4 id="6、input-标签："><a href="#6、input-标签：" class="headerlink" title="6、input 标签："></a>6、input 标签：</h4><p>作用：让用户输入内容</p><p><strong>属性</strong>：</p><p>类型 type：决定形式</p><ul><li><p>text 普通本输入框</p></li><li><p>color 选择颜色</p></li><li><p>button 按钮</p><p><code>&lt;input type=&quot;button&quot; value=&quot;点击&quot;&gt;</code></p><p>可使用 button 标签代替</p></li><li><p>submit 提交按钮(必须要有，否则提交不了)</p><p><code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</code></p></li><li><p>radio 单选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>checkbox 复选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>唱</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>跳</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>Rap</span><br></pre></td></tr></table></figure></li><li><p>password：密码输入框，输入会被遮挡</p></li><li><p>file：文件选择框，multiple 属性，是否允许选择多个文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span>选择一个文件 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span> /&gt;</span>选择多个文件</span><br></pre></td></tr></table></figure></li><li><p>hidden：不显示在页面</p></li></ul><p>其他属性：</p><ul><li><p>name：名称</p></li><li><p>value：值</p></li></ul><p><strong>事件</strong>：</p><p>onchange/onfocus/onblur</p><p><strong>验证器：</strong></p><p>HTML5 新增功能。</p><p>required：是否为必填控件。</p><h4 id="7、其他输入标签"><a href="#7、其他输入标签" class="headerlink" title="7、其他输入标签"></a>7、其他输入标签</h4><ul><li><p>button 标签</p><p>生成一个可以点击的按钮，内部不仅放置文字，还可以放置图像</p><p>type 属性，按钮的类型：submit（提交）、button（不提交）</p></li><li><p>textarea 标签：生成多行的文本框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">type</span>=<span class="string">&quot;resize：none;width: 50%;height 300px &quot;</span>&gt;</span></span><br><span class="line">这是一个很长的故事。</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>resize：none</code> 输入框无法拖动</p></li><li><p>select+option 标签：生成下拉菜单</p><p>selected 表示默认选择的菜单项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">selected</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>label：控件的文字说明</p></li></ul><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li>一般不监听 input 的 click</li><li>form 里面的 input 要有 name</li><li>form 里面要放一个 type=submit 才能触发 submit 事件</li></ul><p>其他标签：</p><p>video：视频</p><p>audio：音频</p><p>canvas：画布</p><p>svg：矢量图</p><h1 id="三、CSS"><a href="#三、CSS" class="headerlink" title="三、CSS"></a>三、CSS</h1><h2 id="1、CSS-基础概念："><a href="#1、CSS-基础概念：" class="headerlink" title="1、CSS 基础概念："></a>1、CSS 基础概念：</h2><h3 id="一、css-简介："><a href="#一、css-简介：" class="headerlink" title="一、css 简介："></a>一、css 简介：</h3><p>1、CSS，英文全称：Cascading Style Sheets，由李爵士的挪威同事赖先生（Håkon Wium Lie）于 1994 年首先提出。</p><p>标准的制定者：W3C。搜索 CSS spec 可以找到 CSS 最新标准。</p><p>2、层叠指什么？</p><ul><li><p>样式层叠：可以的多次对同一个选择器进行样式声明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择器层叠：可以用不同的选择器对同一个元素进行样式声明</p></li><li><p>文件层叠：可以用多个文件进行层叠</p></li></ul><p><strong>这些特性使得 CSS 极具灵活性</strong></p><p>3、版本：</p><ul><li>CSS2.1，2004~2011 年，是目前使用最为广泛的版本（IE 支持）</li><li>CSS3，1999 年起草，现代版本、分模块（IE8 部分支持）</li><li>CSS3 之后，分模块各自升级</li></ul><p>4、caniuse.com：查看浏览器支持特性。</p><h3 id="二、语法："><a href="#二、语法：" class="headerlink" title="二、语法："></a>二、语法：</h3><p>1、语法一：样式语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line"></span><br><span class="line">​属性名:属性值;</span><br><span class="line"></span><br><span class="line">​<span class="comment">/*注释*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>符号都是英文符号，</li><li>区分大小写，a 和 A 完全不同</li><li>没有//注释</li><li>最后一个分号可以省略，不建议省略</li><li>任何地方写错浏览器不会报错，会直接忽略</li></ul><p>语法二：at 语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> url(<span class="number">2</span>.css);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">100px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">200px</span>)&#123;</span><br><span class="line"></span><br><span class="line">​语法一</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li><code>@charset</code>必须放在第一行</li><li>前两个 at 语法必须以分号;结尾</li><li>@media 语法</li><li><code>charset</code>是字符集的意思，但 UTF-8 是字符编码 encoding，是历史遗留问题</li></ul><h3 id="三、调试-CSS"><a href="#三、调试-CSS" class="headerlink" title="三、调试 CSS"></a>三、调试 CSS</h3><p>1、方法</p><p>vscode 看颜色</p><p>webstorm 看颜色</p><p>开发者工具看警告</p><p>2、开发者工具的使用</p><ul><li>找到标签</li><li>看它是否有选择器</li><li>看它的样式有没有被划掉</li><li>看它的样式是否有警告</li></ul><p>3、border 调试法</p><p>步骤：</p><ul><li>怀疑某个元素有问题，就给这个元素加 border</li><li>border 没出现，说明选择器或者语法错了</li><li>border 出现了，看看边界是否符合预期</li><li>bug 解决了把 border 删掉</li></ul><h3 id="四、基础概念："><a href="#四、基础概念：" class="headerlink" title="四、基础概念："></a>四、基础概念：</h3><h4 id="1、文档流-Normal-Flow"><a href="#1、文档流-Normal-Flow" class="headerlink" title="1、文档流 Normal Flow"></a>1、文档流 Normal Flow</h4><p>流动方向：</p><ul><li>inline 元素从左到右，到达最右边才会换行</li><li>block 元素从上到下，每一个都另起一行</li><li>inline-block 也是从左到右（换行元素不会跨两行）</li></ul><p>宽度:</p><ul><li>inline 宽度为内部 inline 元素的和，不能用 width 指定</li><li>block 默认自动计算宽度，可用 width 指定（默认为 auto，几乎不写<code>width：100%</code>）</li><li>inline-block 结合前两者特点，可用 width</li></ul><p>高度：</p><ul><li>inline 高度由 line-height 间接确定，跟 height 无关</li><li>block 高度由内部文档流元素决定，可以设置 height</li><li>inline-block 跟 block 类似，可以设置 height</li></ul><p>overflow 溢出：</p><ul><li>内容的宽度或高度大于容器，会溢出</li><li>可以使用 overflow 来设置是否显示滚动条<ul><li>auto 灵活设置</li><li>scroll 永远显示</li><li>hidden 直接隐藏溢出部分</li><li>visible 直接显示溢出部分</li></ul></li></ul><p>脱离文档流：</p><ul><li>float</li><li>position： absolute/fixed</li></ul><h4 id="2、盒模型"><a href="#2、盒模型" class="headerlink" title="2、盒模型"></a>2、盒模型</h4><p>两种：</p><p>content-box 内容盒—内容就是盒子的边界</p><p>border-box 边框盒—边框才是盒子的边界</p><p>公式：</p><p>content-box width=内容宽度</p><p>border-box width=内容宽度+padding+border</p><p>哪个好用?</p><p>border-box</p><p><img src="/Straight-GZ/2021/02/19/jirengu/Users\Crystal\Music\盒模型.png" alt="image-20201007215036202"></p><h4 id="3、margin-合并"><a href="#3、margin-合并" class="headerlink" title="3、margin 合并"></a>3、margin 合并</h4><p>合并的情况：</p><ul><li><p>父子 margin 合并：</p><p>父元素与第一个子元素上外边距合并，与最后一个子元素下外边距合并，取大的值</p><p>前提是：没有内容将父级元素和子元素隔开，没有 border、padding、行内内容。</p><p>取消合并：<code>overflow：hidden</code> <code>dispaly:flex</code></p></li><li><p>兄弟 margin 合并：</p><p>重叠的部分合并，取大值</p><p>可以用 inline-block 取消合并</p></li></ul><p><strong>margin 合并只合并上下外边距，不合并左右外边距</strong></p><p>基本单位：</p><p>长度单位：</p><ul><li>px 像素</li><li>em 相对于自身 font-size 的倍数</li><li>百分数</li><li>整数</li><li>rem</li><li>vw 和 vh</li></ul><p>颜色：</p><p>十六进制：#ff6600 或者 #f60 #ff660000 最后两位表示 a 透明度</p><p>rgba：颜色 rgb(0,0,0) 或者 rgba(0,0,0,1) a 表示透明度</p><p>hsl：hsl(360,100%,100%) 或者 hsla(360,100%,100%,100%)</p><h2 id="2、布局"><a href="#2、布局" class="headerlink" title="2、布局"></a>2、布局</h2><h3 id="一、布局概述"><a href="#一、布局概述" class="headerlink" title="一、布局概述"></a>一、布局概述</h3><p>布局就是把页面分成一块一块，按左中右、上中下等排列。</p><p>1、布局分类：</p><ul><li><strong>固定宽度布局</strong>，一般为 960/1000/1024px</li><li><strong>不固定布局</strong>，主要靠文档流的原理来布局（文档流是自适应，不需要加额外样式）</li><li><strong>响应式布局</strong>，PC 上固定宽度，手机不固定宽度，混合布局</li></ul><p>2、布局思路</p><p>从大到小：先定下大局，然后完善每个部分的小布局</p><p>从小到大：先完成小布局，然后组合成大布局（新手推荐）</p><p><img src="/Straight-GZ/2021/02/19/jirengu/桌面\布局.png" alt="image-20201008104840623"></p><h3 id="二、float-布局"><a href="#二、float-布局" class="headerlink" title="二、float 布局"></a>二、float 布局</h3><p>步骤：</p><ul><li><p>在子元素上加 float:left 和 width</p></li><li><p>在父元素上加.clearfix（不要忘了加）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经验：</p></li><li><p>留一些空间或者最后一个不设 width，或者设置一个最大宽度</p></li><li><p>不需要做响应式，float 是为 IE 准备的</p></li><li><p>IE6/7 存在双倍 margin bug</p></li></ul><p>实践：</p><ul><li>float 两栏布局（顶部条）：<code>float:left; </code> <code>clearfix</code></li><li>float 三栏布局（内容区）</li><li>float 四栏布局（导航栏）</li><li>float 平均布局（产品展示）需要在内容外再加一层，使用负 margin</li></ul><p>经验：</p><ul><li>加上头尾，即可满足 PC 页面需求</li><li>手机页面不用 float</li><li>float 需要自己计算宽度，不灵活</li><li>应付 IE 足以</li></ul><h3 id="三、flex-布局"><a href="#三、flex-布局" class="headerlink" title="三、flex 布局"></a>三、flex 布局</h3><p>1、容器：container</p><ul><li><p>让一个元素变成 flex 容器:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/* or inline-flex (行内flex)*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>改变 items 流动方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reserve | column | column-reserve;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>row:文本方向相同 row-reserve：文本方向相同，置换起点和终点</p><p>column：文本方向相反 column-reserve：文本方向相反，置换起点和终点</p></li><li><p>改变折行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主轴对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flex-start：从行首开始排列 flex-end：从行尾开始排列 center：居中</p><p>space-between：元素间距离相同，第一个在行首，最后一个在行尾</p><p>space-around:相邻元素距离相同，首个元素距行首位置和最后一个元素距行尾位置是<strong>相邻元素距离的一半</strong></p><p>space-evenly：均匀分配，首个元素距行首位置和最后一个元素距行尾位置和<strong>相邻元素距离相同</strong></p></li><li><p>次轴对齐方式：默认次轴是纵轴</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch |flex-start | flex-end | center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stretch：次轴方向被拉伸到与容器同等宽度</p></li><li><p>多行内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stretch:拉伸所有行填满剩余空间，剩余空间平均分给每一行</p></li></ul><p>项：items</p><ul><li>order：规定每一项的顺序 默认为 0</li><li>flex-grow:增长系数。控制如何变胖 默认为 0</li><li>flex-shrink：收缩规则。控制如何变瘦。0 防止变瘦，默认是 1</li><li>flex-basis：控制基准宽度，默认为 auto</li><li>flex： flex-grow flex-shrink flex-basis 缩写，空格隔开</li><li>align-self</li></ul><h3 id="四、Grid-布局"><a href="#四、Grid-布局" class="headerlink" title="四、Grid 布局"></a>四、Grid 布局</h3><p>1、container</p><ul><li><p>成为 container</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/* or inline-flex (行内flex)*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>行和列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">40px</span> <span class="number">50px</span> auto <span class="number">50px</span> <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">25%</span> <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Straight-GZ/2021/02/19/jirengu/桌面\grid.png" alt="image-20201009211428577"></p></li><li><p>给每条线取名字：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>:</span><br><span class="line">    [first] <span class="number">40px</span> [line2] <span class="number">50px</span> [line3] auto</span><br><span class="line">    [col4-start] <span class="number">50px</span> [five] <span class="number">40px</span> [end];</span><br><span class="line">  <span class="attribute">grid-template-rows</span>:</span><br><span class="line">    [row1-start] <span class="number">25%</span> [row1-end] <span class="number">100px</span> [third-line]</span><br><span class="line">    auto [last-line];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>items 可以设置范围</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: five;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: row1-start;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>fr（free space） 份 可以和像素混用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">50px</span> <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分区 grid-template-areas</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-areas</span>:</span><br><span class="line">  &quot;<span class="selector-tag">head</span> <span class="selector-tag">head</span>&quot;</span><br><span class="line">  &quot;<span class="selector-tag">nav</span>  <span class="selector-tag">main</span>&quot;</span><br><span class="line">  &quot;<span class="selector-tag">nav</span>  <span class="selector-tag">foot</span>&quot;; <span class="comment">/* 区域划分 当前为 三行 两列 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page</span> &gt; <span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: head; <span class="comment">/*  指定当前元素所在的区域位置, 从grid-template-areas选取值 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#8ca0ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、CSS-定位"><a href="#五、CSS-定位" class="headerlink" title="五、CSS 定位"></a>五、CSS 定位</h3></li></ul><p>布局是屏幕平面上的，<strong>定位是垂直于屏幕的</strong></p><h4 id="1、盒模型："><a href="#1、盒模型：" class="headerlink" title="1、盒模型："></a>1、盒模型：</h4><p><img src="/Straight-GZ/2021/02/19/jirengu/桌面\盒模型1.png" alt="image-20201009222315075"></p><ul><li>背景的范围：border<strong>外边沿</strong>围城的区域（包括 border）</li><li>从左边看 div：background 在文字后面</li></ul><h4 id="2、div-的分层："><a href="#2、div-的分层：" class="headerlink" title="2、div 的分层："></a>2、div 的分层：<img src="/Straight-GZ/2021/02/19/jirengu/桌面\分层.png" alt="image-20201009222803054"></h4><p>浮动元素脱离文档流：浮起来一点点</p><h4 id="3、position-属性"><a href="#3、position-属性" class="headerlink" title="3、position 属性"></a>3、position 属性</h4><ul><li><p>static：默认值，待在文档流里</p></li><li><p>relative：相对定位，升起来，但不脱离文档流</p><ul><li><p>使用场景：</p><p>1.用于做位移（很少用） 2.用于给 absolute 做爸爸</p></li><li><p>配合 z-index</p><p>z-index： auto 默认值，不创建新层叠上下文 可以取 0 正负整数</p></li></ul></li><li><p>absolute：绝对定位，定位基准是祖先里的非 static</p><ul><li><p>使用场景</p><p>1、脱离原来的位置，另起一层（对话框里的关闭按钮）</p><p>2、鼠标提示</p></li><li><p>注意：</p><p>1、某些浏览器如果不写 top/left 位置会错乱</p><p>2、善用<code>left:100%</code> 善用<code>left:50%</code> 加负 margin</p></li></ul></li><li><p>fixed： 固定定位，定位基准是 viewPort （父元素有 transform）</p><ul><li>使用场景：广告、回到顶部按钮</li><li>注意：手机上尽量不要使用，bug 很多。</li></ul></li><li><p>sticky： 粘滞定位</p></li></ul><p>经验：</p><ul><li>如果写了 absolute，一般都得补一个 relative</li><li>如果写了 absolute 或 fixed，一定要补 top 和 left；</li><li>sticky 兼容性差</li></ul><p><strong>例子</strong>：<a href="http://js.jirengu.com/lumad/17/edit?html,css,output">http://js.jirengu.com/lumad/17/edit?html,css,output</a></p><h4 id="4、z-index"><a href="#4、z-index" class="headerlink" title="4、z-index"></a>4、z-index</h4><p><img src="/Straight-GZ/2021/02/19/jirengu/桌面\z-index.png" alt="image-20201009224821008"></p><p>取值：</p><ul><li>auto：不会创建一个新的本地堆叠上下文。在当前堆叠上下文中生成的盒子的堆叠层级和父级盒子相同。</li><li>整型数字：生成的盒子在当前堆叠上下文中的堆叠层级。此盒子也会创建一个堆叠层级为 0 的本地堆叠上下文。这意味着后代（元素）的 z-indexes 不与此元素的外部元素的 z-indexes 进行对比。</li></ul><p>层叠上下文：</p><ul><li><p>每个层叠上下文就是一个新的小世界</p></li><li><p>每个小世界里的 z-index 跟外界无关</p></li><li><p>处在同一小世界的 z-index 才能比较</p></li><li><p>哪些属性可以创建它</p><p>z-index/flex/opacity/transform <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context">层叠上下文 MDN</a></p></li></ul><p><strong>负 margin 与层叠上下文：负 z-index 逃不出小世界</strong></p><h3 id="六、CSS-动画"><a href="#六、CSS-动画" class="headerlink" title="六、CSS 动画"></a>六、CSS 动画</h3><h4 id="1、浏览器渲染原理及过程："><a href="#1、浏览器渲染原理及过程：" class="headerlink" title="1、浏览器渲染原理及过程："></a>1、浏览器渲染原理及过程：</h4><p>浏览器通过解析生成 DOM、CSSDOM，合成 render tree，然后布局（Layout）、绘制（Paint）、合成（Compose）页面。</p><p>步骤：</p><ul><li>根据 HTML 构建 HTML 树（DOM）</li><li>根据 CSS 构建 CSS 树（CSSOM）</li><li>将两棵树合并成一棵渲染树（render tree）</li><li>Layout 布局（文档流、盒模型、计算大小和位置）</li><li>Paint 绘制（边框颜色、文字颜色、阴影等）</li><li>Compose 合成（根据层叠关系展示画面）</li></ul><p><strong>三棵树：</strong></p><p><img src="/Straight-GZ/2021/02/19/jirengu/桌面\三棵树.png" alt="image-20201010210100772"></p><p>三种更新方式：</p><p>JS / CSS &gt; 样式 &gt; 布局 &gt; 绘制 &gt; 合成</p><p><img src="/Straight-GZ/2021/02/19/jirengu/桌面\images\更新方式1"></p><p>如果您修改元素的“layout”属性，也就是改变了元素的几何属性（例如宽度、高度、左侧或顶部位置等），那么浏</p><p>览器将必须检查所有其他元素，然后“自动重排”页面。任何受影响的部分都需要重新绘制，而且最终绘制的元素需进</p><p>行合成。<br><img src="/Straight-GZ/2021/02/19/jirengu/桌面\2.png"></p><p>如果您修改“paint only”属性（例如背景图片、文字颜色或阴影等），即不会影响页面布局的属性，则浏览器会</p><p>跳过布局，但仍将执行绘制。<br><img src="/Straight-GZ/2021/02/19/jirengu/桌面\3.png"></p><p>如果您更改一个既不要布局也不要绘制的属性，则浏览器将跳到只执行合成。这个<strong>最后的版本开销最小</strong>，最适合于应</p><p>用生命周期中的高压力点，例如<strong>动画或滚动</strong>。</p><p>一般使用 js 更新样式：</p><ul><li><p>div.style.background=’red’ 改变背景颜色，跳过 Layout，直接 repaint+Compose <br></p></li><li><p>div.classList.add(‘red’) 改变 transform，只需 Compose</p></li><li><p>div.remove()删掉节点 触发当前消失，其他元素 Layout</p><p><strong>不同属性触发的过程 祥见：<a href="https://csstriggers.com/">https://csstriggers.com/</a></strong></p></li></ul><h4 id="2、transform-改变形态"><a href="#2、transform-改变形态" class="headerlink" title="2、transform 改变形态"></a>2、transform 改变形态</h4><p><strong>旋转、旋转，缩放，倾斜或平移。</strong></p><ul><li><p>translate：位移 参数：长度、百分数（translate()不可用）</p><p><code>translateX（tx）</code> 水平移动 <code>translateY(ty)</code> 垂直移动</p><p><code>translateZ(tz)</code> 3D 空间的 z 轴方向移动 配合父元素 perspective() （到 z=0 平面的距离）</p><p><code>translate(tx,ty?)</code> <code>translate(tx,ty,tz)</code></p><p><strong><code>translate(50%,50%)</code>可以做绝对定位元素居中</strong></p></li><li><p>scale：缩放 参数：number</p><p><code>scaleX(sx)</code> 横坐标缩放 <code>scaleY(sy)</code> 纵坐标缩放 <code>scaleX(sx,sy?)</code></p><p><strong>容易出现模糊</strong></p></li><li><p>rotate：旋转</p><p><code>rotate(a)</code> 旋转角度 同<code>rotateZ(a)</code> <code>rotateX(a)</code> x 轴旋转 <code>rotateY(a)</code> y 轴转动</p><p><strong>用 360° 旋转 制作 loading</strong></p></li><li><p>skew：倾斜</p><p><code>skewX()</code>沿横倾斜 <code>skewY()</code>沿纵轴倾斜 <code>skew(ax, ay?)</code></p></li></ul><p><strong>transform 组合使用：</strong></p><p><code>transform: scale(0.5) translate(-100%, -100%);</code></p><p><code>transform: none</code> 取消所有</p><p><strong>注</strong>：</p><ul><li><p>一般配合<strong>transition</strong>过渡</p></li><li><p>inline 元素不支持 transform，需要先变成 block</p></li></ul><h4 id="3、制作动画"><a href="#3、制作动画" class="headerlink" title="3、制作动画"></a>3、制作动画</h4><ol><li>transition 过渡</li></ol><ul><li><p>作用：补充中间帧</p></li><li><p>语法：</p><ol><li><p>transition：属性名 时长 过渡方式 延迟 <code>transition: left 200ms linear</code></p></li><li><p>可以用逗号分隔两个属性 <code>transition: left 200ms,right 200ms</code></p></li><li><p>可以用 all 代表所有属性 <code>transition all 200ms</code></p></li><li><p>过渡方式：linear | ease | ease-in-out | step-start <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function">详细点击</a></p></li></ol></li><li><p>注意：并不是所有的属性都可以过渡</p><ol><li><p>display：none =&gt; block 无法过渡 一般改成 visibility:hidden =&gt; visible(隐藏或显示，但不改变布局)</p></li><li><p>颜色、透明度，都可以过渡。<strong>过渡必须有起始</strong></p></li></ol></li><li><p>如果有中间点</p><ol><li>使用两次 transform .a=transform=&gt;.b .b=transform=&gt;.c</li></ol></li></ul><ol start="2"><li>使用 setTimeout 或者监听 transitioned 事件</li><li><strong>animation</strong></li></ol><h5 id="例子：跳动的心"><a href="#例子：跳动的心" class="headerlink" title="例子：跳动的心"></a><strong>例子：<a href="http://js.jirengu.com/dunuz/1/edit?html,css,output">跳动的心</a></strong></h5><ol start="2"><li>animation 动画制作</li></ol><ul><li><p>声明关键帧</p><p>**<code>@keyframes</code>**语法 两种写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> slidein &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0%</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> identifier &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加动画</p><p>animation 缩写语法：</p><p><code>animation: 时长|过渡方式|延迟|次数|方向|填充模式|是否暂停|动画名</code></p><ol><li>时长：1s 或者 100ms</li><li>过渡方式：和 transition 的取值一样</li><li>次数：1 或者 2.4 infinite 无限次</li><li>方向 reverse|alternate|alternate-reverse</li><li>填充模式：none|forwards|backwards|both</li><li>是否暂停：paused|running</li><li>以上属性均有单独属性</li></ol><p><strong>我们可以在任意一个点指定关键帧，所以 animation 可以用来做更复杂的动画</strong></p></li></ul><h5 id="例子：跳动的心-1"><a href="#例子：跳动的心-1" class="headerlink" title="例子：跳动的心"></a>例子：<a href="http://js.jirengu.com/fuzib/7/edit?html,css,output">跳动的心</a></h5><h1 id="四、HTTP"><a href="#四、HTTP" class="headerlink" title="四、HTTP"></a>四、HTTP</h1><h3 id="1、IP-Internet-Protocol-网际互联协议"><a href="#1、IP-Internet-Protocol-网际互联协议" class="headerlink" title="1、IP(Internet Protocol)网际互联协议"></a>1、IP(Internet Protocol)网际互联协议</h3><p>IP 主要约定两件事：</p><ul><li>如何定位一台设备</li><li>如何封装数据报文，以跟其他设备交流</li></ul><p>1、外网 IP 和内网 IP</p><ul><li>租用宽带，连接路由器，就会有一个<strong>外网 IP</strong>（重启路由器，可能会重新分配）</li><li>路由器创建内网，内网中的设备使用内网 IP，一般格式是 192.168.X.X</li></ul><p>2、路由器</p><ul><li>路由器有一个内网 IP、一个外网 IP</li><li>内网中的设备可以互相访问，但不能直接访问外网，需经过路由器中转</li><li>外网中的设备可以互相访问，但无法访问你的内网，访问也必须结果路由器</li><li>内网外网互相隔绝，唯一联通的点就是路由器，也被叫做<strong>网关</strong></li></ul><p>特殊的 IP：</p><p>127.0.0.1 表示自己</p><p>localhost 通过 hosts 指定为自己（可以编辑 hosts 自定义）</p><p>0.0.0.0 不表示任何设备</p><h3 id="2、端口-Port"><a href="#2、端口-Port" class="headerlink" title="2、端口 Port"></a>2、端口 Port</h3><p>一台机器可以提供不同服务</p><ul><li>HTTP 服务最好使用 80 端口</li><li>https 服务使用 443 端口</li><li>ftp 服务使用 21 端口</li><li>一共 65535 个端口</li></ul><p>端口使用规则：</p><ul><li>0~1023 号端口是留给系统使用的端口，只有拥有管理员权限才能使用</li><li>其他端口普通用户可以使用，如 http-server 默认使用 8080 端口（http-server -c -1 -p 1234 把端口改为 1234）</li><li>一个端口如果被占用，只能换一个端口</li></ul><p><strong>端口和 IP 缺一不可</strong></p><h3 id="3、域名"><a href="#3、域名" class="headerlink" title="3、域名"></a>3、域名</h3><ul><li><p>域名就是对 IP 的别称</p><p>ping 命令 <code>ping baidu.com</code> （对应百度的 IP）</p><p>一个域名可以对应不同的 IP，均衡负载</p><p>一个 IP 可以对应不同域名，共享主机</p></li><li><p>域名和 IP 是如何对应的呢？ DNS（<strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem）</p><p>过程：</p><ol><li><p>当你输入域名，浏览器会向网络运营商的<strong>DNS 服务器</strong>询问对应的 IP</p><p>nslookup 命令 <code>nslookup baidu.com</code> 得到百度的 IP 地址</p></li><li><p>浏览器向对应的 IP 的 <strong>80/443 端口</strong> 发送请求</p></li><li><p>请求内容是查看域名首页。</p></li></ol><p>服务器默认<strong>80 端口</strong>提供 HTTP 服务，<strong>443 端口</strong>提供 https 服务（开发者工具可以看到具体的端口）</p><p>域名级别：</p><p>顶级域名：.com</p><p>二级域名：xxx.com 俗称一级域名</p><p>三级域名：<a href="http://www.xxx.com/">www.xxx.com</a> 俗称二级域名 （是 xxx.com 的子域名)</p></li><li><p>域名级别：</p><p>顶级域名：.com</p><p>二级域名：xxx.com 俗称一级域名</p><p>三级域名：<a href="http://www.xxx.com/">www.xxx.com</a> 俗称二级域名 （是 xxx.com 的子域名)</p></li><li><p>请求不同的页面，使用<strong>路径</strong></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">https://developer.mozilla.org/zh-CN/docs/Web/HTML</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">https://developer.mozilla.org/zh-CN/docs/Web/CSS</a></p></li><li><p>同一个页面不同内容，使用<strong>查询参数</strong></p><p><a href="https://www.baidu.com/s?wd=hi">https://www.baidu.com/s?wd=hi</a> （&amp;pn=10 可以确定页数)</p><p><a href="https://www.baidu.com/s?wd=hello">https://www.baidu.com/s?wd=hello</a></p></li><li><p>同一个内容，不同位置 使用<strong>锚点</strong></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E5%8F%82%E8%80%83%E4%B9%A6">https://developer.mozilla.org/zh-CN/docs/Web/CSS#参考书</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E6%95%99%E7%A8%8B">https://developer.mozilla.org/zh-CN/docs/Web/CSS#教程</a></p><p>锚点看起来有中文，其实不支持中文，上述链接会变成</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E5%8F%82%E8%80%83%E4%B9%A6">https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E5%8F%82%E8%80%83%E4%B9%A6</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E6%95%99%E7%A8%8B">https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E6%95%99%E7%A8%8B</a></p><p>锚点无法在 Network 面板看到，因为锚点不会传给服务器</p></li></ul><h4 id="4、URL"><a href="#4、URL" class="headerlink" title="4、URL"></a>4、URL</h4><p><strong>统一资源定位符（</strong>Uniform Resource Locator<strong>）</strong>：协议+域名或 IP+端口号+路径+查询字符串+锚点</p><p><img src="/Straight-GZ/2021/02/19/jirengu/桌面\url.png" alt="image-20201012155755699"></p><p>https 端口为默认为 443；</p><h3 id="4、HTTP"><a href="#4、HTTP" class="headerlink" title="4、HTTP"></a>4、HTTP</h3><p>基于 TCP 和 IP 两个协议</p><p>一、curl 命令</p><p>用 curl 可以发 HTTP 请求</p><ul><li><p>curl -v <a href="http://baidu.com/">http://baidu.com</a></p></li><li><p>curl -s -v <a href="https://www.baidu.com/">https://www.baidu.com</a></p></li></ul><p>注：</p><ul><li>url 会被 curl 工具重写，先请求 DNS 获得 IP</li><li>先进行 TCP 链接，TCP 连接成功后，发送 HTTP 请求</li><li>请求、响应结束后，关闭 TCP 连接（看不出来），真正结束。</li></ul><p>二、请求与响应</p><p><strong>请求与响应模型</strong></p><p><img src="/Straight-GZ/2021/02/19/jirengu/Users\Crystal\AppData\Roaming\Typora\typora-user-images\image-20201013085810028.png" alt="image-20201013085810028"></p><h4 id="1、如何发送请求？"><a href="#1、如何发送请求？" class="headerlink" title="1、如何发送请求？"></a>1、如何发送请求？</h4><p>方法：</p><ul><li><p>用 chrome 地址栏</p></li><li><p>用 curl 命令</p></li></ul><p>概念：帮你发请求的工具叫“用户代理” 英文名 User Agent</p><h4 id="2、如何做出一个响应"><a href="#2、如何做出一个响应" class="headerlink" title="2、如何做出一个响应?"></a>2、如何做出一个响应?</h4><ul><li><p>方法：使用编程 node.js 中 http 模块可以做到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;有个傻子发请求过来啦！路径（带查询参数）为：&quot;</span> + pathWithQuery);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (path === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">  response.statusCode = <span class="number">200</span>;</span><br><span class="line">  response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">  response.write(<span class="string">`二哈`</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&quot;/x&quot;</span>) &#123;</span><br><span class="line">  response.statusCode = <span class="number">200</span>;</span><br><span class="line">  response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/css;charset=utf-8&quot;</span>);</span><br><span class="line">  response.write(<span class="string">`body&#123;color: red;&#125;`</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  response.statusCode = <span class="number">404</span>;</span><br><span class="line">  response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">  response.write(<span class="string">`你输入的路径不存在对应的内容`</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li>代码是服务器代码，一般放在服务器上</li><li>path 是不带查询参数的路径</li><li>query 是查询参数的对象形式{a:’1’}</li><li>queryString 是带查询参数的路径，一般不用</li><li>request 是请求对象 response 是响应对象</li><li>不同的符号<img src="/Straight-GZ/2021/02/19/jirengu/Users\Crystal\AppData\Roaming\Typora\typora-user-images\image-20201013091317073.png" alt="image-20201013091317073"></li></ol></li><li><p>代码逻辑</p><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#96;这种字符串&#96;可以回车</span><br><span class="line">&#39;这种字符串&#39;要回车只能用\n表示</span><br></pre></td></tr></table></figure></li><li><p>逻辑</p><ul><li>每次收到请求，都会执行一遍代码</li><li>用 if else 判断路径，并返回响应</li><li>如果是已知路径，一律返回 200；未知路径，一律返回 404</li><li>Content-Type 表示内容的[类型/语法]</li><li>response.write()可以填写返回内容</li><li>response.end()表示响应可以发给用户了</li></ul></li><li><p>注意事项：</p></li></ol><ul><li><p>URL 里的后缀没用，/y.css 里的内容不一定是 CSS 内容</p></li><li><p>Content-Type 才是决定文件类型的关键</p></li></ul></li></ul><h4 id="3、HTTP-基础概念"><a href="#3、HTTP-基础概念" class="headerlink" title="3、HTTP 基础概念"></a>3、HTTP 基础概念</h4><ul><li><p><strong>请求</strong></p><ul><li><p>内容</p><ol><li><strong>请求动词 路径加查询参数 协议名/版本</strong></li><li>host:域名或 IP</li><li>Accept:text/html</li><li>Content-Type:请求体的格式</li><li>回车</li><li>请求体</li></ol></li><li><p>细节：</p><ol><li>三部分：请求行(1)、请求头(2~4)、请求体(6)</li><li>请求动词有 GET/POST/PUT/PATCH/DELETE 等</li><li>请求体在 GET 请求中一般为空</li><li>标准文档 RFC2612 第五章</li><li>大小写不敏感</li></ol></li></ul></li><li><p><strong>响应</strong></p><ul><li><p>内容</p><ol><li>协议名/版本 状态码 状态字符串</li><li>Content-Type：响应体的格式</li><li>回车</li><li>响应体（下载内容）</li></ol></li><li><p>细节：</p><ol><li>三部分：状态行（1）、响应行（2）、响应体</li><li>常见的状态码</li><li>文档位于 　 RFC2612 第六章</li></ol></li></ul></li></ul><h1 id="核心阶段-（JS、算法与数据结构、Node-js、前后端分离）"><a href="#核心阶段-（JS、算法与数据结构、Node-js、前后端分离）" class="headerlink" title="核心阶段 （JS、算法与数据结构、Node.js、前后端分离）"></a>核心阶段 （JS、算法与数据结构、Node.js、前后端分离）</h1><h1 id="五、JavaScript"><a href="#五、JavaScript" class="headerlink" title="五、JavaScript"></a>五、JavaScript</h1><h2 id="1、JavaScript-概述"><a href="#1、JavaScript-概述" class="headerlink" title="1、JavaScript 概述"></a>1、JavaScript 概述</h2><p>查看代码行数：</p><p>yarn global add cloc</p><p>cloc –vsc=git 统计仓库里的有效代码</p><p>一、历史</p><ol><li>1995 年 4 月，网景公司录用了布兰登（Brendan Eich），成为 JavaScript 的设计者</li><li>1996 年 8 月，IE3 发布，支持 JScript，浏览器大战开始。网景公司为了反击，将 JavaScript 提交给国际标准化组织 ECMA 希望 JavaScript 能够成为国际标准，以此抵抗微软。</li><li>1997 年 7 月，ECMA 组织发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript。ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。</li><li>1998 年 11 月 24 日，网景公司被收购。IE 浏览器成为主流。IE6 的如日中天，导致微软懈怠，不愿花费太多精力。谷歌抓住机会，Chrome 快速发展。</li><li>2004 年，谷歌发布 Gmail 在线网页，当时的人们以为网页只能看新闻和图片，Gmail 让人眼前一亮。2005 年， Jesse 将谷歌用到的技术命名为 AJAX，前端技术正式出现。2006 年，jQuery 发布，后面十年大放异彩，是目前最长寿的 JS 库。</li><li>2008 年，Chrome 终于发布，同时发布了 JS 引擎 V8。2009 年，Ryan 创建了 Node.js。 2010 年，Isaac 写出了 npm，TJ 发布了 Express.js。JavaScript 爆发。</li><li>2010 年之后，移动市场兴起，前端摆脱了 IE 浏览器的支配恐惧快速发展。</li></ol><h2 id="2、js-语法"><a href="#2、js-语法" class="headerlink" title="2、js 语法"></a>2、js 语法</h2><h3 id="一、表达式与语句"><a href="#一、表达式与语句" class="headerlink" title="一、表达式与语句"></a>一、表达式与语句</h3><h4 id="1-表达式："><a href="#1-表达式：" class="headerlink" title="1.表达式："></a>1.表达式：</h4><ul><li>1+2 表达式的值为 3</li><li>add(1,2)表达式的值为函数的返回值</li><li>console.log 表达式为函数本身</li><li>console.log(3)表达式的值是？ <strong>undefined</strong></li></ul><h4 id="2-语句："><a href="#2-语句：" class="headerlink" title="2.语句："></a>2.语句：</h4><p><code>var a = 1</code> 是一个语句</p><p><strong>区别</strong>：</p><ul><li>表达式一般都有值，语句可能有有可能没有</li><li>语句一般会改变环境（声明，赋值）</li><li>上面两点并不绝对</li></ul><h4 id="3-其他："><a href="#3-其他：" class="headerlink" title="3.其他："></a>3.其他：</h4><ul><li><p>大小写敏感</p><p>大小写是不同的</p><ul><li>var a 和 var A</li><li>object 和 Object</li><li>function 和 Function</li></ul></li><li><p>空格和回车</p><p><strong>大部分空格和回车没有意义</strong></p><ul><li>var a=1 和 var a = 1 没有区别</li><li>回车大部分时候不影响，<strong>return 后面不能加</strong>（加回车变成 undefined）</li></ul></li><li><p>标识符</p><p>规则：</p><ul><li>第一个字符，可以是 Unicode 字母或$或_或中文</li><li>后面的字符，除了上面所说，还可以有数字</li></ul><p>变量名是标识符：</p><ul><li>var _=1</li><li>var $=2</li><li>var =6(下划线最多两个，会被骂)</li><li>var 你好=’hi’</li></ul></li><li><p>注释：</p><ul><li>//:注释一行</li><li>/* */:注释多行</li><li>好的注释：踩坑注解，奇怪代码、bug 解释</li></ul></li><li><p>区块 block</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">​<span class="keyword">let</span> b =<span class="number">2</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 if/for/while 合用</p></li></ul><h3 id="二、条件语句"><a href="#二、条件语句" class="headerlink" title="二、条件语句"></a>二、条件语句</h3><h4 id="1、if-语句"><a href="#1、if-语句" class="headerlink" title="1、if 语句"></a>1、if 语句</h4><ol><li><strong>语法：</strong></li></ol><p>if(表达式){语句 1}else{语句 2} <code>&#123;&#125;</code>在语句只有一句的时候可以省略，不建议省略</p><ol start="2"><li><strong>注意：</strong></li></ol><ul><li><p>表达式里 a=1 (一个=赋值，===等于)</p></li><li><p>嵌套的 if else(省略括号的情况)</p></li><li><p>缩进</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a === <span class="number">2</span>) <span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>); <span class="comment">//省略括号，if只能包含一句代码除非逗号,隔开</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a等于2&quot;</span>); <span class="comment">//打印 a等于2</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>推荐写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">  语句;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">  语句;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">return</span> 表达式;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">return</span> 表达式;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>永远不要写 有歧义的代码</strong></p></li></ol><h4 id="2、switch-语句"><a href="#2、switch-语句" class="headerlink" title="2、switch 语句"></a>2、switch 语句</h4><ol><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;banana&quot;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;apple&quot;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>break 不可省略，省略会继续执行下一个 case</p></li></ol><h4 id="3、问号冒号表达式（三元运算符-）"><a href="#3、问号冒号表达式（三元运算符-）" class="headerlink" title="3、问号冒号表达式（三元运算符?:）"></a>3、问号冒号表达式（三元运算符<code>?:</code>）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">条件 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">A ? B : C;</span><br></pre></td></tr></table></figure><p>若条件为真，返回表达式 1 的值，否则返回表达式 2 的值</p><p>可视为 if…else 简写形式</p><p>4、短路逻辑</p><p>&amp;&amp;：<code>A&amp;&amp;B&amp;&amp;C&amp;&amp;D</code>取第一个假值或 D，并不会取 true 或 false</p><p>常见用法：<code>A&amp;&amp;B</code> <code>fn&amp;&amp;fn()</code> 如果 fn 存在，就调用 fn(j)</p><p>||: <code>A||B||C||D</code> 取第一个真值或 D,并不会取 true 或 false</p><p>常见用法： <code>A||B</code> <code>A=A||B</code>如果 A 不存在，那么 A=B</p><h4 id="4、while-循环"><a href="#4、while-循环" class="headerlink" title="4、while 循环"></a>4、while 循环</h4><ol><li>语法</li></ol><ul><li>while(表达式){语句}</li><li>判断表达式的真假</li><li>表达式为真，执行语句，执行完再判断表达式真假</li><li>表达式为假，执行后面的语句</li></ul><ol start="2"><li>注意</li></ol><ul><li><p>while 循环没有返回值</p></li><li><p>表达式为”true”，会陷入死循环</p></li><li><p>特殊情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">while</span> (i !== <span class="number">1</span>) &#123;</span><br><span class="line">  i = i + <span class="number">0.1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码也会陷入无限循环 （浮点数）</p></li></ul><h4 id="5、for-循环"><a href="#5、for-循环" class="headerlink" title="5、for 循环"></a>5、for 循环</h4><p>for 是 while 循环的方便写法</p><ol><li>语法：</li></ol><ul><li>for(语句 1;条件表达式;语句 2){循环体}</li><li>先执行语句 1，然后执行条件表达式</li><li>如果为真，执行循环体，然后执行语句 3，再次执行判断表达式，如此循环</li><li>如果为假，退出循环，执行后面语句</li></ul><ol start="2"><li>注意：</li></ol><ul><li><p>for 循环退出之前会最后执行一次语句 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">//i的值为5</span></span><br></pre></td></tr></table></figure></li><li><p>setTimeout 过一会执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="comment">//会打出5个5</span></span><br></pre></td></tr></table></figure></li><li><p>for 里面三个表达式都可以省略，后面两个省略可能会陷入无限循环</p></li></ul><h4 id="6、continue-和-break"><a href="#6、continue-和-break" class="headerlink" title="6、continue 和 break"></a>6、continue 和 break</h4><ol><li>continue，跳过本轮循环</li><li>break，跳出循环</li><li>不带参数，只针对多层循环中的当前一层</li></ol><h4 id="7、label-标签"><a href="#7、label-标签" class="headerlink" title="7、label 标签"></a>7、label 标签</h4><p>相当于定位符，可以与 continue 和 break 混合使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo: &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">break</span> foo;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;本行不会输出&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>面试题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  foo: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码是什么？ 代码块中有一个标签 foo，foo 的内容为 1</p><h2 id="3、数据类型与运算符"><a href="#3、数据类型与运算符" class="headerlink" title="3、数据类型与运算符"></a>3、数据类型与运算符</h2><h3 id="一、数字与字符串"><a href="#一、数字与字符串" class="headerlink" title="一、数字与字符串"></a>一、数字与字符串</h3><p>都是一，为什么要分 1 和’1’？</p><ol><li>功能不同</li></ol><ul><li><p>数字能加减乘除，字符串不行</p></li><li><p>字符串能表示电话号码，数字不行</p></li><li><p>字符串是字符串，数字是数字，<strong>严谨</strong></p></li></ul><ol start="2"><li>存储形式不同</li></ol><ul><li>js 中，数字是用 64 位浮点数的形式存储的</li><li>字符串是用类似 UTF8 的形式存储的</li></ul><p>二、存储</p><ol><li>数字的存储(十进制转二进制即可)</li></ol><ul><li><p>十进制转二进制</p><p><code>32=0*2^5+1*2^4+1*2^3+1*2^2+1*2^1+1*2^0</code> 结果为 11111</p></li><li><p>二进制转十进制</p><p>每一位乘以 2 的 N-1 次方</p></li><li><p>十六进制表示二进制</p><p>从右向左，每四位改写成一位</p></li><li><p>计算器程序员模式</p><p>HEX：16 进制 BIN：2 进制 OCT：8 进制 DEC：10 进制</p></li></ul><ol start="2"><li>如何存字符 <strong>编码</strong></li></ol><ul><li>48<del>57 表示数字符号 65</del>90 表示大写字母 97~122 表示小写字母</li><li>国标 2312 0000~ffff 表示汉字</li><li>GBK 国标扩：中日韩几乎所有汉字</li><li>Unicode 万国码：全世界通用，每个字符至少要用 3 个字节</li><li>UTF—8：Unicode 的存储方式</li></ul><h3 id="二、数据类型和运算符"><a href="#二、数据类型和运算符" class="headerlink" title="二、数据类型和运算符"></a>二、数据类型和运算符</h3><h4 id="1、数字-number"><a href="#1、数字-number" class="headerlink" title="1、数字 number"></a>1、数字 number</h4><ul><li><p>写法:</p><ul><li><p>整数写法、小数写法</p></li><li><p>科学记数法：1.23e4</p></li><li><p>八进制：0123 或 00123 或 0o123</p></li><li><p>十六进制：0x3f 或 0X3f</p></li><li><p>二进制：0b11 或 0B11</p></li></ul></li><li><p>特殊值</p><ul><li><p>正 0 和负 0 都等于 0，但不相同(做除数的时候)</p></li><li><p>无穷大：Infinity、+Infinity、-Infinity</p></li><li><p>无法表示的数字：NaN(not a number) <strong>也是一个数字</strong></p></li></ul><p>存储形式：64 位浮点数</p><ul><li>表示：第一位表示符号：0 正 1 负 中间 11 位表示指数部分（基数 2 省略） 后 52 表示有效数字(开头的 1 省略)</li><li>范围：5e-324~1.7977e308</li><li>精度：只能到 52+1 个二进制位表示的有效数字，十进制是 9 后面 15 个零，有效数字 15 位能精确表示，16 位有效数字开头两位小于 90</li></ul></li></ul><h4 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h4><ul><li><p>写法：</p><p>单引号：’你好’</p><p>双引号：”你好”</p><p>反引号：`你好` <strong>中间可以加回车</strong></p></li><li><p>注意：</p><p>引号不是字符串的一部分</p></li><li><p>转义：</p><ul><li><p>例：字符串 it’s ok</p><p>‘it’s ok’ 这样写会被认为’it’结束了</p><p>正确写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;it\&#x27;s ok&#x27;</span>;</span><br><span class="line"><span class="string">&quot;it&#x27;s ok&quot;</span><span class="string">`it&#x27;s ok`</span>;</span><br></pre></td></tr></table></figure></li><li><p>其他</p><p><code>\&#39;表示&#39; \&quot;表示&quot;</code></p><p><code>\n</code>换行 <code>\r</code>回车 <code>\t</code>表示 tab 制表符</p><p><code>\\</code>表示\</p><p>\uFFFF 表示对应的 Unicode 字符</p><p>\xFF 表示前 256 个 Unicode 字符</p></li></ul></li><li><p>字符串属性</p><ul><li><p>字符串的长度:string.length</p><p>\不算字符串长度，空格算在长度里，空字符串’’长度为 0</p></li><li><p>通过下标读取字符：string[index]</p><p>index 从 0 开始，length-1 结束</p></li></ul></li><li><p>base64 转码</p><ul><li><p><code>window.btoa</code>：正常字符转为 Base64 编码字符串</p></li><li><p><code>window.atob</code>：Base64 转码字符串转回原来的字符串</p></li></ul></li></ul><h4 id="3、布尔"><a href="#3、布尔" class="headerlink" title="3、布尔"></a>3、布尔</h4><ul><li><p>只有两个值：true 和 false（小写）</p></li><li><p>下列运算符会得到 bool 值</p><ul><li>否定运算 !value</li><li>相等运算 1==2、1!=2、1===2、1!==2</li><li>比较运算 1&gt;2、1&gt;=2、1&lt;2、1&lt;=2</li></ul></li><li><p>if 和 bool</p><ul><li>if 语句需要判断真假<code>if(value)&#123;...&#125;else&#123;...&#125;</code></li><li>五个 falsy 值：相当于 false 的值:<strong>undefined null 0 NaN ‘’(空字符串)</strong></li><li>注意：’’、’ ‘不一样，注意区分</li></ul></li></ul><h4 id="4、两种空类型"><a href="#4、两种空类型" class="headerlink" title="4、两种空类型"></a>4、两种空类型</h4><p>undefined 和 null</p><p>区别：</p><ul><li>没有本质区别</li><li>如果一个变量声明了，但没有赋值，默认值为 undefined，而不是 null</li><li>如果一个函数没有写 return，那么默认 returnundefined，而不是 null</li></ul><h4 id="4、symbol"><a href="#4、symbol" class="headerlink" title="4、symbol"></a>4、symbol</h4><ul><li>语法：<code>Symbol([description])</code> description 可选的字符串</li><li>直接使用<code>Symbol()</code>创建新的 symbol 类型，并用一个可选的字符串作为其描述。</li><li>详见：MDN:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol - JavaScript</a> 阮一峰:<a href="https://es6.ruanyifeng.com/#docs/symbol">ECMAScript 6 入门</a></li></ul><h4 id="5、变量声明"><a href="#5、变量声明" class="headerlink" title="5、变量声明"></a>5、变量声明</h4><ol><li><p>let 声明</p><p>规则:</p><ul><li><p>：遵循块作用域，使用范围不能超出{}</p></li><li><p>不能重复声明</p></li><li><p>可以赋值，也可以不赋值</p></li><li><p>必须先声明再使用</p></li><li><p>全局声明 let 变量，不会变成 window 的属性</p></li></ul></li><li><p>const 声明</p><p>规则和 let 基本相同。只有一点不同，const 声明时就要赋值，赋值后不能更改</p></li><li><p>声明变量</p></li></ol><ul><li>指定值 let a=1</li><li>同时指定了类型</li><li>值和类型可以随意变化</li><li>name 和’name’的区别：<ul><li>name 是变量，值可变</li><li>‘name’是字符串常量，’name’就是’name’，不能是其他值</li></ul></li><li>类型转换<ul><li>number=&gt;string: <code>String(n)</code> <code>n+&#39;&#39;</code></li><li>string=&gt;number:<code>Number(s)</code> <code>parseInt(s)/parseFloat(s)</code> <code>s-0</code></li><li>x=&gt;bool: <code>Boolea(x)</code> <code>!!x</code></li><li>x=&gt;string:<code>String(x)</code> x.toString()</li></ul></li></ul><h2 id="4、JS-对象-object"><a href="#4、JS-对象-object" class="headerlink" title="4、JS 对象 object"></a>4、JS 对象 object</h2><p>第七种数据类型，复杂类型</p><h4 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h4><ol><li><p>定义</p><ul><li>无序的数据集合</li><li>键值对的集合</li></ul></li><li><p>写法</p><ul><li><p><code>let obj = &#123; &#39;name&#39;: &#39;straight&#39;, &#39;age&#39;: 20 &#125; （简单写法）</code></p></li><li><p><code>let obj = new Object(&#123;&#39;name&#39;: &#39;frank&#39;&#125;) </code>（常规写法）</p></li><li><p><code>console.log(&#123; &#39;name&#39;: &#39;frank, &#39;age&#39;: 18 &#125;)</code></p></li><li><p><strong>注意：</strong></p><ul><li>键名是字符串，不是标识符</li><li>引号可以省略，省略之后只能写标识符</li><li><strong>就算省略了引号，键名还是字符串</strong></li><li>属性名：key 属性值：value</li></ul></li></ul></li><li><p>奇怪的属性名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">3.2</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">1e2</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="number">1e-2</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="number">.234</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="number">0xFF</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line">=&gt; [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;255&quot;</span>, <span class="string">&quot;3.2&quot;</span>, <span class="string">&quot;0.01&quot;</span>, <span class="string">&quot;0.234&quot;</span>]</span><br><span class="line"><span class="comment">//如果不加引号，js会先做运算，把结果作为key</span></span><br></pre></td></tr></table></figure><p>Object.keys(obj)可以得到 obj 的所有 keys</p></li><li><p><strong>变量做属性名</strong>（重点）</p></li></ol><ul><li><p>写法：属性名+[]</p></li><li><p>对比：</p><ul><li><p>let p1 = ‘name’</p></li><li><p>let obj = { p1 : ‘ss’} 这样写，属性名为 ‘p1’</p></li><li><p>let obj = { [p1] : ‘ss’ } 这样写，属性名为 ‘name’</p></li></ul></li><li><p>注意：</p><ul><li>不加[]属性名会自动变成字符串</li><li>加了[]则会作为变量求值</li><li>值如果不是字符串，会自动变成字符串</li></ul></li></ul><p>6、变量的隐藏属性</p><ul><li><p>JS 中每一个对象都有一个隐藏属性</p></li><li><p>这个隐藏属性储存着其共有属性组成的对象（原型）的地址</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.toString(); <span class="comment">// 不会报错</span></span><br><span class="line"><span class="comment">//因为 obj 的隐藏属性对应的对象上有 toString()</span></span><br></pre></td></tr></table></figure></li><li><p>symbol 也能做属性名</p></li></ul><h4 id="二、对象属性的增删改查"><a href="#二、对象属性的增删改查" class="headerlink" title="二、对象属性的增删改查"></a>二、对象属性的增删改查</h4><h5 id="1、删除属性："><a href="#1、删除属性：" class="headerlink" title="1、删除属性："></a>1、删除属性：</h5><ul><li><p>语法<code>delete obj.xxx </code>或 <code>delete obj[&#39;xxx&#39;]</code></p></li><li><p><code>obj.xxx=undefined</code>是将 obj 的 xxx 属性的值改为 undefined，xxx 属性并没有删除，注意区分</p></li><li><p>是否含属性名<code>&#39;xxx&#39; in obj</code> true/false</p></li><li><p>含有属性名，且值为 undefined <code>&#39;xxx&#39; in obj &amp;&amp; obj.xxx === undefined</code></p></li><li><p><code>obj.xxx === undefined</code></p><p>不能断定 ‘xxx’ 是否为 obj 的属性</p></li></ul><h5 id="2、查看"><a href="#2、查看" class="headerlink" title="2、查看"></a>2、查看</h5><p>查看属性：</p><ul><li>查看自身所有属性：<code>Object.keys(obj)</code></li><li>查看自身属性+共有属性：<code>console.dir(obj)</code></li><li>判断一个属性是自身还是共有的 <code>obj.hasOwnProperty(&#39;toString&#39;)</code></li></ul><p>原型：</p><ul><li>每个对象都有原型，原型里存着对象的共有属性</li><li>obj 的原型就是一个对象，<code>obj.__proto__</code>存着这个对象的地址</li><li>对象的原型也是对象，所有的对象原型也有原型</li><li>obj={}的原型为所有对象的原型，包含所有对象的共有属性，是对象的根</li><li>这个原型也有原型，是 null</li></ul><p>查看属性值</p><ul><li><p>中括号：<code>obj[&#39;key&#39;]</code>（优先使用）</p></li><li><p>点语法：<code>obj.key</code></p></li><li><p>注意：<code>obj[key]</code>//变量 key 的值一般不为‘key’</p></li><li><pre><code class="js">obj.name等价于obj[&quot;name&quot;];obj.name不等价obj[name];//这里的name是字符串，而不是变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 例：</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;js</span><br><span class="line">  let list &#x3D; [&#39;name&#39;, &#39;age&#39;, &#39;gender&#39;]</span><br><span class="line">  let person &#x3D; &#123;</span><br><span class="line">         name:&#39;frank&#39;, age:18, gender:&#39;man&#39;&#125;</span><br><span class="line">  for(let i &#x3D; 0; i &lt; list.length; i++)&#123;</span><br><span class="line">    let name &#x3D; list[i]</span><br><span class="line">    console.log(person__???__)</span><br><span class="line">  &#125;</span><br><span class="line">  使得 person 的所有属性被打印出来</span><br><span class="line">  选项</span><br><span class="line">  1.console.log(person.name)</span><br><span class="line">  2.console.log(person[name])&#x2F;&#x2F;name作为变量</span><br></pre></td></tr></table></figure>##### 3、修改或增加属性</code></pre></li></ul><p>1、赋值：</p><ul><li><p>直接赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;frank&quot;</span> &#125;; <span class="comment">// name 是字符串</span></span><br><span class="line">obj.name = <span class="string">&quot;frank&quot;</span>; <span class="comment">// name 是字符串</span></span><br><span class="line">obj[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;frank&quot;</span>;</span><br><span class="line">obj[name] = <span class="string">&quot;frank&quot;</span>; <span class="comment">// 错，因 name 值不确定</span></span><br><span class="line"></span><br><span class="line">obj[<span class="string">&quot;na&quot;</span> + <span class="string">&quot;me&quot;</span>] = <span class="string">&quot;frank&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">obj[key] = <span class="string">&quot;frank&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">obj.key = <span class="string">&quot;frank&quot;</span>; <span class="comment">// 错，因为 obj.key 等价于 obj[&#x27;key&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>批量赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(obj, &#123; <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&quot;man&quot;</span> &#125;);</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>修改或增加共有属性</li></ol><ul><li><p>无法通过自身修改或增加共有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;, obj2 = &#123;&#125; <span class="comment">// 共有 toString</span></span><br><span class="line">obj.toString = <span class="string">&#x27;xxx&#x27;</span> 只会在改 obj 自身属性</span><br><span class="line">obj2.toString 还是在原型上</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改或增加原型属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.__proto__.toString = <span class="string">&quot;xxx&quot;</span>; <span class="comment">// 不推荐用 __proto__</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString = <span class="string">&quot;xxx&quot;</span>;</span><br></pre></td></tr></table></figure><p>一般来说，不要修改原型，会引起很多问题</p></li><li><p>修改隐藏属性</p><ul><li><p><code>__proto__</code> (不推荐使用)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;frank&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> common = &#123; <span class="attr">kind</span>: <span class="string">&quot;human&quot;</span> &#125;;</span><br><span class="line">obj.__proto__ = common;</span><br><span class="line">obj2.__proto__ = common;</span><br></pre></td></tr></table></figure></li><li><p>Object.create（推荐使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> common = &#123;<span class="attr">kind</span>: <span class="string">&#x27;human&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(common)</span><br><span class="line">obj.name = <span class="string">&#x27;frank&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.create(common)</span><br><span class="line">obj2.name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">规范大概的意思是，要改就一开始就改，别后来再改</span><br></pre></td></tr></table></figure><h4 id="三、对象的分类"><a href="#三、对象的分类" class="headerlink" title="三、对象的分类"></a>三、对象的分类</h4></li></ul></li></ul><h4 id="1、做一个小程序，输出正方形方形面积和周长"><a href="#1、做一个小程序，输出正方形方形面积和周长" class="headerlink" title="1、做一个小程序，输出正方形方形面积和周长"></a>1、做一个小程序，输出正方形方形面积和周长</h4><ul><li><p>一个正方形：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> square = &#123;</span><br><span class="line">  width: <span class="number">5</span>,</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>多个正方形：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = [];</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">11</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; widthList.length; i++) &#123;</span><br><span class="line">  squareList[i] = &#123;</span><br><span class="line">    width: widthList[i],</span><br><span class="line">    <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做浪费太多内存，画内存图就知道</p></li><li><p>借助原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = [];</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> squarePrototype = &#123;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">  squareList[i] = <span class="built_in">Object</span>.create(squarePrototype);</span><br><span class="line">  <span class="comment">//将squarePrototype作为__proto__创建新对象 作为squareList的第i项</span></span><br><span class="line">  squareList[i].width = widthList[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽离到函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = [];</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">width</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//构造函数</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(squarePrototype);</span><br><span class="line">  <span class="comment">// 以squarePrototype为原型创建对象obj</span></span><br><span class="line">  obj.width = width;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> squarePrototype = &#123;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">  squareList[i] = createSquare(widthList[i]);</span><br><span class="line">  <span class="comment">// 创建square</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数和原型结合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = [];</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">width</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(createSquare.squarePrototype);</span><br><span class="line">  <span class="comment">//以createSquare.squarePrototype为__proto__创建obj</span></span><br><span class="line">  obj.width = width; <span class="comment">//obj的width属性，值为函数参数width</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">createSquare.squarePrototype = &#123;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">createSquare</span>, //通过原型找到构造函数</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">  squareList[i] = createSquare(widthList[i]);</span><br><span class="line">  <span class="built_in">console</span>.log(squareList[i].constructor); <span class="comment">//知道是谁构造了这个函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、new-操作符"><a href="#2、new-操作符" class="headerlink" title="2、new 操作符"></a>2、new 操作符</h4></li><li><p>函数和原型结合(重写)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = [];</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">width</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line">Square.prototype.getArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">&#125;;</span><br><span class="line">Square.prototype.getLength = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">  squareList[i] = <span class="keyword">new</span> Square(widthList[i]);</span><br><span class="line">  <span class="built_in">console</span>.log(squareList[i].constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个函数都有 ProtoType 属性，和 constructor 属性</p></li><li><p>new</p><p>new x()做了哪些事情？</p><ul><li>自动创建空对象</li><li>自动为空对象关联原型，原型地址指定为 x.prototype</li><li>自动将空对象作为 this 关键字进行构造函数</li><li>自动 return this</li></ul><p>构造函数 X</p><ul><li>X 函数负责给对象本身添加属性</li><li>X.prototype 负责保存对象共有属性</li></ul><p>确定一个对象的原型</p><ul><li>对象的原型就是它构造者的 prototype 属性对应的对象</li><li>例：let obj=new Object()的原型是 Object.prototype</li><li>new 操作符为我们做了这些事情</li><li>公式：<code>对象.__proto__===其构造函数.prototype</code></li></ul></li></ul><h4 id="3、输出正方形面积周长"><a href="#3、输出正方形面积周长" class="headerlink" title="3、输出正方形面积周长"></a>3、输出正方形面积周长</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">width</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line">Square.prototype.getArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">&#125;;</span><br><span class="line">Square.prototype.getLength = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> Square(<span class="number">5</span>);</span><br><span class="line">square.width;</span><br><span class="line">square.getArea();</span><br><span class="line">square.getLength();</span><br></pre></td></tr></table></figure><p>如果要输出圆的面积和周长呢？</p><h4 id="4、回到最初的问题，对象需要分类吗？"><a href="#4、回到最初的问题，对象需要分类吗？" class="headerlink" title="4、回到最初的问题，对象需要分类吗？"></a>4、回到最初的问题，对象需要分类吗？</h4><p>需要。</p><p>理由：</p><ul><li>很多对象拥有一样的属性和行为，需要分为一类，如 square1 和 square2，这样可以很快创建类似对象</li><li>有很多对象拥有其他的属性和行为，就需要不同的分类，如正方形和圆就是不同的分类，Array 和 Function 也是不同的分类，Object 创建的对象是最没有特点的</li></ul><p>区分：</p><ul><li>类型：是数据的分类，7 种，四基两空一对象（number、string、布尔，symbol，null，undefined，object）</li><li>类：是针对对象的分类，有无数种（常见的 Array、Function、Date）</li></ul><p><strong>JS 终极一问</strong></p><ul><li>window 是谁构造的？ Window。可以通过 constructor 属性看出构造者</li><li>window.Object 是谁构造的？ window.Function,所有的函数都是由 window.Function 构造的</li><li>window.Function 是谁构造的？ window.Function,浏览器构造了 Function，后指定它的构造者是自己</li></ul><h4 id="5、ES6-新语法-class"><a href="#5、ES6-新语法-class" class="headerlink" title="5、ES6 新语法 class"></a>5、ES6 新语法 class</h4><ul><li><p>重写 Square</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">width</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">area2</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写圆 Circle</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">radius</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="built_in">this</span>.radius, <span class="number">2</span>) * <span class="built_in">Math</span>.PI;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.radius * <span class="number">2</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle(<span class="number">5</span>);</span><br><span class="line">circle.radius;</span><br><span class="line">circle.getArea();</span><br><span class="line">circle.getLength();</span><br></pre></td></tr></table></figure><h3 id="四、JS-数组"><a href="#四、JS-数组" class="headerlink" title="四、JS 数组"></a>四、JS 数组</h3></li></ul><h4 id="1、数组对象"><a href="#1、数组对象" class="headerlink" title="1、数组对象:"></a>1、数组对象:</h4><p>JS 没有真正的数组，只是用对象模拟数组</p><p>典型数组：</p><ul><li>元素的的数据类型相同</li><li>使用连续的内存存储</li><li>通过数字下标获取元素</li></ul><p>JS 数组：</p><ul><li>元素的数据类型可以不同</li><li>内存不一定是连续的（对象随机存储）</li><li>不能通过数字下标，而是字符串下标，key 有任何 key<ul><li>let arr= [1,2,3]</li><li>arr[‘xxx’]=1</li></ul></li></ul><h4 id="2、创建数组"><a href="#2、创建数组" class="headerlink" title="2、创建数组"></a>2、创建数组</h4><p>新建数组</p><ul><li><p>let arr=[1,2,3] 简写形式</p></li><li><p>let arr=new Array(1,2,3) 标准形式</p><p>let arr=new Array(3) 一个参数表示数组长度，多个参数表示数字内容</p></li></ul><p>转化：</p><ul><li>let arr=’1,2,3’.split(‘,’) 以逗号分开创建</li><li>let arr=’123’.split(‘’) 以空字符串分开创建</li><li>Array.from(‘123’) 很多时候需要有数字下标，和 length</li></ul><p>合并数组：</p><ul><li>arr1.concat(arr2)</li></ul><p>截取数组的一部分：</p><ul><li>arr1.slice(1) 从第 2 个元素开始</li><li>arr1.slice(0) 全部截取（复制数组）</li></ul><p>伪数组：</p><p>没有数组共同属性的数组</p><p>伪数组的原型链中并没有数组的原型，原型直接指向对象的原型</p><h4 id="3、删除数组元素"><a href="#3、删除数组元素" class="headerlink" title="3、删除数组元素"></a>3、删除数组元素</h4><ul><li><p>和对象一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">0</span>];</span><br><span class="line">(arr) =&gt; [empty, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>];</span><br></pre></td></tr></table></figure><p>数组长度不会改变（稀疏数组）</p></li><li><p>直接改 length 可以？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>];</span><br><span class="line">arr.length = <span class="number">1</span>;</span><br><span class="line">(arr) =&gt; [<span class="string">&quot;1&quot;</span>];</span><br></pre></td></tr></table></figure><p>改变 length 可以删除元素。<strong>注</strong>：不要随便改 length</p></li><li><p>删元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.shift(); <span class="comment">//arr被修改，并返回被删除元素</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.pop(); <span class="comment">//arr被修改，并返回被删除元素</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(start, <span class="number">1</span>); <span class="comment">//从start位置开始，删除1个元素</span></span><br><span class="line">arr.splice(start, <span class="number">1</span>, <span class="string">&quot;x&quot;</span>); <span class="comment">//在删除位置添加&#x27;x&#x27;</span></span><br><span class="line">arr.splice(start, <span class="number">1</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>); <span class="comment">//在删除位置添加&#x27;x&#x27;,&#x27;y&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="4、查看所有元素"><a href="#4、查看所有元素" class="headerlink" title="4、查看所有元素"></a>4、查看所有元素</h4></li></ul><h5 id="查看所有属性名："><a href="#查看所有属性名：" class="headerlink" title="查看所有属性名："></a>查看所有属性名：</h5><ul><li>let arr=[1,2,3,4,5];arr.x=x 为数组添加 x 下标,值为’x’</li><li>Object,keys(arr1) 查看属性名</li></ul><h5 id="查看数字（字符串）属性名和值"><a href="#查看数字（字符串）属性名和值" class="headerlink" title="查看数字（字符串）属性名和值"></a>查看数字（字符串）属性名和值</h5><ul><li><p>for 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;i&#125;</span>:<span class="subst">$&#123;arr[i]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>arr.forEach()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr3.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">iterm, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span>:<span class="subst">$&#123;iterm&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>原理:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">array, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    fn(array[i], i, array);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">forEach([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span> (<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>(x, y, z);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>forEach 用 for 访问 array 的每一项</p></li><li><p>对每一项调用 fn(array[i],i,array)</p></li><li><p>第三个参数为数组 array 本身</p></li></ul></li><li><p>for 循环与 forEach 的区别</p><ul><li>for 循环可以随时停止，forEach 不可以</li><li>for 块级作用域，forEach 是函数</li></ul></li></ul><h5 id="查看单个属性"><a href="#查看单个属性" class="headerlink" title="查看单个属性"></a>查看单个属性</h5><ul><li><p>跟对象一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li><li><p>索引越界</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr[arr.length] === <span class="literal">undefined</span>;</span><br><span class="line">arr[-<span class="number">1</span>] === uddefined;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i].toString());</span><br><span class="line">&#125; <span class="comment">//报错 Cannot read property &#x27;toString&#x27; of undefined</span></span><br></pre></td></tr></table></figure></li><li><p>查找某个元素是否在数组里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.indexof(item); <span class="comment">//存在返回索引，否则返回-1</span></span><br></pre></td></tr></table></figure></li><li><p>使用条件查找元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.find(<span class="function">(<span class="params">x</span>) =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>); <span class="comment">//找到第一个偶数</span></span><br></pre></td></tr></table></figure></li><li><p>条件查找元素索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.findIndex(<span class="function">(<span class="params">x</span>) =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>); <span class="comment">//找到第一个偶数索引</span></span><br></pre></td></tr></table></figure><p>5、增加数组中的元素</p></li><li><p>对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr[<span class="number">5</span>] = <span class="number">6</span>; <span class="comment">//可以修改成功，但不推荐，数组下标如果写大了，会出问题</span></span><br></pre></td></tr></table></figure></li><li><p>在尾部增加元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.push(item1,item2...)<span class="comment">//修改arr，返回新长度</span></span><br></pre></td></tr></table></figure></li><li><p>在头部增加元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.unshift(item1,item2...)<span class="comment">//修改arr，返回新长度</span></span><br></pre></td></tr></table></figure></li><li><p>在中间添加元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(start,<span class="number">0</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>...)</span><br></pre></td></tr></table></figure><p>6、修改数组中的元素</p></li><li><p>反转顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reverse(); <span class="comment">//修改原数组</span></span><br></pre></td></tr></table></figure><p>例：将字符串反转’12345’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;12345&quot;</span>.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>); <span class="comment">// 54321</span></span><br></pre></td></tr></table></figure></li><li><p>自定义顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">//函数返回值小于0，即a-b&lt;0,a排在b之前。</span></span><br></pre></td></tr></table></figure><p>按照某个属性排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> items = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Edward&quot;</span>, <span class="attr">value</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Sharpe&quot;</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;And&quot;</span>, <span class="attr">value</span>: <span class="number">45</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;The&quot;</span>, <span class="attr">value</span>: -<span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Zeros&quot;</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;,</span><br><span class="line">];</span><br><span class="line">items.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.value - b.value); <span class="comment">//以value值排序</span></span><br></pre></td></tr></table></figure><p>6、数组变换</p></li><li><p>map</p><p>创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(<span class="function">(<span class="params">x</span>) =&gt;</span> x * x); <span class="comment">//每个元素的平方</span></span><br></pre></td></tr></table></figure></li><li><p>filter</p><p>创建一个新数组, 其包含通过所提供函数实现的测试的所有元素 true 为通过，false 不通过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrary.filter(<span class="function">(<span class="params">x</span>) =&gt;</span> x % <span class="number">2</span> === <span class="number">1</span>); <span class="comment">//除以2余1就保留</span></span><br></pre></td></tr></table></figure></li><li><p>reduce（重点）</p><p>对数组中的每个元素执行一个由您提供的函数 Arrayarray，将其结果汇总为单个返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.reduce(<span class="function">(<span class="params">sum, x</span>) =&gt;</span> sum + x, <span class="number">0</span>); <span class="comment">//计算数组铬元素之和</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (y % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x.concat(y);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, []); <span class="comment">//把arr中所有偶数汇总为一个新的数组</span></span><br></pre></td></tr></table></figure><p>可以改写为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x.concat(y % <span class="number">2</span> === <span class="number">0</span> ? y : []);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure></li></ul><p><strong>例子：</strong>数据变换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; 名称: <span class="string">&quot;动物 &quot;</span>, <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">parent</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  &#123; 名称: <span class="string">&quot;狗&quot;</span>, <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">parent</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; 名称: <span class="string">&quot;猫&quot;</span>, <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">parent</span>: <span class="number">1</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>将数组变成对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">id: <span class="number">1</span>, : 名称<span class="string">&#x27;动物 &#x27;</span>, <span class="attr">children</span>: [</span><br><span class="line">&#123;<span class="attr">id</span>: <span class="number">2</span>, 名称: <span class="string">&#x27;狗 &#x27;</span>, <span class="attr">children</span>: <span class="literal">null</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>: <span class="number">3</span>, 名称: <span class="string">&#x27; 猫&#x27;</span>, <span class="attr">children</span>: <span class="literal">null</span>&#125;,</span><br><span class="line">] &#125;</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(</span><br><span class="line">  (result, item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.parent === <span class="literal">null</span>) &#123;</span><br><span class="line">      result.id = item.id;</span><br><span class="line">      result[<span class="string">&quot;名称&quot;</span>] = item[<span class="string">&quot;名称&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.children.push(item);</span><br><span class="line">      <span class="keyword">delete</span> item.parent;</span><br><span class="line">      item.children = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="literal">null</span>, <span class="attr">children</span>: [] &#125; <span class="comment">//初始化id、children</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="五、JS-函数"><a href="#五、JS-函数" class="headerlink" title="五、JS 函数"></a>五、JS 函数</h3><p>函数也是对象</p><h4 id="1、定义函数："><a href="#1、定义函数：" class="headerlink" title="1、定义函数："></a>1、定义函数：</h4><p>1、具名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形式参数<span class="number">1</span>，形式参数<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">语句</span><br><span class="line"><span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、匿名函数</p><ul><li>具名函数去掉函数名，就是匿名函数,也叫函数表达式</li><li><code>let a=function(x,y)&#123;return x+y&#125;</code></li></ul><p>3、箭头函数</p><ul><li><code>let f1=x=&gt;x*x</code></li><li><code>let f2=(x,y)=&gt;x+y</code> 圆括号不能省略</li><li><code>let f3=(x,y)=&gt;&#123;return x+y&#125;</code> 花括号不能省略</li><li><code>let f4=(x,y)=&gt;(&#123;name:x,age:y&#125;)</code> 直接返回会出错，需要加个圆括号</li></ul><p>4、用构造函数</p><ul><li>let f=new Function(‘x’,’y’,’return x+y’)</li><li>基本没人用，但是知道函数是由谁构造的</li><li>所有函数都是由 Function 构造出来的，包括 Object、Array、Function</li></ul><h4 id="2、函数自身和函数调用（fn-fn-）"><a href="#2、函数自身和函数调用（fn-fn-）" class="headerlink" title="2、函数自身和函数调用（fn / fn()）"></a>2、函数自身和函数调用（fn / fn()）</h4><p>1、函数自身</p><ul><li><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">fn;</span><br></pre></td></tr></table></figure></li><li><p>不会有任何结果，因为 fn 没有执行</p></li></ul><p>2、函数调用：</p><ul><li><p>```js<br>let fn = () =&gt; console.log(“hi”);<br>fn();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 结果：打印出&#39;hi&#39;，有圆括号才是调用</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;js</span><br><span class="line">  let fn &#x3D; () &#x3D;&gt; console.log(&quot;hi&quot;);</span><br><span class="line">  let fn2 &#x3D; fn;</span><br><span class="line">  fn2();</span><br></pre></td></tr></table></figure></li><li><p>结果：fn 保存了匿名函数的地址，将这个地址被复制给 fn2，fn2() 调用了匿名函数</p></li><li><p>fn 和 fn2 都是匿名函数的引用而已，真正的函数既不是 fn 也不是 fn2</p></li></ul><h4 id="3、函数的要素"><a href="#3、函数的要素" class="headerlink" title="3、函数的要素"></a>3、函数的要素</h4><h5 id="一、调用时机：就近原则"><a href="#一、调用时机：就近原则" class="headerlink" title="一、调用时机：就近原则"></a>一、调用时机：就近原则</h5><ul><li><p>```js<br>let a = 1;<br>function fn() {<br>  console.log(a);<br>}</p><p>fn();<br>a = 2; //打印出1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;js</span><br><span class="line">  let a &#x3D; 1;</span><br><span class="line">  function fn() &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      console.log(a);</span><br><span class="line">    &#125;, 0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn();</span><br><span class="line">  a &#x3D; 2; &#x2F;&#x2F;打印出2</span><br></pre></td></tr></table></figure></li><li><pre><code class="js">let i = 0;for (i = 0; i &lt; 6; i++) &#123;  setTimeout(() =&gt; &#123;    console.log(i);  &#125;, 0);&#125; //打印出 6个6  而不是0、1、2、3、4、5<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;js</span><br><span class="line">  for (let i &#x3D; 0; i &lt; 6; i++) &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      console.log(i);</span><br><span class="line">    &#125;, 0);</span><br><span class="line">  &#125; &#x2F;&#x2F; 打印出0、1、2、3、4、5   for循环配合let</span><br></pre></td></tr></table></figure>##### 二、作用域</code></pre></li><li><p>```js<br>function fn() {<br>  let a = 1;<br>}<br>console.log(a); //不存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  作用域在大括号之间</span><br><span class="line"></span><br><span class="line">- 全局变量和局部变量：在顶级作用域声明的变量是全局变量，window 的属性是全局变量，其他都是局部变量</span><br><span class="line"></span><br><span class="line">- 函数嵌套（作用域）</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;js</span><br><span class="line">  function f1() &#123;</span><br><span class="line">    let a &#x3D; 1;</span><br><span class="line">    function f2() &#123;</span><br><span class="line">      let a &#x3D; 2;</span><br><span class="line">      function f3() &#123;</span><br><span class="line">        console.log(a); &#x2F;&#x2F;打印出22</span><br><span class="line">      &#125;</span><br><span class="line">      a &#x3D; 22;</span><br><span class="line">      f3();</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(a); &#x2F;&#x2F; 打印出1</span><br><span class="line">    a &#x3D; 100;</span><br><span class="line">    f2();</span><br><span class="line">  &#125;</span><br><span class="line">  f1();</span><br></pre></td></tr></table></figure></li><li><p>作用域规则：</p><p>如果多个作用域有同名变量，那么查找 a 的声明时，就向上取最近的作用域，查找 a 的过程与函数执行无关，但 a 的值与函数执行有关</p></li></ul><h5 id="三、闭包"><a href="#三、闭包" class="headerlink" title="三、闭包"></a>三、闭包</h5><p>如果如果一个函数用到了外部的变量，那么这个函数加这个变量</p><p>就叫做闭包，上面的 a 和 f3 组成了闭包</p><h5 id="四、形式参数"><a href="#四、形式参数" class="headerlink" title="四、形式参数"></a>四、形式参数</h5><ul><li><p>形式参数并不是实际的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其中 x 和 y 就是形参，因为并不是实际的参数</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 调用 add 时，1 和 2 是实际参数，会被赋值给 x y</span></span><br></pre></td></tr></table></figure></li><li><p>形参可认为是变量声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等同于上面代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>形参可多可少，只是给参数取名字</p></li></ul><h5 id="五、返回值"><a href="#五、返回值" class="headerlink" title="五、返回值"></a>五、返回值</h5><ul><li><p>每个函数都有返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">hi();</span><br></pre></td></tr></table></figure><p>没写 return，所以返回值是 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">hi();</span><br></pre></td></tr></table></figure><p>返回值为 console.log(‘hi’) 的值，即 undefined</p></li><li><p>函数执行完了才会返回，只有函数才有函数返回值</p></li></ul><h5 id="六、调用栈"><a href="#六、调用栈" class="headerlink" title="六、调用栈"></a>六、调用栈</h5><p>1、什么是调用栈？</p><p>JS 引擎在调用一个函数前，需要把函数所在的环境 push 到一个数组里，这个数组叫做调用栈，等函数执行完了，就会把环境弹(pop)出来，然后 return 到之前的环境，继续执行后续代码</p><p>2、递归函数</p><ul><li><p>阶乘：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n !== <span class="number">1</span> ? n * f(n - <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f(4)</span><br><span class="line">&#x3D; 4 * f(3)</span><br><span class="line">&#x3D; 4 * (3 * f(2))</span><br><span class="line">&#x3D; 4 * (3 * (2 * f(1)))</span><br><span class="line">&#x3D; 4 * (3 * (2 * (1)))</span><br><span class="line">&#x3D; 4 * (3 * (2))</span><br><span class="line">&#x3D; 4 * (6)</span><br><span class="line">24</span><br><span class="line">先递进，再回归</span><br></pre></td></tr></table></figure></li><li><p>递归函数的调用栈很长</p></li><li><p>调用栈上限:浏览器上限，调用栈中压入帧过多，程序会崩溃（爆栈）</p></li></ul><h5 id="七、函数提升"><a href="#七、函数提升" class="headerlink" title="七、函数提升"></a>七、函数提升</h5><ol><li>什么是函数提升？ <code>üfunction fn()&#123;&#125;</code> 不管你把具名函数声明在哪里，它都会跑到第一行</li><li><code>let fn = function()&#123;&#125;</code> 这是赋值，右边的匿名函数声明不会提升</li></ol><h5 id="八、arguments-和-this（除了箭头函数）"><a href="#八、arguments-和-this（除了箭头函数）" class="headerlink" title="八、arguments 和 this（除了箭头函数）"></a>八、arguments 和 this（除了箭头函数）</h5><ul><li><p>每个函数都有，除了箭头函数</p></li><li><p>```js<br>function fn() {<br>  console.log(arguments);<br>  console.log(this);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如何传 arguments? 调用 fn 即可传 arguments，&#96;fn(1,2,3)&#96; 那么 arguments 就是 [1,2,3] 伪数组</span><br><span class="line"></span><br><span class="line">- 如何传 this? 目前可以用 fn.call(xxx, 1,2,3) 传 this 和 arguments,而且 xxx 会被自动转化成对象</span><br><span class="line"></span><br><span class="line">- this 的两种使用方法</span><br><span class="line"></span><br><span class="line">  - 隐式传递</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;js</span><br><span class="line">    fn(1, 2); &#x2F;&#x2F; 等价于 fn.call(undefined, 1, 2)</span><br><span class="line">    obj.child.fn(1); &#x2F;&#x2F; 等价于 obj.child.fn.call(obj.child, 1)</span><br></pre></td></tr></table></figure><ul><li><p>显示传递（推荐使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn.call(<span class="literal">undefined</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">fn.apply(<span class="literal">undefined</span>, [<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>绑定 this：使用 .bind 可以让 this 不被改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">p1, p2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>, p1, p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f2 = f1.bind(&#123; <span class="attr">name</span>: <span class="string">&quot;frank&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// 那么 f2 就是 f1 绑定了 this 之后的新函数</span></span><br><span class="line">f2(); <span class="comment">// 等价于 f1.call(&#123;name:&#x27;frank&#x27;&#125;)</span></span><br></pre></td></tr></table></figure><h5 id="九、箭头函数（没有-arguments-和-this）"><a href="#九、箭头函数（没有-arguments-和-this）" class="headerlink" title="九、箭头函数（没有 arguments 和 this）"></a>九、箭头函数（没有 arguments 和 this）</h5></li><li><p>里面的 this 就是外面的 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">fn(); <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p>•就算你加 call 都没有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn.call(&#123; <span class="attr">name</span>: <span class="string">&quot;frank&quot;</span> &#125;); <span class="comment">// window</span></span><br></pre></td></tr></table></figure><h5 id="十、立即执行函数"><a href="#十、立即执行函数" class="headerlink" title="十、立即执行函数"></a>十、立即执行函数</h5></li></ul><p>只要在匿名函数前面加个运算符即可让函数立即执行，!、~、()、+、- 都可以，但有些运算符会往上做运算，推荐！</p><h1 id><a href="#" class="headerlink" title></a></h1><h1 id="三、框架阶段（MVC、webpack、Vue、React、小程序、Flutter）"><a href="#三、框架阶段（MVC、webpack、Vue、React、小程序、Flutter）" class="headerlink" title="三、框架阶段（MVC、webpack、Vue、React、小程序、Flutter）"></a>三、框架阶段（MVC、webpack、Vue、React、小程序、Flutter）</h1><h1 id="四、工作阶段（简历、面试、笔试、工资谈判、离职入职）"><a href="#四、工作阶段（简历、面试、笔试、工资谈判、离职入职）" class="headerlink" title="四、工作阶段（简历、面试、笔试、工资谈判、离职入职）"></a>四、工作阶段（简历、面试、笔试、工资谈判、离职入职）</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;入门阶段：（git、HTTP、HTML5、css3）&quot;&gt;&lt;a href=&quot;#入门阶段：（git、HTTP、HTML5、css3）&quot; class=&quot;headerlink&quot; title=&quot;入门阶段：（git、HTTP、HTML5、css3）&quot;&gt;&lt;/a&gt;入门阶段：（gi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>十二、虚拟DOM和DOM diff</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/12%E3%80%81%E8%99%9A%E6%8B%9FDOM%E5%92%8CDOM%20diff/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/12%E3%80%81%E8%99%9A%E6%8B%9FDOM%E5%92%8CDOM%20diff/</id>
    <published>2021-02-19T03:35:19.323Z</published>
    <updated>2021-02-19T03:35:19.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、虚拟-DOM"><a href="#一、虚拟-DOM" class="headerlink" title="一、虚拟 DOM"></a>一、虚拟 DOM</h2><p>1、虚拟 DOM 操作慢？</p><p>DOM 操作慢是对比 JS 原生 API，如数组操作</p><p>任何基于 DOM 的库(Vue/React)都不可能在操作 DOM 时比 DOM 快</p><p>2、虚拟 DOM 的优点</p><ol><li><p><strong>减少 DOM 操作</strong></p><ol><li>虚拟 DOM 可以将多次操作合并为一次操作。比如添加 1000 个节点，DOM 是一个一个操作，减少 DOM 操作次数</li><li>虚拟 DOM 借助 DOM diff 可以把省掉多余的操作。比如添加 1000 个节点，但只有 10 个是新增的。减少操作范围</li></ol></li><li><p>跨平台</p><p>虚拟 DOM 是一个对象，不仅可以变成 DOM 还可以变成小程序，ios 应用，本质上是一个 JS 对象</p></li></ol><p>3、虚拟 DOM 对象</p><ol><li><p>React</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vNode=&#123;</span><br><span class="line">key:<span class="literal">null</span>,</span><br><span class="line">props:&#123;</span><br><span class="line">children:[</span><br><span class="line">&#123;<span class="attr">type</span>:<span class="string">&#x27;span&#x27;</span>,...&#125;</span><br><span class="line">&#123;<span class="attr">type</span>:<span class="string">&#x27;span&#x27;</span>,...&#125;</span><br><span class="line">],</span><br><span class="line">className:<span class="string">&#x27;red&#x27;</span> <span class="comment">//标签属性</span></span><br><span class="line">onClick:()=&#123;&#125;<span class="comment">// 事件</span></span><br><span class="line">&#125;，</span><br><span class="line">ref:<span class="literal">null</span>,</span><br><span class="line">type:<span class="string">&#x27;div&#x27;</span> <span class="comment">//标签名 或组件名</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vNode = &#123;</span><br><span class="line">  tag: <span class="string">&quot;div&quot;</span>, <span class="comment">// 标签名 or 组件名</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    class: &quot;red&quot;, // 标签上的属性</span><br><span class="line">    on: &#123;</span><br><span class="line">      click: <span class="function">() =&gt;</span> &#123;&#125; <span class="comment">// 事件</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  children: [ <span class="comment">// 子元素们</span></span><br><span class="line">    &#123; <span class="attr">tag</span>: <span class="string">&quot;span&quot;</span>, ... &#125;,</span><br><span class="line">    &#123; <span class="attr">tag</span>: <span class="string">&quot;span&quot;</span>, ... &#125;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、创建虚拟 DOM</p></li><li><p>React.createElement</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">createElement(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">className</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">onClick</span>: <span class="function">() =&gt;</span> &#123;&#125; &#125;, [</span><br><span class="line">  createElement(<span class="string">&quot;span&quot;</span>, &#123;&#125;, <span class="string">&quot;span1&quot;</span>),</span><br><span class="line">  createElement(<span class="string">&quot;span&quot;</span>, &#123;&#125;, <span class="string">&quot;span2&quot;</span>),</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></li><li><p>Vue（只能在 render 函数里得到 h）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">  class: &#x27;red&#x27;,</span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="function">() =&gt;</span> &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, [h(<span class="string">&#x27;span&#x27;</span>,&#123;&#125;,<span class="string">&#x27;span1&#x27;</span>), h(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;span2&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5、用 JSX 简化虚拟 DOM</p></li><li><p>React JSX</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;red&quot;</span> onClick=<span class="string">&quot;&#123;()=&gt; &#123;&#125;&#125;&quot;</span>&gt;</span><br><span class="line">  &lt;span&gt;span1&lt;/span&gt;</span><br><span class="line">  &lt;span&gt;span2&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>通过 babel 转为 createElement 形式</p></li><li><p>Vue Template</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;red&quot; @click&#x3D;&quot;fn&quot;&gt;</span><br><span class="line">  &lt;span&gt;span1&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;span&gt;span2&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>通过 babel 转为 createElement 形式</p></li></ol><p>6、总结：</p><ol><li><p>虚拟 DOM 是什么？</p><p>一个能代表 DO M 树的对象，通常含有标签名、标签上的属性，事件监听和子元素们，以及其他属性</p></li><li><p>优点：</p><p><strong>减少 DOM 操作</strong>（两个例子）</p><p>跨平台渲染</p></li><li><p>虚拟 DOM 的缺点</p><p>需要额外的创建函数，如 createElement 或 h，可以通过 JSX 来简化成 XML 写法，但是严重依赖打包工具</p></li></ol><h2 id="二、DOM-diff"><a href="#二、DOM-diff" class="headerlink" title="二、DOM diff"></a>二、DOM diff</h2><h5 id="虚拟-DOM-的对比算法"><a href="#虚拟-DOM-的对比算法" class="headerlink" title="虚拟 DOM 的对比算法"></a>虚拟 DOM 的对比算法</h5><ol><li><p>把虚拟 DOM 想象成树形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class&#x3D;&quot;x&quot;&gt;</span><br><span class="line">    &lt;span v-if&#x3D;&quot;y&quot;&gt;&#123;string1&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span&gt;&#123;string2&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/21/95CRVzUAy4cp6jo.png" alt="image-20210121140707673"></p></li><li><p>数据变化</p><p>x 从 red 变成 green</p><p><img src="https://i.loli.net/2021/01/21/Nw2ZFAuiqnfHCo5.png" alt="image-20210121140848856"></p><p><img src="https://i.loli.net/2021/01/21/EKlcjSMkwNR149b.png" alt="image-20210121141002516"></p></li></ol><p>DOM diff 发现:</p><ul><li><p>div 标签类型没变，只需要更新 div 对应的 DOM 的属性</p></li><li><p>子元素没变，不更新</p></li></ul><p>y 从 true 变成 false</p><p><img src="https://i.loli.net/2021/01/21/Nw2ZFAuiqnfHCo5.png" alt="image-20210121141221314"></p><p><img src="https://i.loli.net/2021/01/21/z1bAvwHmuLoifDe.png" alt="image-20210121141237161"></p><p>DOM diff 发现</p><ul><li><p>div 没变，不用更新</p></li><li><p>子元素 1 标签没变，但是 children 变了，更新 DOM 内容</p></li><li><p>子元素 2 不见了，删除对应的 DOM</p></li></ul><p>总结：什么是 DOM diff</p><p>​ DOM diff 就是一个函数，称之为 patch</p><p>​ <code>patches=patch(oldVNode,newVNode)</code></p><p>​ patches 就是要运行的 DOM 操作，可能长这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;<span class="attr">type</span>: <span class="string">&#x27;INSERT&#x27;</span>, <span class="attr">vNode</span>: ... &#125;,</span><br><span class="line">  &#123;<span class="attr">type</span>: <span class="string">&#x27;TEXT&#x27;</span>,  <span class="attr">vNode</span>: ... &#125;,</span><br><span class="line">  &#123;<span class="attr">type</span>: <span class="string">&#x27;PROPS&#x27;</span>, <span class="attr">propsPatch</span>: [...]&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="DOM-diff-的大概逻辑"><a href="#DOM-diff-的大概逻辑" class="headerlink" title="DOM diff 的大概逻辑"></a>DOM diff 的大概逻辑</h5><p>Tree diff</p><ul><li>将新旧两棵树逐层对比，找出哪些节点需要更新</li><li>如果节点是组件就看 Component diff</li><li>如果节点是标签就看 Element diff</li></ul><p>Component diff</p><ul><li>如果节点是组件，就先看组件类型</li><li>类型不同直接替换（删除旧的）</li><li>类型相同则只更新属性</li><li>然后深入组件做 Tree diff（递归）</li></ul><p>Element diff</p><ul><li>如果节点是原生标签，则看标签名</li><li>标签名不同直接替换，相同则只更新属性</li><li>然后进入标签后代做 Tree diff（递归）</li></ul><p>DOM diff 同级 bug</p><p>示例：</p><ul><li><a href="https://codesandbox.io/s/vue-template-z5xud?fontsize=14&file=/src/App.vue">不加 key</a></li><li><a href="https://codesandbox.io/s/vue-template-xmt14?fontsize=14">加 key</a></li></ul><p>文章：</p><ul><li><a href="https://juejin.cn/post/6844903529161850893">React 虚拟 Dom 和 diff 算法</a></li><li><a href="https://zhuanlan.zhihu.com/p/20346379">React 源码剖析系列 － 不可思议的 react diff</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、虚拟-DOM&quot;&gt;&lt;a href=&quot;#一、虚拟-DOM&quot; class=&quot;headerlink&quot; title=&quot;一、虚拟 DOM&quot;&gt;&lt;/a&gt;一、虚拟 DOM&lt;/h2&gt;&lt;p&gt;1、虚拟 DOM 操作慢？&lt;/p&gt;
&lt;p&gt;DOM 操作慢是对比 JS 原生 API，如数组操</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/11%E3%80%81React%E5%85%A8%E8%A7%A3/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/11%E3%80%81React%E5%85%A8%E8%A7%A3/</id>
    <published>2021-02-19T03:35:19.293Z</published>
    <updated>2021-02-19T03:35:19.293Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/10%E3%80%81Vue%E5%85%A8%E8%A7%A3/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/10%E3%80%81Vue%E5%85%A8%E8%A7%A3/</id>
    <published>2021-02-19T03:35:19.291Z</published>
    <updated>2021-02-19T03:35:19.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h2><h4 id="1、使用-vue-cli创建项目-vue-cli"><a href="#1、使用-vue-cli创建项目-vue-cli" class="headerlink" title="1、使用@vue/cli创建项目 vue cli"></a>1、使用<code>@vue/cli</code>创建项目 <a href="https://cli.vuejs.org/zh/guide/">vue cli</a></h4><ol><li><p>全局安装：<code>yarn global add @vue/cli</code></p></li><li><p>创建项目：<code>vue create +路径</code>可以是”.” <code>vue create vue-demo-1</code></p></li><li><p><code>cd vue-demo-1</code> <code>yarn serve</code></p></li></ol><h4 id="2、vue-完整版和-runtime-版本"><a href="#2、vue-完整版和-runtime-版本" class="headerlink" title="2、vue 完整版和 runtime 版本"></a>2、vue 完整版和 runtime 版本</h4><p>掘金：<a href="https://juejin.cn/post/6895268714703224840">浅析 vue 的两个版本</a></p><p>完整版 vue： <code>*.vue.js</code></p><ol><li>直接从 html 得到视图</li><li>从 cdn 引入，或者 import</li></ol><p>写法：</p><ol><li>写在选项里</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt; &lt;/div&gt;;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  template: <span class="string">` &lt;div&gt; &#123;&#123;n&#125;&#125; &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span>,</span><br><span class="line">  data: &#123; <span class="attr">n</span>: <span class="number">0</span> &#125;, <span class="comment">// data可以是函数</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.n += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"><span class="comment">//注意：div#app会被代替</span></span><br></pre></td></tr></table></figure><ol start="2"><li>写在 html 里</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;xxx&#x27;</span>&gt;</span><br><span class="line">&#123;&#123;n&#125;&#125;</span><br><span class="line">&lt;button @click=<span class="string">&quot;add&quot;</span>&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#xxx&#x27;</span>,</span><br><span class="line">    data:&#123;<span class="attr">n</span>:<span class="number">0</span>&#125;, <span class="comment">// data可以是函数</span></span><br><span class="line">methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>runtime 版本： <code>.runtime.js</code></p><ol><li>使用 js 构建视图，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;非完整版vue 没人会这样写 new Vue(&#123; el: &quot;#app&quot;, render(h) &#123; return h(&quot;div&quot;,</span><br><span class="line">[this.n, h(&quot;button&quot;, &#123; on: &#123; click: this.add &#125; &#125;, &quot;+1&quot;)]); &#125;, data: &#123; n: 0, &#125;,</span><br><span class="line">methods: &#123; add() &#123; this.n +&#x3D; 1; &#125;, &#125;, &#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用 vue-loader 构建视图</p><h5 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; n &#125;&#125;&lt;button @click&#x3D;&quot;add&quot;&gt;+1&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123; n: 0 &#125;; &#x2F;&#x2F;data只能是函数</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      this.n +&#x3D; 1;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>html 没有内容，导致 seo 不友好</p><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/17/upeGPxyqfrbDz9a.png" alt="image-20210117174013472"></p><h4 id="3、Vue-实例"><a href="#3、Vue-实例" class="headerlink" title="3、Vue 实例"></a>3、Vue 实例</h4><p><img src="https://i.loli.net/2021/01/17/lPRwjC4uA5dZaz3.png" alt="image-20210117192910221"></p><h5 id><a href="#" class="headerlink" title></a></h5><p>把 Vue 实例命名为 vm，vm 对象封装了对<strong>视图的所有操作</strong>，包括数据读写、事件绑定、DOM 更新</p><p>vm 的构造函数是 Vue，vm 所属的类是 Vue(es6)</p><p>options 是 new Vue 的参数，称为<strong>构造选项</strong></p><h2 id="二、options-里面有什么？"><a href="#二、options-里面有什么？" class="headerlink" title="二、options 里面有什么？"></a>二、options 里面有什么？</h2><p><img src="https://i.loli.net/2021/01/17/36S2MdA9UJPxrNm.png" alt="image-20210117201015008"></p><h4 id="1、el：挂载点"><a href="#1、el：挂载点" class="headerlink" title="1、el：挂载点"></a>1、el：挂载点</h4><p>可以用$mount 代替</p><p>挂载标签内内容会被替换</p><h4 id="2、data-内部数据"><a href="#2、data-内部数据" class="headerlink" title="2、data:内部数据"></a>2、data:内部数据</h4><p><strong>支持对象和函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;<span class="attr">n</span>:<span class="number">0</span>&#125;    <span class="comment">//可以是对象</span></span><br><span class="line">data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> &#123;<span class="attr">n</span>:<span class="number">0</span>&#125;&#125;<span class="comment">//可以是函数,返回对象</span></span><br><span class="line">data:()&#123;<span class="keyword">return</span> &#123;<span class="attr">n</span>:<span class="number">0</span>&#125;&#125;<span class="comment">//函数简写</span></span><br></pre></td></tr></table></figure><p>对于组件的定义，只接受<code>function</code>，每次调用是不同的对象，防止数据污染。<strong>优先使用函数</strong></p><h4 id="3、methods：方法"><a href="#3、methods：方法" class="headerlink" title="3、methods：方法"></a>3、methods：方法</h4><p><strong>事件处理函数或普通函数</strong></p><p>每次渲染都会执行，可以通过传参或者 this 拿到 data 的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    n: <span class="number">0</span>,</span><br><span class="line">    array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">  &#123;&#123;n&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;button @click=&#x27;add&#x27;&gt;+1&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;hr&gt;</span></span><br><span class="line"><span class="string">  &#123;&#123;filter()&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.n += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">filter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.array.filter(<span class="function">(<span class="params">i</span>) =&gt;</span> i % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="4、组件-components"><a href="#4、组件-components" class="headerlink" title="4、组件 components"></a>4、组件 components</h4><p>创建方式：</p><ol><li><p>使用文件，import 引入</p></li><li><pre><code>Vue.component(&#39;Demo2&#39;,&#123;    template:`&lt;div&gt;demo2&lt;/div&gt;`&#125;)    // demo2 为组件名字，其他参数和new Vue 相同<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. &#96;&#96;&#96;js</span><br><span class="line">   new Vue(&#123;</span><br><span class="line">   compontents:&#123;</span><br><span class="line">   Demo:&#123;</span><br><span class="line">   data()&#123;&#125;,</span><br><span class="line">   methods:&#123;&#125;,</span><br><span class="line">   template:&#96;&#96;,</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   data()&#123;&#125;</span><br><span class="line">   methods:&#123;&#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>`compontents:&#123;Demo&#125;` 为简写形式 `compontents:&#123;Demo:Demo&#125;`,组件名大写</code></pre></li></ol><h4 id="5、生命周期钩子"><a href="#5、生命周期钩子" class="headerlink" title="5、生命周期钩子"></a>5、生命周期钩子</h4><ol><li><p><code>created()&#123;debugger;console.log(&#39;未出现在页面中&#39;)&#125;</code>：出现在内存中，但未出现在页面中 ,测试方法：在 log 之前设置断点，下同</p></li><li><p><code>mounted()&#123;&#125;</code>:出现在页面中</p></li><li><p><code>updated()&#123;&#125;</code>：页面更新了</p></li><li><p><code>destroyed()&#123;&#125;</code>:已经消亡了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Demo <span class="keyword">from</span> <span class="string">&quot;./components/demo.vue&quot;</span>;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123; Demo &#125;,</span><br><span class="line">  data: &#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;Demo v-if=&quot;visible&quot;/&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;toggle&quot;&gt;toggle&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;`</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">toggle</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.visible = !<span class="built_in">this</span>.visible;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="6、props"><a href="#6、props" class="headerlink" title="6、props"></a>6、props</h4></li></ol><p>//demo.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;red&quot;</span>&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;fn&quot;</span>&gt;+<span class="number">1</span>&lt;<span class="regexp">/button&gt; /</span><span class="regexp">/调用props函数</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;<span class="attr">props</span>: [<span class="string">&#x27;message&#x27;</span>, <span class="string">&#x27;fn&#x27;</span>]&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>//app.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123; Demo &#125;,</span><br><span class="line">  data: &#123; <span class="attr">visible</span>: <span class="literal">true</span>, <span class="attr">n</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt; &#123;&#123; n &#125;&#125;    </span></span><br><span class="line"><span class="string">      &lt;Demo message=&quot;你好 props&quot; :fn=&quot;add&quot;/&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.n += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>props 可以传字符串，可以传变量，可以传函数，传变量或者函数需要前面加冒号，如果不加冒号，就是字符串</strong></p><h2 id="三、Vue-数据响应式原理"><a href="#三、Vue-数据响应式原理" class="headerlink" title="三、Vue 数据响应式原理"></a>三、Vue 数据响应式原理</h2><h4 id="1、get-set"><a href="#1、get-set" class="headerlink" title="1、get/set"></a>1、get/set</h4><p>MDN:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/get">get</a>/<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/set">set</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">姓:<span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">名:<span class="string">&#x27;y&#x27;</span>,</span><br><span class="line">set 姓名(xxx)&#123;</span><br><span class="line"><span class="built_in">this</span>.姓=xxx[<span class="number">0</span>],</span><br><span class="line">        <span class="built_in">this</span>.名=xxx.substring(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">    get 姓名()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.姓+<span class="built_in">this</span>.名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.姓名=<span class="string">&#x27;刘德华&#x27;</span> <span class="comment">//调用set</span></span><br><span class="line">obj.姓名<span class="comment">//调用get</span></span><br></pre></td></tr></table></figure><p><code>Object.defineProperty</code> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">mdn</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj1, <span class="string">&quot;xxx&quot;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _x;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">x</span>)</span> &#123;</span><br><span class="line">    _x = x;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">obj1.xxx; <span class="comment">//1</span></span><br><span class="line">obj1.xxx = <span class="number">100</span>;</span><br><span class="line">obj1.xxx; <span class="comment">//100</span></span><br></pre></td></tr></table></figure><h4 id="2、代理（设计模式）"><a href="#2、代理（设计模式）" class="headerlink" title="2、代理（设计模式）"></a>2、代理（设计模式）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myData = &#123; <span class="attr">n</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123; <span class="attr">data</span>: myData &#125;);</span><br></pre></td></tr></table></figure><p>对 data 对象的读写，全权交由另一个对象 vm 负责，vm 就是 data 的代理（房东租房）</p><p>不使用<code>data.n</code>,而是使用<code>vm.n</code>来操作<code>myData.n</code></p><p><strong><code>vm</code>会成为<code>myData</code>的代理(proxy),会对<code>myData</code>的所有属性监控</strong>`</p><p><strong>如何理解代理</strong>：<a href="https://codesandbox.io/s/bold-heyrovsky-8jcm2?file=/src/main.js">代理示例</a></p><p><img src="https://i.loli.net/2021/01/18/4qbvaZXg8wxC5HN.png" alt="image-20210118212052694"></p><p><strong>注意</strong>：<code>Vue.set/this.$set</code> ‘<strong>对象新增 key</strong>‘</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      a: <span class="number">0</span>, <span class="comment">// obj.a 会被 Vue 监听 &amp; 代理</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123;obj.b&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;setB&quot;&gt;set b&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;setB1&quot;&gt;set b1&lt;/button&gt;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">setB</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.obj.b = <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//点击按钮 页面并不会显示1，Vue没有代理</span></span><br><span class="line">      <span class="built_in">this</span>.$set(<span class="built_in">this</span>.obj, <span class="string">&quot;b&quot;</span>, <span class="number">1</span>); <span class="comment">//或者Vue.set()</span></span><br><span class="line">      <span class="comment">//此时会新增一个key,并创建代理和监听，触发Ui</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">setB1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.obj.b += <span class="number">1</span>; <span class="comment">//加1</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果是初始化的时候没有声明的 key，要使用 <code>Vue.set()或this.$set</code>声明并监听</p><p><strong>数组中新增 key</strong></p><p><a href="https://cn.vuejs.org/v2/guide/list.html#%E5%8F%98%E6%9B%B4%E6%96%B9%E6%B3%95">变异方法</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123;array&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;button @click=&quot;setD&quot;&gt;set d&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">setD</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.array[<span class="number">3</span>] = <span class="string">&quot;d&quot;</span>; <span class="comment">//页面不会出现d</span></span><br><span class="line">      <span class="comment">// 等下，你为什么不用 this.array.push(&#x27;d&#x27;)</span></span><br><span class="line">      <span class="built_in">this</span>.array.push(<span class="string">&quot;d&quot;</span>); <span class="comment">//页面会更新</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/guide/list.html#%E5%8F%98%E6%9B%B4%E6%96%B9%E6%B3%95">变异方法</a></p><h2 id="四、computed-和-watch"><a href="#四、computed-和-watch" class="headerlink" title="四、computed 和 watch"></a>四、computed 和 watch</h2><p>​ 官方文档： <a href="https://cn.vuejs.org/v2/guide/computed.html">Vuejs</a></p><h5 id="1、computed："><a href="#1、computed：" class="headerlink" title="1、computed："></a>1、computed：</h5><p>被用户计算出来的属性就是计算属性</p><p><a href="https://codesandbox.io/s/inspiring-sound-pj09n?fontsize=14&hidenavigation=1&theme=dark">示例 1：</a></p><p>筛选性别示例：<a href="https://codesandbox.io/s/happy-galois-7u1ed?fontsize=14&hidenavigation=1&theme=dark">不用 computed</a> <a href="https://codesandbox.io/s/ancient-platform-x3d86?fontsize=14&hidenavigation=1&theme=dark">使用 computed</a></p><h6 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h6><p>如果依赖的属性没有变化，就不会重新计算,筛选性别示例，多次点击同一个按钮，不会多次计算</p><h5 id="2、watch："><a href="#2、watch：" class="headerlink" title="2、watch："></a>2、watch：</h5><p>当数据变化时，执行一个函数</p><p>示例 1：<a href="https://codesandbox.io/s/youthful-nash-gwyzg?fontsize=14&hidenavigation=1&theme=dark">撤销</a></p><p>示例 2：<a href="https://codesandbox.io/s/objective-star-vu2h3">模拟 computed</a> 比较傻</p><p>用法：<a href="https://cn.vuejs.org/v2/api/#watch">vue</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法名</span></span><br><span class="line">b: <span class="string">&#x27;someMethod&#x27;</span>,</span><br><span class="line"><span class="comment">// 该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深</span></span><br><span class="line">c: &#123;</span><br><span class="line">  handler: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  deep: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 该回调将会在侦听开始之后被立即调用</span></span><br><span class="line">d: &#123;</span><br><span class="line">  handler: <span class="string">&#x27;someMethod&#x27;</span>,</span><br><span class="line">  immediate: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 你可以传入回调数组，它们会被逐一调用</span></span><br><span class="line">e: [</span><br><span class="line">  <span class="string">&#x27;handle1&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle2</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    handler: <span class="function"><span class="keyword">function</span> <span class="title">handle3</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">vm.$watch(<span class="string">&#x27;a&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>简单类型看值，复杂类型看地址（对象地址）</strong></p><p><strong>注意</strong>：不要使用箭头函数来定义 watch 函数：<code>searchQuery: newValue =&gt; this.updateAutocomplete(newValue)</code>)。理由是箭头函数绑定了父级作用域的上下文，所以 <code>this</code> 将不会按照期望指向 Vue 实例，<code>this.updateAutocomplete</code> 将是 undefined。</p><h5 id="3、computed-和-watch-的区别："><a href="#3、computed-和-watch-的区别：" class="headerlink" title="3、computed 和 watch 的区别："></a>3、computed 和 watch 的区别：</h5><ol><li>computed 是计算属性，computed 可以计算一个值，调用的时候不需要加括号，当做属性一样使用，根据依赖会自动缓存，如果依赖不变，就不会重新计算</li><li>watch 是监听，有两个选项，<code>immediate</code>表示是否在第一次渲染的时候执行，<code>deep</code>表示要监听对象内部属性的变化</li></ol><p><strong>计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</strong></p><p>掘金：<a href="https://juejin.cn/post/6919426548357398536">简述 computed 和 watch 的区别</a></p><h2 id="五、Vue-模板"><a href="#五、Vue-模板" class="headerlink" title="五、Vue 模板"></a>五、Vue 模板</h2><h5 id="1、三种写模板的方式"><a href="#1、三种写模板的方式" class="headerlink" title="1、三种写模板的方式"></a>1、三种写模板的方式</h5><ul><li><p>写在 html 里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完整版vue</span></span><br><span class="line">&lt;div id=<span class="string">&#x27;xxx&#x27;</span>&gt;</span><br><span class="line">&#123;&#123;n&#125;&#125;</span><br><span class="line">&lt;button @click=<span class="string">&quot;add&quot;</span>&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#xxx&#x27;</span>,</span><br><span class="line">    data:&#123;<span class="attr">n</span>:<span class="number">0</span>&#125;, <span class="comment">// data可以是函数</span></span><br><span class="line">methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>写在选项里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完整版vue</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt; &lt;/div&gt;;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  template: <span class="string">` &lt;div&gt; &#123;&#123;n&#125;&#125; &lt;button @click=&quot;add&quot;&gt;+1&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span>,</span><br><span class="line">  data: &#123; <span class="attr">n</span>: <span class="number">0</span> &#125;, <span class="comment">// data可以是函数</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.n += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"><span class="comment">//注意：div#app会被代替</span></span><br></pre></td></tr></table></figure></li><li><p>xxx.vue 文件，非完整版 Vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; n &#125;&#125;&lt;button @click=<span class="string">&quot;add&quot;</span>&gt;+<span class="number">1</span>&lt;<span class="regexp">/button&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">n</span>: <span class="number">0</span> &#125;;  <span class="comment">//data只能是函数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.n += <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Xxx <span class="keyword">from</span> <span class="string">&quot;./xxx.vue&quot;</span>;</span><br><span class="line"><span class="comment">// Xxx是options对象</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(Xxx),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="2、模板语法"><a href="#2、模板语法" class="headerlink" title="2、模板语法"></a>2、模板语法</h5></li></ul><p>HTML 模板称作 template</p><ol><li>展示内容</li></ol><ul><li><p>表达式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;object.a&#125;&#125;  表达式</span><br><span class="line">&#123;&#123;n+1&#125;&#125;可以写任何运算</span><br><span class="line">&#123;&#123;fn(n)&#125;&#125;可以调用函数，会在methods中找</span><br><span class="line">&#x2F;&#x2F;如果值为null或undefined就不显示</span><br><span class="line">&lt;div v-text&#x3D;&#39;表达式&#39;&gt;&lt;&#x2F;div&gt;  &#x2F;&#x2F;效果相同</span><br></pre></td></tr></table></figure></li><li><p>HTML 内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-html=<span class="string">&quot;表达式&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">//可以显示富文本  &lt;strong&gt;hi&lt;/strong&gt;</span></span><br><span class="line"><span class="comment">//可以显示粗体hi</span></span><br></pre></td></tr></table></figure></li><li><p>展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-pre&gt;&#123;&#123; n &#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="comment">//v-pre不会对模板进行编译</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>绑定属性</li></ol><ul><li><p>绑定 src</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img v-bind:src=<span class="string">&#x27;x&#x27;</span> /&gt;</span><br><span class="line">&lt;img :src=<span class="string">&#x27;x&#x27;</span> /&gt; 简写形式</span><br></pre></td></tr></table></figure></li><li><p>绑定对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style=<span class="string">&quot;&#123;border:1px solid red,height:100&#125;&quot;</span>&lt;/div&gt;</span><br><span class="line"><span class="comment">//100px 可以直接写成100js</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>绑定事件</li></ol><ul><li><p>v-on:事件名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-on:click=<span class="string">&#x27;add&#x27;</span>&gt;<span class="comment">//写函数名 点击时调用add()</span></span><br><span class="line">&lt;div v-on:click=<span class="string">&#x27;add(x)&#x27;</span>&gt;<span class="comment">//带参数  点击时执行</span></span><br><span class="line">&lt;div v-on:click=<span class="string">&#x27;n+=1&#x27;</span>&gt;<span class="comment">//写函数表达式  点击时执行</span></span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line">&lt;div @click=<span class="string">&#x27;add&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>条件判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">&#x27;n&gt;0&#x27;</span>&gt;n大于<span class="number">0</span>&lt;/div&gt;</span><br><span class="line">&lt;div v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&#x27;n==0&#x27;</span>&gt;n等于<span class="number">0</span>&lt;/div&gt;</span><br><span class="line">&lt;div v-<span class="keyword">else</span>&gt;n小于<span class="number">0</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>循环 for (value,index) in 数组或者对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(u,index) in users&quot;</span> :key=<span class="string">&#x27;index&#x27;</span>/&gt;</span><br><span class="line">索引：&#123;&#123;index&#125;&#125; 值：&#123;&#123;user.name&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(value,name) in obj&quot;</span> :key=<span class="string">&#x27;name&#x27;</span>/&gt;</span><br><span class="line">属性名：&#123;&#123;name&#125;&#125; 属性值：&#123;&#123;value&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>for 循环 必须要绑定不会重复的 key<code>:key=&#39;index&#39;</code></p></li><li><p>显示 隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-show=<span class="string">&quot;n%2==0&quot;</span>&gt;n是偶数&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>近似等于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style=<span class="string">&quot;display:n%2===0?block:none&quot;</span>&gt;n大于<span class="number">0</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：看得见的元素并不只有<code>block</code>，<code>table</code>的<code>display</code>为<code>table</code>，<code>li</code>的<code>display</code>为<code>list-item</code></p></li><li><p>模板语法特点</p><ul><li>使用 XML 语法</li><li>使用<code>&#123;&#123;&#125;&#125;</code>插入表达式</li><li>使用 v-html、v-on、v-bind 等操作 DOM</li><li>使用 v-if、v-for 实现条件判断和循环</li></ul></li></ol><h5 id="3、指令与修饰符"><a href="#3、指令与修饰符" class="headerlink" title="3、指令与修饰符"></a>3、指令与修饰符</h5><h6 id="指令："><a href="#指令：" class="headerlink" title="指令："></a>指令：</h6><ul><li><p>什么是指令</p><p>以 <code>v-</code> 开头的就是指令</p></li><li><p>语法</p><p><code>v-指令名:参数=值</code>，如：<code>v-on:click=add</code></p><ol><li><p>如果值里没有特殊字符，可以不加引号</p></li><li><p>有些指令没有参数和值，如 <code>v-pre</code></p></li><li><p>有些指令没有值，如<code>v-on:click.prevent</code> ‘阻止默认事件’</p></li></ol></li></ul><h6 id="修饰符："><a href="#修饰符：" class="headerlink" title="修饰符："></a>修饰符：</h6><ol><li>有些指令支持修饰符 文档：<a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">事件修饰符</a></li></ol><ul><li><code>@click.stop=&#39;add&#39;</code>表示阻止事件冒泡</li><li><code>@click.prevent=&#39;add&#39;</code>表示阻止默认动作</li><li><code>@click.stop.prevent=&#39;add&#39;</code>同时表示上述两种</li></ul><ol start="2"><li>修饰符种类</li></ol><ul><li><p>v-on 支持<code>.&#123;keycode |别称：keyAlias&#125;、.stop .prevent .capture .self .once .passive .native</code> 文档：<a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">按键修饰符</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">y</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;回车&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">//点击回车键 会触发y函数</span></span><br><span class="line"><span class="string">//也可以写为 </span></span><br><span class="line"><span class="string">//&lt;input @keypress.enter=&#x27;y&#x27; /&gt;</span></span><br><span class="line"><span class="string">  &lt;input @keypress.13=&#x27;y&#x27;/&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span>,</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p>快捷键相关：<code>.ctrl .alt .shift .meta .exact</code></p><p>鼠标相关：<code>.left .right .middle</code></p></li><li><p>v-bind 支持: .prop .camel .sync 掘金: <a href="https://juejin.cn/post/6919731003233665031">Vue .sync 修饰符</a></p></li><li><p>v-model 支持：.lazy .number .trim</p></li></ul><h2 id="六、进阶属性"><a href="#六、进阶属性" class="headerlink" title="六、进阶属性"></a>六、进阶属性</h2><h5 id="1、Directives"><a href="#1、Directives" class="headerlink" title="1、Directives"></a>1、Directives</h5><p><code>v-if</code> <code>v-for</code> <code>v-html</code>都是指令</p><p><strong>自定义指令</strong></p><ol><li><p>声明一个全局指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(&#39;指令名&#39;,选项)</span><br></pre></td></tr></table></figure></li><li><p>声明一个局部指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">directives:&#123;</span><br><span class="line">&#39;指令名&#39;:选项</span><br><span class="line">&#125;</span><br><span class="line">&#125;)  &#x2F;&#x2F;指令只能用在当前实例</span><br></pre></td></tr></table></figure></li><li><p>选项包含的属性</p><p><strong>bind</strong>:只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。 类比<strong>created</strong></p><p><strong>inserted</strong>:被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。类比<strong>mounted</strong></p><p><strong>updated</strong>:所在组件的 VNode 更新时调用，<strong>但是可能发生在其子 VNode 更新之前</strong>。<strong>updated</strong></p><p><strong>componentUpdated</strong>:指令所在组件的 VNode <strong>及其子 VNode</strong> 全部更新后调用。</p><p><strong>unbind</strong>:只调用一次，指令与元素解绑时调用。 类比<strong>destroyed</strong></p></li><li><p>自制 v-on 指令 <a href="https://codesandbox.io/s/inspiring-wind-ihqc9?file=/src/main.js">v-on2</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">    on2: &#123;</span><br><span class="line">      <span class="function"><span class="title">inserted</span>(<span class="params">el, bunding</span>)</span> &#123;</span><br><span class="line">el.addEventListener(bunding.arg,bunding.value)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">unbind</span>(<span class="params">el, bunding</span>)</span> &#123; <span class="comment">//垃圾回收</span></span><br><span class="line">el.addEventListener(bunding.arg,bunding.value)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ul><li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM。</li><li><code>binding</code>：一个对象,包含各种数据</li></ul><p>函数简写 ：见官方文档</p><p><strong>官方文档：<a href="https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0">钩子函数参数</a></strong></p></li><li><p>指令作用：</p><p><strong>用于 DOM 操作</strong></p><ol><li>Vue 实例/组件用于事件绑定、事件监听、DOM 更新</li><li>Vue 指令用于原生 DOM 操作</li></ol><p><strong>减少重复</strong></p><ol><li>将经常使用的 DOM 操作封装成指令</li><li>将复杂的 DOM 操作封装成指令</li></ol></li></ol><h5 id="2、mixins-混入"><a href="#2、mixins-混入" class="headerlink" title="2、mixins 混入"></a>2、mixins 混入</h5><p>作用：减少重复</p><p>类比：</p><ol><li>directives 是减少 DOM 操作重复</li><li>mixins 的作用是减少 data、methods、钩子的重复</li><li>示例：<a href="https://codesandbox.io/s/brave-dijkstra-memmm">mixins</a></li><li>mixins 智能合并 <a href="https://cn.vuejs.org/v2/guide/mixins.html#%E9%80%89%E9%A1%B9%E5%90%88%E5%B9%B6">文档</a></li><li>Vue.mixin <a href="https://cn.vuejs.org/v2/guide/mixins.html#%E9%80%89%E9%A1%B9%E5%90%88%E5%B9%B6">文档</a> 全局注册</li></ol><h5 id="3、extends：继承"><a href="#3、extends：继承" class="headerlink" title="3、extends：继承"></a>3、extends：继承</h5><p>和 mixins 类似 <a href="https://cn.vuejs.org/v2/api/#extends">文档</a></p><p>示例：<a href="https://codesandbox.io/s/quizzical-hooks-qwp7v?fontsize=14&hidenavigation=1&theme=dark">点击</a></p><h5 id="4、provide-和-inject"><a href="#4、provide-和-inject" class="headerlink" title="4、provide 和 inject"></a>4、provide 和 inject</h5><p>示例：<a href="https://codesandbox.io/s/fragrant-rain-h8lm6?file=/src/App.vue">换肤</a></p><p>作用：大范围的 data 和 method 的共用</p><p>注意：上面示例不能只传 themeName 不传 changeTheme，因为 themeName 的值是被复制给 provide 的</p><p><strong>特别的</strong>：传引用也是可以的。但不推荐，容易失控 示例：<a href="https://codesandbox.io/s/exciting-kare-mdzlt?fontsize=14&hidenavigation=1&theme=dark">换肤</a></p><p>课后作业：<a href="https://codesandbox.io/s/pedantic-khorana-s76z1?fontsize=14&hidenavigation=1&theme=dark">hi</a></p><h2 id="七、Vue-表单和-v-model"><a href="#七、Vue-表单和-v-model" class="headerlink" title="七、Vue 表单和 v-model"></a>七、Vue 表单和 v-model</h2><h5 id="1、input-和-textarea"><a href="#1、input-和-textarea" class="headerlink" title="1、input 和 textarea"></a>1、input 和 textarea</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &#123;&#123; x &#125;&#125;</span><br><span class="line">  &lt;hr /&gt; <span class="comment">//v-model双向绑定</span></span><br><span class="line">  &lt;input v-model=<span class="string">&quot;x&quot;</span> placeholder=<span class="string">&quot;edit it&quot;</span> /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>双向绑定：修改内存页面也会改变，修改页面内存也会改变</strong></p><h5 id="2、多选框和单选框"><a href="#2、多选框和单选框" class="headerlink" title="2、多选框和单选框"></a>2、多选框和单选框</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; y &#125;&#125;  <span class="comment">//多选框  type=&#x27;checkbox&#x27;</span></span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;y&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span>抽烟&lt;/label&gt;</span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;y&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span>喝酒&lt;/label&gt;</span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;y&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span>烫头&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&#123;&#123; z &#125;&#125; <span class="comment">//单选框  type=&#x27;radio&#x27;</span></span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;z&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span>抽烟&lt;/label&gt;</span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;z&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span>喝酒&lt;/label&gt;</span><br><span class="line">&lt;label&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;z&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span>烫头&lt;/label&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：一般情况需要在 input 标签中使用 name 属性，确保为同一组标签</strong></p><h5 id="3、select"><a href="#3、select" class="headerlink" title="3、select"></a>3、select</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; z &#125;&#125;</span><br><span class="line">&lt;select v-model=<span class="string">&quot;z&quot;</span>&gt;  <span class="comment">//多选&lt;select multiple v-model=&quot;z&quot;&gt;</span></span><br><span class="line">  &lt;option value=<span class="string">&quot;&quot;</span>&gt; - &lt;/option&gt;</span><br><span class="line">  &lt;option :value=<span class="string">&quot;1&quot;</span>&gt; 唱 &lt;/option&gt;</span><br><span class="line">  &lt;option :value=<span class="string">&quot;2&quot;</span>&gt; 跳 &lt;/option&gt;</span><br><span class="line">  &lt;option :value=<span class="string">&quot;3&quot;</span>&gt; 篮球 &lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"><span class="comment">//可以使用 v-for</span></span><br><span class="line">&lt;option v-<span class="keyword">for</span>=<span class="string">&#x27;i in arr&#x27;</span> :value=<span class="string">&#x27;i.value&#x27;</span> :key=<span class="string">&#x27;i.value&#x27;</span>&gt;</span><br><span class="line">    &#123;&#123;i.text&#125;&#125;</span><br><span class="line">&lt;/option&gt;</span><br></pre></td></tr></table></figure><h5 id="4、form"><a href="#4、form" class="headerlink" title="4、form"></a>4、form</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;form @submit.prevent=<span class="string">&quot;onsubmit&quot;</span>&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    用户名&#123;&#123; user.username &#125;&#125;  <span class="comment">//实时显示</span></span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;user.username&quot;</span> /&gt;</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    密码&#123;&#123; user.password &#125;&#125; <span class="comment">//实时显示</span></span><br><span class="line">    &lt;input type=<span class="string">&quot;password&quot;</span> v-model=<span class="string">&quot;user.password&quot;</span> /&gt;</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;button type=<span class="string">&#x27;submit&#x27;</span>&gt;登录&lt;<span class="regexp">/button&gt;  /</span><span class="regexp">/标准写法   按下回车键 会触发submit事件</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">onsubmit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.user.usrname+<span class="string">&#x27;\n&#x27;</span>+<span class="built_in">this</span>.user.password)  <span class="comment">// 可以拿到当前 用户信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**修饰符 **<a href="https://cn.vuejs.org/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6">文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model.lazy&#x3D;&quot;user.username&quot; &#x2F;&gt;&#x2F;&#x2F;移出焦点时触发</span><br><span class="line">&lt;input type&#x3D;&quot;number&quot; v-model.number&#x3D;&quot;user.username&quot; &#x2F;&gt;&#x2F;&#x2F;只要数字 初始化的时候也必须为数字</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model.trim&#x3D;&quot;user.username&quot; &#x2F;&gt;&#x2F;&#x2F;不要两头空格</span><br></pre></td></tr></table></figure><h5 id="5、v-model-的本质"><a href="#5、v-model-的本质" class="headerlink" title="5、v-model 的本质"></a>5、v-model 的本质</h5><p>v-model 实际上是 <code>v-bind:value</code>和<code>v-on:input</code>的语法糖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">      type=<span class="string">&quot;text&quot;</span></span><br><span class="line">      :value=<span class="string">&quot;user.username&quot;</span></span><br><span class="line"><span class="comment">//vue提供的 需要使用 $event.target.value获取新值</span></span><br><span class="line">      @input=<span class="string">&quot;user.username = $event.target.value&quot;</span></span><br><span class="line">    /&gt;</span><br><span class="line"></span><br><span class="line">&lt;MyInput</span><br><span class="line">  type=<span class="string">&#x27;text&#x27;</span></span><br><span class="line">      :value=<span class="string">&quot;user.username&quot;</span></span><br><span class="line"><span class="comment">//自己封装的$event就可以获取新值</span></span><br><span class="line">  @input=<span class="string">&quot;user.username = $event&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;MyInput</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;red&quot;&gt;</span><br><span class="line">    &lt;input :value&#x3D;&quot;value&quot; @input&#x3D;&quot;onInput&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: String,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onInput(e) &#123;</span><br><span class="line">      const event &#x3D; e.target.value;</span><br><span class="line">      &#x2F;&#x2F;通过input事件拿到当前输入，再次触发input事件，将数据传递出去</span><br><span class="line">      this.$emit(&quot;input&quot;, event);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、创建项目&quot;&gt;&lt;a href=&quot;#一、创建项目&quot; class=&quot;headerlink&quot; title=&quot;一、创建项目&quot;&gt;&lt;/a&gt;一、创建项目&lt;/h2&gt;&lt;h4 id=&quot;1、使用-vue-cli创建项目-vue-cli&quot;&gt;&lt;a href=&quot;#1、使用-vue-cli创</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>九、MVC</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/9%E3%80%81MVC/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/9%E3%80%81MVC/</id>
    <published>2021-02-19T03:35:19.245Z</published>
    <updated>2021-02-19T03:35:19.245Z</updated>
    
    <content type="html"><![CDATA[<p>博客：<a href="https://juejin.cn/post/6894231078177865741">浅析 mvc</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;博客：&lt;a href=&quot;https://juejin.cn/post/6894231078177865741&quot;&gt;浅析 mvc&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>八、前后分离</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/8%E3%80%81%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/8%E3%80%81%E5%89%8D%E5%90%8E%E5%88%86%E7%A6%BB/</id>
    <published>2021-02-19T03:35:19.236Z</published>
    <updated>2021-02-19T03:35:19.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、AJAX"><a href="#1、AJAX" class="headerlink" title="1、AJAX"></a>1、AJAX</h2><p>Async JavaScript And XM</p><p><strong>用 JS**</strong>发请求和收响应，就是 AJAX 的全部内容**</p><ol><li><p>背景</p></li><li><ol><li>AJAX 是浏览器上的功能</li></ol></li><li><ol><li><ol><li>浏览器可以发请求，收响应</li></ol></li><li>浏览器在 window 上加了一个 XMLHttpRequest 函数</li><li>用这个构造函数（类）可以构造出一个对象</li><li>JS 通过它实现发请求，收响应</li></ol></li><li><ol><li>服务器</li></ol></li><li><ol><li><ol><li>使用 server.js 作为服务器</li></ol></li><li>添加路由</li></ol></li><li><p>加载 CSS</p></li><li><ol><li>以前使用<link rel="stylesheet" href="xx.css"></li><li>用 AJAX</li></ol></li><li><ol><li><ol><li>创建 HttpRequest 对象 （XMLHttpRequest）</li></ol></li><li>调用对象的 open 方法，监听对象的 onload 和 onerror 事件</li><li>专业的是使用 onreadystatechange 事件</li><li>调用对象的 send 方法（发送请求）</li></ol></li><li><ol><li>代码</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">getCSS.onclick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const request &#x3D; new XMLHttpRequest()</span><br><span class="line">  request.open(&quot;GET&quot;, &quot;&#x2F;style.css&quot;)</span><br><span class="line">  request.onreadystatechange &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(request.readyState)</span><br><span class="line">    if (request.readyState &#x3D;&#x3D;&#x3D; 4) &#123;</span><br><span class="line">      if (request.status &gt;&#x3D; 200 &amp;&amp; request.status &lt; 300) &#123;</span><br><span class="line">        console.log(&quot;下载完成了&quot;)</span><br><span class="line">        const style &#x3D; document.createElement(&quot;style&quot;)</span><br><span class="line">        style.innerHTML &#x3D; request.response</span><br><span class="line">        document.head.appendChild(style)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        alert(&quot;加载css失败&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.onerror &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;失败了&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  request.send()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>加载 XML</p></li><li><ol><li>创建 HttpRequest 对象 （XMLHttpRequest）</li><li>调用对象的 open 方法，监听对象的 onload 和 onerror 事件</li><li>专业的是使用 onreadystatechange 事件</li><li>调用对象的 send 方法（发送请求）</li><li>onreadystatechange readyState <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState">MDN</a></li><li>代码</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getHTML.onclick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const request &#x3D; new XMLHttpRequest()</span><br><span class="line">  request.open(&quot;GET&quot;, &quot;&#x2F;3.html&quot;)</span><br><span class="line">  request.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    const div &#x3D; document.createElement(&quot;div&quot;)</span><br><span class="line">    div.innerHTML &#x3D; request.response</span><br><span class="line">    document.body.appendChild(div)</span><br><span class="line">  &#125;</span><br><span class="line">  request.onerror &#x3D; () &#x3D;&gt; &#123;&#125;</span><br><span class="line">  request.send()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>总结：</p></li><li><ol><li>HTTP 是个框，什么都能装</li></ol></li><li><ol><li><ol><li>可以装 CSS、html、JS、XML</li></ol></li><li>记得设置正确的 Content-Type，是好习惯</li><li>只要知道怎么解析这些内容，就可以使用这些内容</li></ol></li><li><ol><li>解析方法</li></ol></li><li><ol><li><ol><li>得到 css 后生成 style 标签</li></ol></li><li>得到 JS 后生成 script 标签</li><li>得到 HTML 后使用 innerHTML 和 DOM api</li><li>得到 XML 后使用 responseXML 和 DOM api</li><li>不同类型的数据有不同的解析方法</li></ol></li><li><p>JSON</p></li><li><ol><li>简介</li></ol></li><li><ol><li><ol><li>JSON 是一门语言，不是编程语言，是标记语言，和 HTML、XML、markdown 一样用来展示数据</li></ol></li><li>语法：铁轨图 <a href="http://json.org/json-zh.html"><strong>中文官网</strong></a></li><li>支持六种数据类型</li></ol></li><li><ol><li><ol><li><ol><li>string：只支持双引号，不支持单引号和无引号</li></ol></li></ol></li><li>number：支持科学计数</li><li>bool：true 和 false</li><li>null：没有 undefined</li><li>Object</li><li>Array</li><li>不支持函数，不支持变量，不支持引用</li></ol></li><li><p>加载 JSON</p></li><li><ol><li>创建 HttpRequest 对象 （XMLHttpRequest）</li><li>调用对象的 open 方法，监听对象的 onload 和 onerror 事件</li><li>专业的是使用 onreadystatechange 事件</li><li>调用对象的 send 方法（发送请求）</li><li>window.JSON</li></ol></li><li><ol><li><ol><li>JSON.parse:</li></ol></li></ol></li><li><ol><li><ol><li><ol><li>将符合 JSON 语法的字符串转换成 JS 对应类型的数据</li></ol></li></ol></li><li>JSON 字符串=&gt;JS 数据</li><li>JSON 只有六种类型，所以转换成的类型也只有六种</li><li>如果出现语法错误 使用 try catch 捕获错误</li></ol></li><li><ol><li><ol><li>JOSN.stringfy</li></ol></li></ol></li><li><ol><li><ol><li><ol><li>JOSN.parse 的逆运算</li></ol></li></ol></li><li>JS 数据=&gt;JSON 字符串</li><li>由于 JS 类型的数据类型比 JSON 多，所以不一定能成功</li></ol></li><li><ol><li>代码</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">getJSON.onclick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const request &#x3D; new XMLHttpRequest()</span><br><span class="line">  request.open(&quot;get&quot;, &quot;&#x2F;5.json&quot;)</span><br><span class="line">  request.onreadystatechange &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    if (request.readyState &#x3D;&#x3D;&#x3D; 4 &amp;&amp; request.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">      console.log(&quot;request.response&quot;)</span><br><span class="line">      console.log(request.response)</span><br><span class="line">      let object &#x3D; JSON.parse(request.response)</span><br><span class="line">      console.log(&quot;object&quot;)</span><br><span class="line">      console.log(object)</span><br><span class="line">      xName.textContent &#x3D; object.name + object.age</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>综合应用：<a href="https://github.com/Straight-GZ/ajax-1">加载分页</a></li></ol><h2 id="2、异步与-Promise"><a href="#2、异步与-Promise" class="headerlink" title="2、异步与 Promise"></a>2、异步与 Promise</h2><p>JS 异步编程模型</p><h3 id="一、异步"><a href="#一、异步" class="headerlink" title="一、异步"></a>一、异步</h3><h4 id="1、什么是异步？什么是同步？"><a href="#1、什么是异步？什么是同步？" class="headerlink" title="1、什么是异步？什么是同步？"></a>1、什么是异步？什么是同步？</h4><ol><li><ol><li><strong>同步</strong></li></ol></li><li><ol><li><ol><li>如果能直接拿到结果，那就是同步。例如在医院挂号，拿到号才会离开</li></ol></li><li>同步任务可能消耗 10 毫秒，也可能需要 3 秒</li><li>总之拿不到结果是不会离开</li></ol></li><li><ol><li><strong>异步</strong></li></ol></li><li><ol><li><ol><li>如果不能直接拿到结果，那就是异步。例如在餐厅门口等位，可以拿到号去逛街</li></ol></li><li>确定吃饭时间？</li><li>每 10 分钟去餐厅问一下（轮询）</li><li>扫码用微信接收通知（回调）</li></ol></li></ol><h4 id="2、异步举例"><a href="#2、异步举例" class="headerlink" title="2、异步举例"></a>2、异步举例</h4><ol><li><ol><li>以 AJAX 为例</li></ol></li><li><ol><li><ol><li><code>request.send()</code> 之后，并不能直接得到 response</li></ol></li><li>必须等到 <code>readState</code> 变为 4 后，浏览器回头调用 <code>request.onreadystatechange</code> 函数</li><li>我们才能得到 <code>request.response</code></li></ol></li><li><ol><li>回调</li></ol></li><li><ol><li><ol><li>你写给自己用的函数，不是回调</li></ol></li><li>你写给别人用的函数，就是回调</li><li><code>request.onreadystatechange</code> 就是写给浏览器调用的</li><li>意思就是你（浏览器）回头调用一下这个函数</li><li><strong>写了却不调用，给别人调用的函数就是回调</strong></li></ol></li><li><ol><li><ol><li><ol><li>举例</li></ol></li></ol></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;&#125;</span><br><span class="line">function f2(fn)&#123;</span><br><span class="line">fn()</span><br><span class="line">&#125;</span><br><span class="line">f2(f1)</span><br></pre></td></tr></table></figure><ol><li><ol><li><ol><li><ol><li><ol><li>分析：</li></ol></li></ol></li></ol></li></ol></li><li><ol><li><ol><li><ol><li><ol><li><ol><li>是否调用了 f1？ 答：没有调用</li></ol></li></ol></li><li>是否把 f1 传给了别人(f2)了？ 答：传了</li><li>f2 调用 f1 没有？ 答：调用了</li><li>那么，f1 是不是我写给 f2 调用的函数？ 答：是</li><li>所有 f1 是回调</li></ol></li></ol></li></ol></li><li><ol><li><ol><li><ol><li><ol><li>抬杠 1</li></ol></li></ol></li></ol></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;&#125;</span><br><span class="line">function f2(fn)&#123;</span><br><span class="line">&#x2F;&#x2F; fn()</span><br><span class="line">&#125;</span><br><span class="line">f2(f1)</span><br></pre></td></tr></table></figure><ol><li><ol><li><ol><li><ol><li><ol><li><ol><li>如果 f2 没有调用 f1 呢？</li></ol></li></ol></li><li>f2 有病？不调用为什么要接受 fn 参数？</li></ol></li></ol></li></ol></li><li><ol><li><ol><li><ol><li><ol><li>抬杠 2</li></ol></li></ol></li></ol></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;&#125;</span><br><span class="line">function f2(fn)&#123;</span><br><span class="line">fn()</span><br><span class="line">&#125;</span><br><span class="line">f2(&#39;字符串&#39;)</span><br></pre></td></tr></table></figure><ol><li><ol><li><ol><li><ol><li><ol><li><ol><li>如果传给 f2 的参数不是函数呢？</li></ol></li></ol></li><li>会报错，fn 不是一个函数</li></ol></li></ol></li></ol></li><li><ol><li><ol><li><ol><li><ol><li>抬杠 3</li></ol></li></ol></li></ol></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function f1(x)&#123;</span><br><span class="line">console.log(x)</span><br><span class="line">&#125;</span><br><span class="line">function f2(fn)&#123;</span><br><span class="line">fn(&#39;你好&#39;)</span><br><span class="line">&#125;</span><br><span class="line">f2(f1)</span><br></pre></td></tr></table></figure><ol><li><ol><li><ol><li><ol><li><ol><li><ol><li>f1 怎么会有一个 x 参数？</li></ol></li></ol></li><li><code>fn(&#39;你好&#39;)</code> 中的 fn 就是 f1</li><li><code>fn(&#39;你好&#39;)</code> 中的’你好’会赋值给参数 x</li><li>所有 x 就是’你好’</li><li>x 可以改为任其他名字，x 表示第一个参数而已</li></ol></li></ol></li></ol></li></ol><h4 id="4、异步和回调的关系"><a href="#4、异步和回调的关系" class="headerlink" title="4、异步和回调的关系"></a>4、异步和回调的关系</h4><ol><li><p>关联</p></li><li><ol><li>异步任务需要在得到结果的时候通知 js 来拿结果</li><li>怎么通知呢？</li><li>可以让 JS 留一个函数地址（电话号码）给浏览器</li><li>异步任务完成时浏览器调用该函数地址即可（拨打电话）</li><li>同时把结果作为参数传给该函数（电话告知）</li><li>这个函数是我写给浏览器调用的，所以是回调函数</li></ol></li><li><p>区别</p></li><li><ol><li>异步任务需要用到回调函数来通知结果</li><li>但回调函数不一定只在异步任务里</li><li>也可以用到同步任务里</li><li><code>array.forEach(n=&gt;console(n))</code> 就是同步回调</li></ol></li><li><p>判断同步异步</p></li><li><ol><li>如果一个函数返回值处于</li></ol></li><li><ol><li><ol><li>setTimeout</li></ol></li><li>AJAX（即 XMLHttpRequest）</li><li>AddEventListener</li></ol></li><li><ol><li>这三个东西内部，那么这个函数就是异步函数</li></ol></li><li><p>摇骰子</p></li><li><ol><li>举例</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function 摇骰子()&#123;</span><br><span class="line">setTimeout(()&#x3D;&gt;&#123; &#x2F;&#x2F; 箭头函数</span><br><span class="line">return parseInt(Math.random() * 6) + 1</span><br><span class="line">&#125;,1000)</span><br><span class="line">&#x2F;&#x2F; return undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><ol><li><ol><li>分析：</li></ol></li></ol></li><li><ol><li><ol><li><ol><li>摇骰子() 没有写 return ，那就是 <code>return undefined</code></li></ol></li></ol></li><li>箭头函数有 <code>return</code> ，返回真正的结果</li><li>所以这是一个异步任务/异步函数</li></ol></li><li><ol><li>摇骰子续</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const n &#x3D; ()</span><br><span class="line">console.log(n) &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><ol><li><ol><li><ol><li>怎么拿到异步结果呢？</li></ol></li></ol></li><li><ol><li><ol><li><ol><li>可以回调。写个函数，把函数地址给他<code>function f1(x)&#123;console.log(x)&#125;;摇骰子(f1)</code></li></ol></li></ol></li><li>然后我要求摇骰子函数得到结果后把结果作为参数传给 f1</li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function (fn)&#123;</span><br><span class="line">setTimeout(()&#x3D;&gt;&#123; &#x2F;&#x2F;</span><br><span class="line">fn(parseInt(Math.random() * 6) + 1)</span><br><span class="line">&#125;,1000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><ol><li><ol><li><ol><li>摇骰子函数不调用 fn 怎么办？ 答：自己写的代码不调用干嘛要写</li></ol></li></ol></li><li>简化箭头函数</li></ol></li><li><ol><li><ol><li><ol><li><ol><li>由于 f1 声明了之后只用了一次，可以删掉 f1</li></ol></li></ol></li></ol></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function f1(x)&#123; console.log(x) &#125;</span><br><span class="line">摇骰子(f1)</span><br><span class="line">&#x2F;&#x2F;改为</span><br><span class="line">摇骰子(x &#x3D;&gt; &#123;</span><br><span class="line">console.log(x)</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;再简化为</span><br><span class="line">摇骰子(console.log)</span><br><span class="line">&#x2F;&#x2F;如果参数个数不一致就不能这样简化</span><br><span class="line">&#x2F;&#x2F;例子</span><br><span class="line">[1,2,3].map(parseInt) &#x2F;&#x2F;返回值为 [1, NaN, NaN]</span><br><span class="line">&#x2F;&#x2F;map有三个参数map(item,i,arr) 数组每一项、下标、数组本身</span><br><span class="line">&#x2F;&#x2F;上面代码相当于</span><br><span class="line">[1,2,3].map((item,i,arr)&#x3D;&gt;&#123;</span><br><span class="line">    return parseInt(item,i,arr)&#125;)</span><br><span class="line">&#x2F;&#x2F; 第一次 parseInt(&#39;1&#39;,0,arr)   0和arr参数无效 &#x3D;&gt;1</span><br><span class="line">&#x2F;&#x2F;第二次 parseInt(&#39;2&#39;,1,arr)    把2作为1进制数解析  &#x3D;&gt;NaN</span><br><span class="line">&#x2F;&#x2F;第三次 parseInt(&#39;3&#39;,2,arr)           把3作为2进制数解析 &#x3D;&gt;NaN</span><br></pre></td></tr></table></figure><h4 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h4><ol><li>异步任务不能拿到结果</li><li>于是我们传一个一个回调给异步任务</li><li>异步任务完成时调用回调</li><li>调用的时候把结果作为参数</li></ol><h3 id="二、Promise"><a href="#二、Promise" class="headerlink" title="二、Promise"></a>二、Promise</h3><h4 id="1、如果异步任务有两个结果，成功或者失败，怎么办？"><a href="#1、如果异步任务有两个结果，成功或者失败，怎么办？" class="headerlink" title="1、如果异步任务有两个结果，成功或者失败，怎么办？"></a>1、如果异步任务有两个结果，成功或者失败，怎么办？</h4><p>方法一：回调接受两个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&#39;.&#x2F;1.txt&#39;, (error, data)&#x3D;&gt;&#123;</span><br><span class="line">if(error)&#123; console.log(&#39;失败了&#39;); return &#125;</span><br><span class="line">console.log(data.toString()) &#x2F;&#x2F; 成功</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>方法二：搞两个回调</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#39;get&#39;,&#39;&#x2F;1.json&#39;, data&#x3D;&gt;&#123;&#125;, error&#x3D;&gt;&#123;&#125;)</span><br><span class="line">&#x2F;&#x2F;前面函数是成功回调，后面函数是失败回调</span><br><span class="line">ajax(&#39;get&#39;, &#39;&#x2F;1.json&#39;, &#123;</span><br><span class="line">    success: ()&#x3D;&gt;&#123;&#125;, fail: ()&#x3D;&gt;&#123;&#125;</span><br><span class="line">&#125;)&#x2F;&#x2F;接受一个对象，对象有两个key表示成功和失败</span><br></pre></td></tr></table></figure><p>不足之处：</p><ol><li>不规范，名称五花八门</li><li>容易出现回调地狱，代码阅读性差</li><li>很难进行错误处理</li><li>回调地狱<img src="https://cdn.nlark.com/yuque/0/2020/png/2639360/1604759238617-6d3e531d-453f-4de9-b31f-51e1153a41bb.png" alt="image.png"></li></ol><h4 id="2、以-AJAX-为例，解释-Promise-的用法"><a href="#2、以-AJAX-为例，解释-Promise-的用法" class="headerlink" title="2、以 AJAX 为例，解释 Promise 的用法"></a>2、以 AJAX 为例，解释 Promise 的用法</h4><p>不使用 Promise</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ajax &#x3D; (method, url, options)&#x3D;&gt;&#123;</span><br><span class="line">const &#123;success, fail&#125; &#x3D; options &#x2F;&#x2F; 析构赋值</span><br><span class="line">const request &#x3D; new XMLHttpRequest()</span><br><span class="line">request.open(method, url)</span><br><span class="line">request.onreadystatechange &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">if(request.readyState &#x3D;&#x3D;&#x3D; 4)&#123;</span><br><span class="line">&#x2F;&#x2F;成功调用success  失败调用fail</span><br><span class="line">if(request.status &lt; 400)&#123;</span><br><span class="line">success.call(null, request.response)</span><br><span class="line">&#125;else if(request.status &gt;&#x3D; 400)&#123;</span><br><span class="line">fail.call(null, request, request.status)</span><br><span class="line">&#125; &#125; &#125;</span><br><span class="line">request.send()</span><br><span class="line">&#125;</span><br><span class="line">ajax(&#39;get&#39;, &#39;&#x2F;xxx&#39;, &#123;</span><br><span class="line">success(response)&#123;&#125;, fail: (request, status)&#x3D;&gt;&#123;&#125;</span><br><span class="line">&#125;) &#x2F;&#x2F; 左边是function缩写，右边是箭头函数</span><br></pre></td></tr></table></figure><p>使用 Promise</p><p>调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#39;get&#39;, &#39;&#x2F;xxx&#39;, &#123;</span><br><span class="line">success(response)&#123;&#125;, fail: (request, status)&#x3D;&gt;&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面用到了两个回调，还使用了 success 和 fail</p><p>改成 Promise 写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#39;get&#39;, &#39;&#x2F;xxx&#39;)</span><br><span class="line">  .then((response)&#x3D;&gt;&#123;&#125;, (request, status)&#x3D;&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><p>虽然也是回调，但是不需要记 success 和 fail</p><p>then 的第一个参数就是 success</p><p>then 的第二个参数就是 fail</p><p>这个 AJAX 返回了一个含有.then 的对象。</p><p>AJAX 源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ajax &#x3D; (method, url, options)&#x3D;&gt;&#123;</span><br><span class="line">  return new Promise((resolve, reject)&#x3D;&gt;&#123;</span><br><span class="line">    const &#123;success, fail&#125; &#x3D; options</span><br><span class="line">    const request &#x3D; new XMLHttpRequest()</span><br><span class="line">    request.open(method, url)</span><br><span class="line">    request.onreadystatechange &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">      if(request.readyState &#x3D;&#x3D;&#x3D; 4)&#123;</span><br><span class="line">         &#x2F;&#x2F;成功就调用resolve，失败就调用reject</span><br><span class="line">        if(request.status &lt; 400)&#123;</span><br><span class="line">          resolve.call(null, request.response)</span><br><span class="line">      &#125;else if(request.status &gt;&#x3D; 400)&#123;</span><br><span class="line">        reject.call(null, request)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send()</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想要某个函数拥有 promise 功能，只需让其返回一个 promise <code>return new Promise((resolve,reject)=&gt;&#123;&#125;)</code></p><h4 id="3、总结："><a href="#3、总结：" class="headerlink" title="3、总结："></a>3、总结：</h4><ol><li><p>第一步：</p></li><li><ol><li><code>return new Promise((resolve,reject)=&gt;&#123;&#125;)</code></li><li>任务成功则调用 <code>resolve(result)</code></li><li>任务失败则调用 <code>reject(error)</code></li><li><code>resolve</code> 和 <code>reject</code> 会再去调用成功和失败函数</li></ol></li><li><p>第二步：</p></li><li><ol><li>使用 <code>then(success,fail)</code> 传入成功和失败函数</li></ol></li></ol><h4 id="4、缺点"><a href="#4、缺点" class="headerlink" title="4、缺点"></a>4、缺点</h4><ol><li><p>post 无法上传数据 <code>request.send(这里可以上传数据)</code></p></li><li><p>不能设置请求头 `request.setRequestHeader(key,value)</p></li><li><p>jQuery.ajax</p></li><li><ol><li>优点：支持更多形式的参数，支持 Promise</li></ol></li><li><p>axios</p></li><li><ol><li>点击查看<a href="https://juejin.im/post/6844903569745788941">Axios 作弊表</a></li><li>高级用法：JSON 自动处理</li></ol></li><li><ol><li><ol><li>axios 如何发现响应的是 <code>Content-Type</code> 是 json</li></ol></li><li>会自动调用 JSON.parse 所有要正确设置 <code>Content-Type</code></li></ol></li></ol><h3 id="三、跨域"><a href="#三、跨域" class="headerlink" title="三、跨域"></a>三、跨域</h3><h4 id="1、同源策略"><a href="#1、同源策略" class="headerlink" title="1、同源策略"></a>1、同源策略</h4><ol><li><p>同源定义：</p></li><li><ol><li>源： <code>window.Origin</code> 或 <code>location.origin</code> 可以得到当前源</li><li>源=协议+域名+端口号</li><li>如果两个 url 协议、域名、端口号完全一致，那么这两个 url 就是同源的</li><li>举例</li></ol></li><li><ol><li><ol><li><a href="https://www.baidu.com和https//qq.com%E4%B8%8D%E5%90%8C%E6%BA%90">https://www.baidu.com和https://qq.com不同源</a></li></ol></li><li><a href="https://www.baidu.com和https//baidu.com%E4%B8%8D%E5%90%8C%E6%BA%90">https://www.baidu.com和https://baidu.com不同源</a></li><li>完全一致才算同源</li></ol></li><li><p>同源策略</p></li><li><ol><li>浏览器规定：如果 JS 运行在源 A，那么就只能获取源 A 的数据，不允许获取源 B 的数据，即不允许跨源</li><li>目的：保护隐私</li><li>主要原因：无法区分发送者，如果没有同源策略，任何网站都可以访问别的网站数据(检查 referer)</li></ol></li><li><p>同源策略：不同源的页面中间，不允许互相访问数据</p></li><li><p>同源策略限制访问数据，引用 css、JS 和图片的时候，其实并不知道其内容，只是在引用</p></li></ol><h4 id="2、跨域"><a href="#2、跨域" class="headerlink" title="2、跨域"></a>2、跨域</h4><p>同源：如果两个 url 的协议、域名、端口号完全一致，那么这两个 url 就同源的</p><p>跨域：浏览器有同源策略限制，不允许一个源里的文档访问另一个源里资源。而跨域就是为了解决同源策略限制。</p><p>CORS：跨源资源共享，使用附加的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP">HTTP</a> 头来告诉浏览器，准许运行在一个源上的 Web 应用访问位于另一不同源选定的资源。使用<code>**Access-Control-Allow-Origin**</code>响应头可以指定一个可以访问资源的 URI</p><p>JSONP ：<strong>在无法使用 CORS 跨域的情况下，请求 JS 文件，这个 JS 文件会执行一个回调，回调里面包含数据。可以兼容 IE 浏览器实现跨域，但只能发 get 请求，并且无法读取精确的状态码。</strong></p><h3 id="四、静态服务器"><a href="#四、静态服务器" class="headerlink" title="四、静态服务器"></a>四、静态服务器</h3><p>点击查看 →：<a href="https://github.com/Straight-GZ/static-server">static server</a></p><h3 id="五、动态服务器："><a href="#五、动态服务器：" class="headerlink" title="五、动态服务器："></a>五、动态服务器：</h3><p><strong>判断依据</strong>：是否请求了数据库，请求了数据库就是动态服务器</p><p>使用 JSON 文件当做数据库</p><p>流程：</p><p>1.创建 db/users.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;123&quot;</span>, <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;123&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;qqq&quot;</span>, <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;qqq&quot;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2.读取 users 数据</p><p>先<code>fs.readFIleSync(&#39;./db/users.json&#39;).toString()</code></p><p>使用 JSON.parse(反序列化)，得到数组</p><ol start="3"><li><p>存储 users 数据</p><p>使用 JSON.Stringfy(序列化),得到字符串</p><p>然后<code>fs.writeFileSync(&#39;./db/user/json&#39;,data)</code></p></li><li><p>实现目标 1：<strong>用户注册</strong></p></li></ol><ul><li><p>用户提交用户名密码,users.json 就增加一行数据</p></li><li><p>思路：前端 html 写一个 form，让用户填写 name 和 password,监听 submit 事件，发送 post 请求，数据位于请求体；后端接收 post 请求，获取请求体中 name 和 password,存储数据</p></li><li><p>关键代码：</p><p><code>form</code>标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=<span class="string">&quot;registerForm&quot;</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      用户名</span><br><span class="line">      &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> /&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      密码</span><br><span class="line">      &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;注册&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><code>server.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [];</span><br><span class="line"><span class="keyword">const</span> users = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">&quot;./db/users.json&quot;</span>).toString());</span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html,charset=UTF-8&quot;</span>);</span><br><span class="line">request.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">  array.push(chunk);</span><br><span class="line">&#125;);</span><br><span class="line">request.on(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="built_in">JSON</span>.parse(Buffer.concat(array).toString());</span><br><span class="line">  <span class="keyword">const</span> lastUser = users[users.length - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> newUser = &#123;</span><br><span class="line">    id: lastUser ? lastUser.id + <span class="number">1</span> : <span class="number">1</span>,</span><br><span class="line">    name: obj.name,</span><br><span class="line">    password: obj.password,</span><br><span class="line">  &#125;;</span><br><span class="line">  users.push(newUser);</span><br><span class="line">  fs.writeFileSync(<span class="string">&quot;./db/users.json&quot;</span>, <span class="built_in">JSON</span>.stringify(users));</span><br><span class="line">&#125;);</span><br><span class="line">response.end();</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>实现目标 2：<strong>用户登录</strong></li></ol><ul><li>首页<code>home.html</code>,已登录用户可以看到自己用户名</li><li>登陆页<code>sign_in.html</code>，用来提交用户名和密码</li><li>输入的用户名和密码是匹配的，就自动跳转首页</li><li><code>sign_in.html</code>，类似用户注册，前端写 form 让用户填写 name 和 password，监听 submit 事件，发送 post 请求，数据位于请求体。后端接收 post 请求，获取请求体中 name 和 password，读取数据，看是否有匹配的 name 和 password。如果匹配，后段应标记用户已登录。</li></ul><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><ol><li>定义：Cookie 是服务器下发给浏览器的一段字符串</li><li>浏览器必须保存这个 Cookie(除非用户删除)</li><li>之后发起相同二级域名请求，浏览器必须附上 Cookie</li><li>Set-Cookie <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie">Set-Cookie MDN</a></li></ol><ul><li><p>完成目标显示用户名</p><p>home.html 渲染前获得 user 信息</p><p>如果有 user,则将替换成 user.name</p><p>如果没有 user,则显示登录按钮</p></li><li><p>目标：防篡改 user_id</p><ul><li><p>加密</p></li><li><p>把信息放在服务器，使用 session（会话）</p></li><li><p>关键代码：</p><p>登录之后使用随机数保存 session</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response.statusCode = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> random = <span class="built_in">Math</span>.random();</span><br><span class="line">session[random] = &#123; <span class="attr">user_id</span>: user.id &#125;;</span><br><span class="line">fs.writeFileSync(<span class="string">&quot;./session.json&quot;</span>, <span class="built_in">JSON</span>.stringify(session));</span><br><span class="line">response.setHeader(<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">`session_id=<span class="subst">$&#123;random&#125;</span>;HttpOnly`</span>);</span><br><span class="line">response.end();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cookie = request.headers[<span class="string">&quot;cookie&quot;</span>];</span><br><span class="line">    <span class="keyword">let</span> sessionId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      sessionId = cookie</span><br><span class="line">        .split(<span class="string">&quot;;&quot;</span>)</span><br><span class="line">        .filter(<span class="function">(<span class="params">s</span>) =&gt;</span> s.indexOf(<span class="string">&quot;session_id=&quot;</span>) &gt;= <span class="number">0</span>)[<span class="number">0</span>]</span><br><span class="line">        .split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">      <span class="built_in">console</span>.log(sessionId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (sessionId &amp;&amp; session[sessionId]) &#123;</span><br><span class="line">      <span class="keyword">const</span> userId = session[sessionId].user_id;</span><br><span class="line">      <span class="built_in">console</span>.log(userId);</span><br><span class="line">      <span class="keyword">const</span> homeHtml = fs.readFileSync(<span class="string">&quot;./public/home.html&quot;</span>).toString();</span><br><span class="line">      <span class="keyword">const</span> users = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">&quot;./db/users.json&quot;</span>).toString());</span><br><span class="line">      <span class="keyword">const</span> user = users.find(<span class="function">(<span class="params">user</span>) =&gt;</span> user.id === userId);</span><br><span class="line">      <span class="keyword">let</span> string;</span><br><span class="line">      <span class="keyword">if</span> (user) &#123;</span><br><span class="line">        string = homeHtml</span><br><span class="line">          .replace(<span class="string">&quot;&#123;&#123;loginStatus&#125;&#125;&quot;</span>, <span class="string">&quot;已登录&quot;</span>)</span><br><span class="line">          .replace(<span class="string">&quot;&#123;&#123;userName&#125;&#125;&quot;</span>, user.name);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        string = homeHtml</span><br><span class="line">          .replace(<span class="string">&quot;&#123;&#123;loginStatus&#125;&#125;&quot;</span>, <span class="string">&quot;未登录&quot;</span>)</span><br><span class="line">          .replace(<span class="string">&quot;&#123;&#123;userName&#125;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      response.write(string);</span><br><span class="line">    response.end();</span><br></pre></td></tr></table></figure><h3 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h3><p>获取 Cookie:<code>const cookie=request.headers[&quot;cookie&quot;]</code></p><p>读取文件：<code>const homeHtml = fs.readFileSync(&quot;./public/home.html&quot;).toString();</code></p><p>写文件：<code>fs.writeFileSync(&quot;./session.json&quot;, JSON.stringify(session));</code></p><p>find:返回数组第一个符合条件的 item</p><p>replace：替换</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、AJAX&quot;&gt;&lt;a href=&quot;#1、AJAX&quot; class=&quot;headerlink&quot; title=&quot;1、AJAX&quot;&gt;&lt;/a&gt;1、AJAX&lt;/h2&gt;&lt;p&gt;Async JavaScript And XM&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用 JS**&lt;/strong&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>七、JS编程接口</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/7%E3%80%81JS%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/7%E3%80%81JS%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-02-19T03:35:19.208Z</published>
    <updated>2021-02-19T03:35:19.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、DOM-编程"><a href="#1、DOM-编程" class="headerlink" title="1、DOM 编程"></a>1、DOM 编程</h2><p><strong>网页其实是一棵树</strong><img src="https://cdn.nlark.com/yuque/0/2020/png/2639360/1604285066632-83165e51-9a1b-41e1-991f-f7c9dd0c6e31.png" alt="image.png"></p><p><strong>JS**</strong>如何操作这棵树？**</p><p>浏览器往 window 上加 document</p><p>JS 用 document 操作网页，这就是 Document Object Model（文档对象模型 ）</p><h3 id="一、获取元素（也叫标签）"><a href="#一、获取元素（也叫标签）" class="headerlink" title="一、获取元素（也叫标签）"></a>一、获取元素（也叫标签）</h3><p>API:</p><ul><li>window.idxx 或者直接 idxxx</li><li>document.getElementById(‘idxxx’)</li><li>document.getElementsByTagName(‘div’)[0]</li><li>document.getElementsByClassName(‘red’)[0]</li><li>document.querySelector(‘#idxxx’) 例：document.querySelector(‘div&gt;span:nth-child(2)’)</li><li>document.querySelectorAll(‘.red’)[0]</li></ul><p>用哪个？</p><ul><li>工作中用后两个</li><li>兼容 IE 用中间三个</li><li>做 demo 可以直接用 idxxx</li></ul><p>获取特定元素：</p><ul><li>获取 html 元素：document.documentElement</li><li>获取 head 元素：document.head</li><li>获取 body 元素：document.body</li><li>获取窗口：window（窗口不是元素）</li><li>获取所有元素：document.all (第六个 falsy 值)</li></ul><h3 id="二、原型链"><a href="#二、原型链" class="headerlink" title="二、原型链"></a>二、原型链</h3><p>获取到的元素是<strong>对象</strong></p><p><strong>div**</strong>原型链**</p><ol><li>自身属性 className、id、style</li><li>第一层原型 HTMLDivElement.prototype(所有 div 共同属性)</li><li>第二层原型 HTMLElement.prototype(所有 HTML 标签共同属性)</li><li>第三层原型 Element.prototype(XML、HTML 标签共有属性)</li><li>第四层原型 Node.prototype（所有节点共有属性，包括 XML 标签文本注释、HTML 标签文本注释等）</li><li>第五层原型 EventTarget.prototype(最重要的函数属性：addEventListener)</li><li>最后一层原型就是 Object.prototype</li></ol><p><strong>节点和元素的关系：</strong></p><ul><li><p><strong>节点包括以下几种</strong> <strong>x.nodeYype**</strong>得到一个数字**</p></li><li><ul><li><strong>1</strong> <strong>表示元素**</strong>Element*<strong>*，也叫标签**</strong>Tag**</li><li><strong>3</strong> <strong>表示**</strong>Text**</li><li><strong>8</strong> <strong>表示注释</strong> <strong>Comment</strong></li><li><strong>9</strong> <strong>表示文档</strong> <strong>Document</strong></li><li><strong>11</strong> <strong>表示文档片段</strong> <strong>DocumentFragment</strong></li></ul></li></ul><h3 id="三、节点的增删改查"><a href="#三、节点的增删改查" class="headerlink" title="三、节点的增删改查"></a>三、节点的增删改查</h3><ol><li><p>增：</p></li><li><ol><li>创建一个标签节点</li></ol></li><li><ol><li><ol><li>let div1=document.creatElement(‘div’)</li></ol></li><li>document.creatElement(‘style’)</li></ol></li><li><ol><li>创建一个文本节点</li></ol></li><li><ol><li><ol><li>text1=document.creatTextNode(‘你好’)</li></ol></li></ol></li><li><ol><li>标签里插入文本</li></ol></li><li><ol><li><ol><li>div.appendChild(text1)</li></ol></li><li>div1.innerText=’你好’或者 div1.textContent=’你好’</li><li>不能混用 div1.appendChild(‘你好’)</li></ol></li><li><ol><li>插入页面中</li></ol></li><li><ol><li><ol><li>创建标签处在 JS 线程，必须插入 head 或者 body 里，才会生效</li></ol></li><li>document.body.appendChild(div)</li><li>已在页面中的元素.appendChild(div)（把 div 移动到新的位置）</li><li>复制 let div2=div.cloneNode(true)</li></ol></li><li><p>删：</p></li><li><ol><li>div.parentNode.removeChild(div)</li><li>div.remove()</li></ol></li><li><p>改属性</p></li><li><ol><li>改标准属性：</li></ol></li><li><ol><li><ol><li>改 class：div.className=’red blue’全覆盖</li></ol></li><li>改 class：div.classList.add(‘red’)</li><li>改 style：div.style=’width:100px ;color:red’全覆盖</li><li>改 style 的一部分：div.style.width=’200px’</li><li>大小写：div.style.backgroundColor=’blue’ （字母大写代替’-‘符号）</li><li>改 data-*属性：div.dataset.x=’xxx’</li></ol></li><li><ol><li>读标准属性</li></ol></li><li><ol><li><ol><li>div.classList / a.herf</li></ol></li><li>div.getAttribute(‘class’)/a.getAttribute(‘herf’)</li></ol></li><li><ol><li>改事件处理函数</li></ol></li><li><ol><li><ol><li>div.onclick 默认为 null</li></ol></li><li>如果你把 div.onclick 改为一个函数</li><li>点击 div 的时候，就会调用这个函数 fn.call(div,event)</li><li>div 会被当做 this，event 包含点击事件的所有信息，如坐标</li><li>升级版 div.addEventListener 是升级版</li></ol></li><li><ol><li>改内容</li></ol></li><li><ol><li><ol><li>该文本内容</li></ol></li></ol></li><li><ol><li><ol><li><ol><li>div.innerText=’xxx’</li></ol></li></ol></li><li>div.textContent=’xxx’</li></ol></li><li><ol><li><ol><li>改 HTML 内容</li></ol></li></ol></li><li><ol><li><ol><li><ol><li>div.innerHTML=<code>&lt;strong&gt;hi&lt;/strong&gt;</code> 可以写任何内容</li></ol></li></ol></li></ol></li><li><ol><li><ol><li>改标签</li></ol></li></ol></li><li><ol><li><ol><li><ol><li>div.innerHTML=’’先清空</li></ol></li></ol></li><li>div.appendChild(div1)</li></ol></li><li><ol><li>改爸爸</li></ol></li><li><ol><li><ol><li>div.appendChild(div1) div1 从原来的地方消失，作为 div 的子元素</li></ol></li></ol></li></ol><p>查</p><ol><li><p>查爸爸 node.parentNode 或者 node.parentElement</p></li><li><p>查爷爷 node.parentNode.parentNode</p></li><li><p>查子代 node.childNodes 或者 node.children</p></li><li><p>查兄弟姐妹 node.parentNode.childNodes /node.parentNode.children 排除自己（遍历然后排除）</p></li><li><ol><li>查看老大 node.fistChild</li><li>查看老小 node.lastChild</li><li>查看上一个哥哥/姐姐 node.previousSibling</li><li>查看下一个弟弟/妹妹 node.nextSibling</li></ol></li><li><p>遍历 div 里所有元素</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> travel = <span class="function">(<span class="params">node, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  fn(node);</span><br><span class="line">  <span class="keyword">if</span> (node.children) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; node.children.length; i++) &#123;</span><br><span class="line">      travel(node.children[i], fn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">travel(body, <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(node);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="四、DOM-操作"><a href="#四、DOM-操作" class="headerlink" title="四、DOM 操作"></a>四、DOM 操作</h3><ol><li><p>DOM 跨线程</p></li><li><ol><li>各线程各司其职</li><li>渲染引擎不能操作 JS 只能操作界面</li><li>当浏览器发现 JS 在 body 里添加了一个 div1 对象</li><li>浏览器就会通知渲染引擎在页面也新增一个 div</li><li>新增的 div 所有属性都按照 div1</li></ol></li><li><p>插入标签过程</p></li><li><ol><li>在 div 放入页面之前 对 div 的操作都属于 JS 线程内</li><li>把 div 放在页面时 浏览器会发现 JS 的意图，通知渲染引擎在页面中渲染 div 对应的元素</li><li>把 div 放在页面之后</li></ol></li><li><ol><li><ol><li>对 div 的操作都有可能触发重新渲染</li></ol></li><li>div1.id=’newId’可能会，</li><li>div1.title=‘new’ <a href="https://css-tricks.com/css-content/#article-header-id-4">例子</a></li><li>如果连续多次操作，可能会合并成一次 <a href="http://js.jirengu.com/yefac/1/edit?html,css,js,output">例子</a></li></ol></li><li><p>属性同步</p></li><li><ol><li>标准属性</li></ol></li><li><ol><li><ol><li>对 div 的属性修改会被浏览器同步到页面中</li></ol></li><li>如：id 、className、title、<strong>data-*</strong></li></ol></li><li><ol><li>非标准属性</li></ol></li><li><ol><li><ol><li>非标准属性的修改，只会停留在 JS 线程中，不会同步到页面</li></ol></li><li>比如 x <a href="http://js.jirengu.com/meviw/2/edit?html,js,output"> 例子</a></li></ol></li><li><ol><li>启示：如果有自定义属性，想被同步到页面中，使用 data-作为前缀</li></ol></li></ol><h3 id="五、prototype-和-attribute"><a href="#五、prototype-和-attribute" class="headerlink" title="五、prototype 和 attribute"></a>五、prototype 和 attribute</h3><ol><li><p>prototype 属性：JS 线程中 div1 的所有属性，叫做 div1 的 prototype</p></li><li><p>attribute 也是属性：渲染引擎中 div 对应的属性</p></li><li><p>区别：</p></li><li><ol><li>大部分时候，同名的 prototype 和 attribute 值相等</li><li>但如果不是标准属性，只会在一开始时相等</li><li>attribute 只支持字符串，prototype 支持字符串、bool 等类型</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、DOM-编程&quot;&gt;&lt;a href=&quot;#1、DOM-编程&quot; class=&quot;headerlink&quot; title=&quot;1、DOM 编程&quot;&gt;&lt;/a&gt;1、DOM 编程&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;网页其实是一棵树&lt;/strong&gt;&lt;img src=&quot;https://cdn</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>六、算法与数据结构</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/6%E3%80%81%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/6%E3%80%81%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-02-19T03:35:19.181Z</published>
    <updated>2021-02-19T03:35:19.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、三种语句搞定所有逻辑"><a href="#一、三种语句搞定所有逻辑" class="headerlink" title="一、三种语句搞定所有逻辑"></a>一、三种语句搞定所有逻辑</h2><ol><li><p>顺序执行语句</p></li><li><ol><li>语句 1</li><li>语句 2</li></ol></li><li><p>条件判断语句</p></li><li><ol><li>if…then…else</li><li>if…else if…else</li></ol></li><li><p>循环语句</p></li><li><ol><li>while…do…</li><li>for I from 1 to n</li></ol></li></ol><h2 id="二、流程图"><a href="#二、流程图" class="headerlink" title="二、流程图"></a>二、流程图</h2><p><img src="/Straight-GZ/2021/02/19/6%E3%80%81%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/桌面\images\流程图.png" alt="img"></p><h2 id="三、数据结构"><a href="#三、数据结构" class="headerlink" title="三、数据结构"></a>三、数据结构</h2><ol><li><p>如何让表示两个数据</p></li><li><ol><li><p>如果顺序有意义</p></li><li><ol><li>[x,y]表示第一个是 x，第二个是 y</li><li>[y,x]表示第一个是 y，第二个是 x</li><li>例如坐标，需要提供 first、last 操作</li></ol></li><li><p>如果顺序无意义</p></li><li><ol><li>[x,y]和[y,x]没有区别</li><li>例如血压值[80,100]和[100，80]</li><li>不需要提供 first、last 操作</li></ol></li></ol></li><li><p>如何表示 n 个数据</p></li><li><ol><li><p>如果顺序有意义</p></li><li><ol><li>数组[a,b,c,d…]</li><li>提供索引操作，get(i)</li><li>提供 add/indexOf/delete 操作</li></ol></li><li><p>如果顺序没意义</p></li><li><ol><li>集合{a,b,c,d…}</li><li>提供 add/delete/has 操作</li></ol></li></ol></li><li><p>表示 N 对 N 数据</p></li><li><ol><li><p>比如学号</p></li><li><ol><li>用哈希表</li><li>hash={1001=&gt;’小黑’，1002=&gt;’小明’}</li></ol></li></ol></li></ol><h2 id="数据结构-数据形式-操作"><a href="#数据结构-数据形式-操作" class="headerlink" title="数据结构=数据形式+操作"></a>数据结构=数据形式+操作</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、三种语句搞定所有逻辑&quot;&gt;&lt;a href=&quot;#一、三种语句搞定所有逻辑&quot; class=&quot;headerlink&quot; title=&quot;一、三种语句搞定所有逻辑&quot;&gt;&lt;/a&gt;一、三种语句搞定所有逻辑&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;顺序执行语句&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>五、JavaScript</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/5%E3%80%81JS/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/5%E3%80%81JS/</id>
    <published>2021-02-19T03:35:19.161Z</published>
    <updated>2021-02-19T03:35:19.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、JavaScript-概述"><a href="#1、JavaScript-概述" class="headerlink" title="1、JavaScript 概述"></a>1、JavaScript 概述</h2><p>查看代码行数：</p><p>yarn global add cloc</p><p>cloc –vsc=git 统计仓库里的有效代码</p><p>一、历史</p><ol><li>1995 年 4 月，网景公司录用了布兰登（Brendan Eich），成为 JavaScript 的设计者</li><li>1996 年 8 月，IE3 发布，支持 JScript，浏览器大战开始。网景公司为了反击，将 JavaScript 提交给国际标准化组织 ECMA 希望 JavaScript 能够成为国际标准，以此抵抗微软。</li><li>1997 年 7 月，ECMA 组织发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript。ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。</li><li>1998 年 11 月 24 日，网景公司被收购。IE 浏览器成为主流。IE6 的如日中天，导致微软懈怠，不愿花费太多精力。谷歌抓住机会，Chrome 快速发展。</li><li>2004 年，谷歌发布 Gmail 在线网页，当时的人们以为网页只能看新闻和图片，Gmail 让人眼前一亮。2005 年， Jesse 将谷歌用到的技术命名为 AJAX，前端技术正式出现。2006 年，jQuery 发布，后面十年大放异彩，是目前最长寿的 JS 库。</li><li>2008 年，Chrome 终于发布，同时发布了 JS 引擎 V8。2009 年，Ryan 创建了 Node.js。 2010 年，Isaac 写出了 npm，TJ 发布了 Express.js。JavaScript 爆发。</li><li>2010 年之后，移动市场兴起，前端摆脱了 IE 浏览器的支配恐惧快速发展。</li></ol><h2 id="2、js-语法"><a href="#2、js-语法" class="headerlink" title="2、js 语法"></a>2、js 语法</h2><h3 id="一、表达式与语句"><a href="#一、表达式与语句" class="headerlink" title="一、表达式与语句"></a>一、表达式与语句</h3><h4 id="1-表达式："><a href="#1-表达式：" class="headerlink" title="1.表达式："></a>1.表达式：</h4><ul><li>1+2 表达式的值为 3</li><li>add(1,2)表达式的值为函数的返回值</li><li>console.log 表达式为函数本身</li><li>console.log(3)表达式的值是？ <strong>undefined</strong></li></ul><h4 id="2-语句："><a href="#2-语句：" class="headerlink" title="2.语句："></a>2.语句：</h4><p><code>var a = 1</code> 是一个语句</p><p><strong>区别</strong>：</p><ul><li>表达式一般都有值，语句可能有有可能没有</li><li>语句一般会改变环境（声明，赋值）</li><li>上面两点并不绝对</li></ul><h4 id="3-其他："><a href="#3-其他：" class="headerlink" title="3.其他："></a>3.其他：</h4><ul><li><p>大小写敏感</p><p>大小写是不同的</p><ul><li>var a 和 var A</li><li>object 和 Object</li><li>function 和 Function</li></ul></li><li><p>空格和回车</p><p><strong>大部分空格和回车没有意义</strong></p><ul><li>var a=1 和 var a = 1 没有区别</li><li>回车大部分时候不影响，<strong>return 后面不能加</strong>（加回车变成 undefined）</li></ul></li><li><p>标识符</p><p>规则：</p><ul><li>第一个字符，可以是 Unicode 字母或$或_或中文</li><li>后面的字符，除了上面所说，还可以有数字</li></ul><p>变量名是标识符：</p><ul><li>var _=1</li><li>var $=2</li><li>var =6(下划线最多两个，会被骂)</li><li>var 你好=’hi’</li></ul></li><li><p>注释：</p><ul><li>//:注释一行</li><li>/* */:注释多行</li><li>好的注释：踩坑注解，奇怪代码、bug 解释</li></ul></li><li><p>区块 block</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">​<span class="keyword">let</span> b =<span class="number">2</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 if/for/while 合用</p></li></ul><h3 id="二、条件语句"><a href="#二、条件语句" class="headerlink" title="二、条件语句"></a>二、条件语句</h3><h4 id="1、if-语句"><a href="#1、if-语句" class="headerlink" title="1、if 语句"></a>1、if 语句</h4><ol><li><strong>语法：</strong></li></ol><p>if(表达式){语句 1}else{语句 2} <code>&#123;&#125;</code>在语句只有一句的时候可以省略，不建议省略</p><ol start="2"><li><strong>注意：</strong></li></ol><ul><li><p>表达式里 a=1 (一个=赋值，===等于)</p></li><li><p>嵌套的 if else(省略括号的情况)</p></li><li><p>缩进</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a === <span class="number">2</span>) <span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>); <span class="comment">//省略括号，if只能包含一句代码除非逗号,隔开</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a等于2&quot;</span>); <span class="comment">//打印 a等于2</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>推荐写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">  语句;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">  语句;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">return</span> 表达式;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">return</span> 表达式;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>永远不要写 有歧义的代码</strong></p></li></ol><h4 id="2、switch-语句"><a href="#2、switch-语句" class="headerlink" title="2、switch 语句"></a>2、switch 语句</h4><ol><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;banana&quot;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;apple&quot;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>break 不可省略，省略会继续执行下一个 case</p></li></ol><h4 id="3、问号冒号表达式（三元运算符-）"><a href="#3、问号冒号表达式（三元运算符-）" class="headerlink" title="3、问号冒号表达式（三元运算符?:）"></a>3、问号冒号表达式（三元运算符<code>?:</code>）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">条件 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">A ? B : C;</span><br></pre></td></tr></table></figure><p>若条件为真，返回表达式 1 的值，否则返回表达式 2 的值</p><p>可视为 if…else 简写形式</p><p>4、短路逻辑</p><p>&amp;&amp;：<code>A&amp;&amp;B&amp;&amp;C&amp;&amp;D</code>取第一个假值或 D，并不会取 true 或 false</p><p>常见用法：<code>A&amp;&amp;B</code> <code>fn&amp;&amp;fn()</code> 如果 fn 存在，就调用 fn(j)</p><p>||: <code>A||B||C||D</code> 取第一个真值或 D,并不会取 true 或 false</p><p>常见用法： <code>A||B</code> <code>A=A||B</code>如果 A 不存在，那么 A=B</p><h4 id="4、while-循环"><a href="#4、while-循环" class="headerlink" title="4、while 循环"></a>4、while 循环</h4><ol><li>语法</li></ol><ul><li>while(表达式){语句}</li><li>判断表达式的真假</li><li>表达式为真，执行语句，执行完再判断表达式真假</li><li>表达式为假，执行后面的语句</li></ul><ol start="2"><li>注意</li></ol><ul><li><p>while 循环没有返回值</p></li><li><p>表达式为”true”，会陷入死循环</p></li><li><p>特殊情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">while</span> (i !== <span class="number">1</span>) &#123;</span><br><span class="line">  i = i + <span class="number">0.1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码也会陷入无限循环 （浮点数）</p></li></ul><h4 id="5、for-循环"><a href="#5、for-循环" class="headerlink" title="5、for 循环"></a>5、for 循环</h4><p>for 是 while 循环的方便写法</p><ol><li>语法：</li></ol><ul><li>for(语句 1;条件表达式;语句 2){循环体}</li><li>先执行语句 1，然后执行条件表达式</li><li>如果为真，执行循环体，然后执行语句 3，再次执行判断表达式，如此循环</li><li>如果为假，退出循环，执行后面语句</li></ul><ol start="2"><li>注意：</li></ol><ul><li><p>for 循环退出之前会最后执行一次语句 2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">//i的值为5</span></span><br></pre></td></tr></table></figure></li><li><p>setTimeout 过一会执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="comment">//会打出5个5</span></span><br></pre></td></tr></table></figure></li><li><p>for 里面三个表达式都可以省略，后面两个省略可能会陷入无限循环</p></li></ul><h4 id="6、continue-和-break"><a href="#6、continue-和-break" class="headerlink" title="6、continue 和 break"></a>6、continue 和 break</h4><ol><li>continue，跳过本轮循环</li><li>break，跳出循环</li><li>不带参数，只针对多层循环中的当前一层</li></ol><h4 id="7、label-标签"><a href="#7、label-标签" class="headerlink" title="7、label 标签"></a>7、label 标签</h4><p>相当于定位符，可以与 continue 和 break 混合使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo: &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">break</span> foo;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;本行不会输出&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>面试题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  foo: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码是什么？ 代码块中有一个标签 foo，foo 的内容为 1</p><h2 id="3、数据类型与运算符"><a href="#3、数据类型与运算符" class="headerlink" title="3、数据类型与运算符"></a>3、数据类型与运算符</h2><h3 id="一、数字与字符串"><a href="#一、数字与字符串" class="headerlink" title="一、数字与字符串"></a>一、数字与字符串</h3><p>都是一，为什么要分 1 和’1’？</p><ol><li>功能不同</li></ol><ul><li><p>数字能加减乘除，字符串不行</p></li><li><p>字符串能表示电话号码，数字不行</p></li><li><p>字符串是字符串，数字是数字，<strong>严谨</strong></p></li></ul><ol start="2"><li>存储形式不同</li></ol><ul><li>js 中，数字是用 64 位浮点数的形式存储的</li><li>字符串是用类似 UTF8 的形式存储的</li></ul><p>二、存储</p><ol><li>数字的存储(十进制转二进制即可)</li></ol><ul><li><p>十进制转二进制</p><p><code>32=0*2^5+1*2^4+1*2^3+1*2^2+1*2^1+1*2^0</code> 结果为 11111</p></li><li><p>二进制转十进制</p><p>每一位乘以 2 的 N-1 次方</p></li><li><p>十六进制表示二进制</p><p>从右向左，每四位改写成一位</p></li><li><p>计算器程序员模式</p><p>HEX：16 进制 BIN：2 进制 OCT：8 进制 DEC：10 进制</p></li></ul><ol start="2"><li>如何存字符 <strong>编码</strong></li></ol><ul><li>48<del>57 表示数字符号 65</del>90 表示大写字母 97~122 表示小写字母</li><li>国标 2312 0000~ffff 表示汉字</li><li>GBK 国标扩：中日韩几乎所有汉字</li><li>Unicode 万国码：全世界通用，每个字符至少要用 3 个字节</li><li>UTF—8：Unicode 的存储方式</li></ul><h3 id="二、数据类型和运算符"><a href="#二、数据类型和运算符" class="headerlink" title="二、数据类型和运算符"></a>二、数据类型和运算符</h3><h4 id="1、数字-number"><a href="#1、数字-number" class="headerlink" title="1、数字 number"></a>1、数字 number</h4><ul><li><p>写法:</p><ul><li><p>整数写法、小数写法</p></li><li><p>科学记数法：1.23e4</p></li><li><p>八进制：0123 或 00123 或 0o123</p></li><li><p>十六进制：0x3f 或 0X3f</p></li><li><p>二进制：0b11 或 0B11</p></li></ul></li><li><p>特殊值</p><ul><li><p>正 0 和负 0 都等于 0，但不相同(做除数的时候)</p></li><li><p>无穷大：Infinity、+Infinity、-Infinity</p></li><li><p>无法表示的数字：NaN(not a number) <strong>也是一个数字</strong></p></li></ul><p>存储形式：64 位浮点数</p><ul><li>表示：第一位表示符号：0 正 1 负 中间 11 位表示指数部分（基数 2 省略） 后 52 表示有效数字(开头的 1 省略)</li><li>范围：5e-324~1.7977e308</li><li>精度：只能到 52+1 个二进制位表示的有效数字，十进制是 9 后面 15 个零，有效数字 15 位能精确表示，16 位有效数字开头两位小于 90</li></ul></li></ul><h4 id="2、字符串"><a href="#2、字符串" class="headerlink" title="2、字符串"></a>2、字符串</h4><ul><li><p>写法：</p><p>单引号：’你好’</p><p>双引号：”你好”</p><p>反引号：`你好` <strong>中间可以加回车</strong></p></li><li><p>注意：</p><p>引号不是字符串的一部分</p></li><li><p>转义：</p><ul><li><p>例：字符串 it’s ok</p><p>‘it’s ok’ 这样写会被认为’it’结束了</p><p>正确写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;it\&#x27;s ok&#x27;</span>;</span><br><span class="line"><span class="string">&quot;it&#x27;s ok&quot;</span><span class="string">`it&#x27;s ok`</span>;</span><br></pre></td></tr></table></figure></li><li><p>其他</p><p><code>\&#39;表示&#39; \&quot;表示&quot;</code></p><p><code>\n</code>换行 <code>\r</code>回车 <code>\t</code>表示 tab 制表符</p><p><code>\\</code>表示\</p><p>\uFFFF 表示对应的 Unicode 字符</p><p>\xFF 表示前 256 个 Unicode 字符</p></li></ul></li><li><p>字符串属性</p><ul><li><p>字符串的长度:string.length</p><p>\不算字符串长度，空格算在长度里，空字符串’’长度为 0</p></li><li><p>通过下标读取字符：string[index]</p><p>index 从 0 开始，length-1 结束</p></li></ul></li><li><p>base64 转码</p><ul><li><p><code>window.btoa</code>：正常字符转为 Base64 编码字符串</p></li><li><p><code>window.atob</code>：Base64 转码字符串转回原来的字符串</p></li></ul></li></ul><h4 id="3、布尔"><a href="#3、布尔" class="headerlink" title="3、布尔"></a>3、布尔</h4><ul><li><p>只有两个值：true 和 false（小写）</p></li><li><p>下列运算符会得到 bool 值</p><ul><li>否定运算 !value</li><li>相等运算 1==2、1!=2、1===2、1!==2</li><li>比较运算 1&gt;2、1&gt;=2、1&lt;2、1&lt;=2</li></ul></li><li><p>if 和 bool</p><ul><li>if 语句需要判断真假<code>if(value)&#123;...&#125;else&#123;...&#125;</code></li><li>五个 falsy 值：相当于 false 的值:<strong>undefined null 0 NaN ‘’(空字符串)</strong></li><li>注意：’’、’ ‘不一样，注意区分</li></ul></li></ul><h4 id="4、两种空类型"><a href="#4、两种空类型" class="headerlink" title="4、两种空类型"></a>4、两种空类型</h4><p>undefined 和 null</p><p>区别：</p><ul><li>没有本质区别</li><li>如果一个变量声明了，但没有赋值，默认值为 undefined，而不是 null</li><li>如果一个函数没有写 return，那么默认 returnundefined，而不是 null</li></ul><h4 id="4、symbol"><a href="#4、symbol" class="headerlink" title="4、symbol"></a>4、symbol</h4><ul><li>语法：<code>Symbol([description])</code> description 可选的字符串</li><li>直接使用<code>Symbol()</code>创建新的 symbol 类型，并用一个可选的字符串作为其描述。</li><li>详见：MDN:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol - JavaScript</a> 阮一峰:<a href="https://es6.ruanyifeng.com/#docs/symbol">ECMAScript 6 入门</a></li></ul><h4 id="5、变量声明"><a href="#5、变量声明" class="headerlink" title="5、变量声明"></a>5、变量声明</h4><ol><li><p>let 声明</p><p>规则:</p><ul><li><p>：遵循块作用域，使用范围不能超出{}</p></li><li><p>不能重复声明</p></li><li><p>可以赋值，也可以不赋值</p></li><li><p>必须先声明再使用</p></li><li><p>全局声明 let 变量，不会变成 window 的属性</p></li></ul></li><li><p>const 声明</p><p>规则和 let 基本相同。只有一点不同，const 声明时就要赋值，赋值后不能更改</p></li><li><p>声明变量</p></li></ol><ul><li>指定值 let a=1</li><li>同时指定了类型</li><li>值和类型可以随意变化</li><li>name 和’name’的区别：<ul><li>name 是变量，值可变</li><li>‘name’是字符串常量，’name’就是’name’，不能是其他值</li></ul></li><li>类型转换<ul><li>number=&gt;string: <code>String(n)</code> <code>n+&#39;&#39;</code></li><li>string=&gt;number:<code>Number(s)</code> <code>parseInt(s)/parseFloat(s)</code> <code>s-0</code></li><li>x=&gt;bool: <code>Boolea(x)</code> <code>!!x</code></li><li>x=&gt;string:<code>String(x)</code> x.toString()</li></ul></li></ul><h2 id="4、JS-对象-object"><a href="#4、JS-对象-object" class="headerlink" title="4、JS 对象 object"></a>4、JS 对象 object</h2><p>第七种数据类型，复杂类型</p><h4 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h4><ol><li><p>定义</p><ul><li>无序的数据集合</li><li>键值对的集合</li></ul></li><li><p>写法</p><ul><li><p><code>let obj = &#123; &#39;name&#39;: &#39;straight&#39;, &#39;age&#39;: 20 &#125; （简单写法）</code></p></li><li><p><code>let obj = new Object(&#123;&#39;name&#39;: &#39;frank&#39;&#125;) </code>（常规写法）</p></li><li><p><code>console.log(&#123; &#39;name&#39;: &#39;frank, &#39;age&#39;: 18 &#125;)</code></p></li><li><p><strong>注意：</strong></p><ul><li>键名是字符串，不是标识符</li><li>引号可以省略，省略之后只能写标识符</li><li><strong>就算省略了引号，键名还是字符串</strong></li><li>属性名：key 属性值：value</li></ul></li></ul></li><li><p>奇怪的属性名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">3.2</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">1e2</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="number">1e-2</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="number">.234</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="number">0xFF</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line">=&gt; [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;100&quot;</span>, <span class="string">&quot;255&quot;</span>, <span class="string">&quot;3.2&quot;</span>, <span class="string">&quot;0.01&quot;</span>, <span class="string">&quot;0.234&quot;</span>]</span><br><span class="line"><span class="comment">//如果不加引号，js会先做运算，把结果作为key</span></span><br></pre></td></tr></table></figure><p>Object.keys(obj)可以得到 obj 的所有 keys</p></li><li><p><strong>变量做属性名</strong>（重点）</p></li></ol><ul><li><p>写法：属性名+[]</p></li><li><p>对比：</p><ul><li><p>let p1 = ‘name’</p></li><li><p>let obj = { p1 : ‘ss’} 这样写，属性名为 ‘p1’</p></li><li><p>let obj = { [p1] : ‘ss’ } 这样写，属性名为 ‘name’</p></li></ul></li><li><p>注意：</p><ul><li>不加[]属性名会自动变成字符串</li><li>加了[]则会作为变量求值</li><li>值如果不是字符串，会自动变成字符串</li></ul></li></ul><p>6、变量的隐藏属性</p><ul><li><p>JS 中每一个对象都有一个隐藏属性</p></li><li><p>这个隐藏属性储存着其共有属性组成的对象（原型）的地址</p></li><li><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.toString(); <span class="comment">// 不会报错</span></span><br><span class="line"><span class="comment">//因为 obj 的隐藏属性对应的对象上有 toString()</span></span><br></pre></td></tr></table></figure></li><li><p>symbol 也能做属性名</p></li></ul><h4 id="二、对象属性的增删改查"><a href="#二、对象属性的增删改查" class="headerlink" title="二、对象属性的增删改查"></a>二、对象属性的增删改查</h4><h5 id="1、删除属性："><a href="#1、删除属性：" class="headerlink" title="1、删除属性："></a>1、删除属性：</h5><ul><li><p>语法<code>delete obj.xxx </code>或 <code>delete obj[&#39;xxx&#39;]</code></p></li><li><p><code>obj.xxx=undefined</code>是将 obj 的 xxx 属性的值改为 undefined，xxx 属性并没有删除，注意区分</p></li><li><p>是否含属性名<code>&#39;xxx&#39; in obj</code> true/false</p></li><li><p>含有属性名，且值为 undefined <code>&#39;xxx&#39; in obj &amp;&amp; obj.xxx === undefined</code></p></li><li><p><code>obj.xxx === undefined</code></p><p>不能断定 ‘xxx’ 是否为 obj 的属性</p></li></ul><h5 id="2、查看"><a href="#2、查看" class="headerlink" title="2、查看"></a>2、查看</h5><p>查看属性：</p><ul><li>查看自身所有属性：<code>Object.keys(obj)</code></li><li>查看自身属性+共有属性：<code>console.dir(obj)</code></li><li>判断一个属性是自身还是共有的 <code>obj.hasOwnProperty(&#39;toString&#39;)</code></li></ul><p>原型：</p><ul><li>每个对象都有原型，原型里存着对象的共有属性</li><li>obj 的原型就是一个对象，<code>obj.__proto__</code>存着这个对象的地址</li><li>对象的原型也是对象，所有的对象原型也有原型</li><li>obj={}的原型为所有对象的原型，包含所有对象的共有属性，是对象的根</li><li>这个原型也有原型，是 null</li></ul><p>查看属性值</p><ul><li><p>中括号：<code>obj[&#39;key&#39;]</code>（优先使用）</p></li><li><p>点语法：<code>obj.key</code></p></li><li><p>注意：<code>obj[key]</code>//变量 key 的值一般不为‘key’</p></li><li><pre><code class="js">obj.name等价于obj[&quot;name&quot;];obj.name不等价obj[name];//这里的name是字符串，而不是变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 例：</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;js</span><br><span class="line">  let list &#x3D; [&#39;name&#39;, &#39;age&#39;, &#39;gender&#39;]</span><br><span class="line">  let person &#x3D; &#123;</span><br><span class="line">         name:&#39;frank&#39;, age:18, gender:&#39;man&#39;&#125;</span><br><span class="line">  for(let i &#x3D; 0; i &lt; list.length; i++)&#123;</span><br><span class="line">    let name &#x3D; list[i]</span><br><span class="line">    console.log(person__???__)</span><br><span class="line">  &#125;</span><br><span class="line">  使得 person 的所有属性被打印出来</span><br><span class="line">  选项</span><br><span class="line">  1.console.log(person.name)</span><br><span class="line">  2.console.log(person[name])&#x2F;&#x2F;name作为变量</span><br></pre></td></tr></table></figure>##### 3、修改或增加属性</code></pre></li></ul><p>1、赋值：</p><ul><li><p>直接赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;frank&quot;</span> &#125;; <span class="comment">// name 是字符串</span></span><br><span class="line">obj.name = <span class="string">&quot;frank&quot;</span>; <span class="comment">// name 是字符串</span></span><br><span class="line">obj[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;frank&quot;</span>;</span><br><span class="line">obj[name] = <span class="string">&quot;frank&quot;</span>; <span class="comment">// 错，因 name 值不确定</span></span><br><span class="line"></span><br><span class="line">obj[<span class="string">&quot;na&quot;</span> + <span class="string">&quot;me&quot;</span>] = <span class="string">&quot;frank&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">obj[key] = <span class="string">&quot;frank&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">obj.key = <span class="string">&quot;frank&quot;</span>; <span class="comment">// 错，因为 obj.key 等价于 obj[&#x27;key&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>批量赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(obj, &#123; <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&quot;man&quot;</span> &#125;);</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>修改或增加共有属性</li></ol><ul><li><p>无法通过自身修改或增加共有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;, obj2 = &#123;&#125; <span class="comment">// 共有 toString</span></span><br><span class="line">obj.toString = <span class="string">&#x27;xxx&#x27;</span> 只会在改 obj 自身属性</span><br><span class="line">obj2.toString 还是在原型上</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改或增加原型属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.__proto__.toString = <span class="string">&quot;xxx&quot;</span>; <span class="comment">// 不推荐用 __proto__</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString = <span class="string">&quot;xxx&quot;</span>;</span><br></pre></td></tr></table></figure><p>一般来说，不要修改原型，会引起很多问题</p></li><li><p>修改隐藏属性</p><ul><li><p><code>__proto__</code> (不推荐使用)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;frank&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> common = &#123; <span class="attr">kind</span>: <span class="string">&quot;human&quot;</span> &#125;;</span><br><span class="line">obj.__proto__ = common;</span><br><span class="line">obj2.__proto__ = common;</span><br></pre></td></tr></table></figure></li><li><p>Object.create（推荐使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> common = &#123;<span class="attr">kind</span>: <span class="string">&#x27;human&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(common)</span><br><span class="line">obj.name = <span class="string">&#x27;frank&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.create(common)</span><br><span class="line">obj2.name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">规范大概的意思是，要改就一开始就改，别后来再改</span><br></pre></td></tr></table></figure><h4 id="三、对象的分类"><a href="#三、对象的分类" class="headerlink" title="三、对象的分类"></a>三、对象的分类</h4></li></ul></li></ul><h4 id="1、做一个小程序，输出正方形方形面积和周长"><a href="#1、做一个小程序，输出正方形方形面积和周长" class="headerlink" title="1、做一个小程序，输出正方形方形面积和周长"></a>1、做一个小程序，输出正方形方形面积和周长</h4><ul><li><p>一个正方形：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> square = &#123;</span><br><span class="line">  width: <span class="number">5</span>,</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>多个正方形：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = [];</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">11</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; widthList.length; i++) &#123;</span><br><span class="line">  squareList[i] = &#123;</span><br><span class="line">    width: widthList[i],</span><br><span class="line">    <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做浪费太多内存，画内存图就知道</p></li><li><p>借助原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = [];</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> squarePrototype = &#123;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">  squareList[i] = <span class="built_in">Object</span>.create(squarePrototype);</span><br><span class="line">  <span class="comment">//将squarePrototype作为__proto__创建新对象 作为squareList的第i项</span></span><br><span class="line">  squareList[i].width = widthList[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽离到函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = [];</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">width</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//构造函数</span></span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(squarePrototype);</span><br><span class="line">  <span class="comment">// 以squarePrototype为原型创建对象obj</span></span><br><span class="line">  obj.width = width;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> squarePrototype = &#123;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">  squareList[i] = createSquare(widthList[i]);</span><br><span class="line">  <span class="comment">// 创建square</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数和原型结合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = [];</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">width</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(createSquare.squarePrototype);</span><br><span class="line">  <span class="comment">//以createSquare.squarePrototype为__proto__创建obj</span></span><br><span class="line">  obj.width = width; <span class="comment">//obj的width属性，值为函数参数width</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">createSquare.squarePrototype = &#123;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">createSquare</span>, //通过原型找到构造函数</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">  squareList[i] = createSquare(widthList[i]);</span><br><span class="line">  <span class="built_in">console</span>.log(squareList[i].constructor); <span class="comment">//知道是谁构造了这个函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、new-操作符"><a href="#2、new-操作符" class="headerlink" title="2、new 操作符"></a>2、new 操作符</h4></li><li><p>函数和原型结合(重写)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareList = [];</span><br><span class="line"><span class="keyword">let</span> widthList = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">width</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line">Square.prototype.getArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">&#125;;</span><br><span class="line">Square.prototype.getLength = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">  squareList[i] = <span class="keyword">new</span> Square(widthList[i]);</span><br><span class="line">  <span class="built_in">console</span>.log(squareList[i].constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个函数都有 ProtoType 属性，和 constructor 属性</p></li><li><p>new</p><p>new x()做了哪些事情？</p><ul><li>自动创建空对象</li><li>自动为空对象关联原型，原型地址指定为 x.prototype</li><li>自动将空对象作为 this 关键字进行构造函数</li><li>自动 return this</li></ul><p>构造函数 X</p><ul><li>X 函数负责给对象本身添加属性</li><li>X.prototype 负责保存对象共有属性</li></ul><p>确定一个对象的原型</p><ul><li>对象的原型就是它构造者的 prototype 属性对应的对象</li><li>例：let obj=new Object()的原型是 Object.prototype</li><li>new 操作符为我们做了这些事情</li><li>公式：<code>对象.__proto__===其构造函数.prototype</code></li></ul></li></ul><h4 id="3、输出正方形面积周长"><a href="#3、输出正方形面积周长" class="headerlink" title="3、输出正方形面积周长"></a>3、输出正方形面积周长</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">width</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line">Square.prototype.getArea = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">&#125;;</span><br><span class="line">Square.prototype.getLength = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> Square(<span class="number">5</span>);</span><br><span class="line">square.width;</span><br><span class="line">square.getArea();</span><br><span class="line">square.getLength();</span><br></pre></td></tr></table></figure><p>如果要输出圆的面积和周长呢？</p><h4 id="4、回到最初的问题，对象需要分类吗？"><a href="#4、回到最初的问题，对象需要分类吗？" class="headerlink" title="4、回到最初的问题，对象需要分类吗？"></a>4、回到最初的问题，对象需要分类吗？</h4><p>需要。</p><p>理由：</p><ul><li>很多对象拥有一样的属性和行为，需要分为一类，如 square1 和 square2，这样可以很快创建类似对象</li><li>有很多对象拥有其他的属性和行为，就需要不同的分类，如正方形和圆就是不同的分类，Array 和 Function 也是不同的分类，Object 创建的对象是最没有特点的</li></ul><p>区分：</p><ul><li>类型：是数据的分类，7 种，四基两空一对象（number、string、布尔，symbol，null，undefined，object）</li><li>类：是针对对象的分类，有无数种（常见的 Array、Function、Date）</li></ul><p><strong>JS 终极一问</strong></p><ul><li>window 是谁构造的？ Window。可以通过 constructor 属性看出构造者</li><li>window.Object 是谁构造的？ window.Function,所有的函数都是由 window.Function 构造的</li><li>window.Function 是谁构造的？ window.Function,浏览器构造了 Function，后指定它的构造者是自己</li></ul><h4 id="5、ES6-新语法-class"><a href="#5、ES6-新语法-class" class="headerlink" title="5、ES6 新语法 class"></a>5、ES6 新语法 class</h4><ul><li><p>重写 Square</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">width</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">area2</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写圆 Circle</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">radius</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getArea</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="built_in">this</span>.radius, <span class="number">2</span>) * <span class="built_in">Math</span>.PI;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getLength</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.radius * <span class="number">2</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle(<span class="number">5</span>);</span><br><span class="line">circle.radius;</span><br><span class="line">circle.getArea();</span><br><span class="line">circle.getLength();</span><br></pre></td></tr></table></figure><h3 id="四、JS-数组"><a href="#四、JS-数组" class="headerlink" title="四、JS 数组"></a>四、JS 数组</h3></li></ul><h4 id="1、数组对象"><a href="#1、数组对象" class="headerlink" title="1、数组对象:"></a>1、数组对象:</h4><p>JS 没有真正的数组，只是用对象模拟数组</p><p>典型数组：</p><ul><li>元素的的数据类型相同</li><li>使用连续的内存存储</li><li>通过数字下标获取元素</li></ul><p>JS 数组：</p><ul><li>元素的数据类型可以不同</li><li>内存不一定是连续的（对象随机存储）</li><li>不能通过数字下标，而是字符串下标，key 有任何 key<ul><li>let arr= [1,2,3]</li><li>arr[‘xxx’]=1</li></ul></li></ul><h4 id="2、创建数组"><a href="#2、创建数组" class="headerlink" title="2、创建数组"></a>2、创建数组</h4><p>新建数组</p><ul><li><p>let arr=[1,2,3] 简写形式</p></li><li><p>let arr=new Array(1,2,3) 标准形式</p><p>let arr=new Array(3) 一个参数表示数组长度，多个参数表示数字内容</p></li></ul><p>转化：</p><ul><li>let arr=’1,2,3’.split(‘,’) 以逗号分开创建</li><li>let arr=’123’.split(‘’) 以空字符串分开创建</li><li>Array.from(‘123’) 很多时候需要有数字下标，和 length</li></ul><p>合并数组：</p><ul><li>arr1.concat(arr2)</li></ul><p>截取数组的一部分：</p><ul><li>arr1.slice(1) 从第 2 个元素开始</li><li>arr1.slice(0) 全部截取（复制数组）</li></ul><p>伪数组：</p><p>没有数组共同属性的数组</p><p>伪数组的原型链中并没有数组的原型，原型直接指向对象的原型</p><h4 id="3、删除数组元素"><a href="#3、删除数组元素" class="headerlink" title="3、删除数组元素"></a>3、删除数组元素</h4><ul><li><p>和对象一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>];</span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">0</span>];</span><br><span class="line">(arr) =&gt; [empty, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>];</span><br></pre></td></tr></table></figure><p>数组长度不会改变（稀疏数组）</p></li><li><p>直接改 length 可以？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>];</span><br><span class="line">arr.length = <span class="number">1</span>;</span><br><span class="line">(arr) =&gt; [<span class="string">&quot;1&quot;</span>];</span><br></pre></td></tr></table></figure><p>改变 length 可以删除元素。<strong>注</strong>：不要随便改 length</p></li><li><p>删元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.shift(); <span class="comment">//arr被修改，并返回被删除元素</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.pop(); <span class="comment">//arr被修改，并返回被删除元素</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(start, <span class="number">1</span>); <span class="comment">//从start位置开始，删除1个元素</span></span><br><span class="line">arr.splice(start, <span class="number">1</span>, <span class="string">&quot;x&quot;</span>); <span class="comment">//在删除位置添加&#x27;x&#x27;</span></span><br><span class="line">arr.splice(start, <span class="number">1</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>); <span class="comment">//在删除位置添加&#x27;x&#x27;,&#x27;y&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="4、查看所有元素"><a href="#4、查看所有元素" class="headerlink" title="4、查看所有元素"></a>4、查看所有元素</h4></li></ul><h5 id="查看所有属性名："><a href="#查看所有属性名：" class="headerlink" title="查看所有属性名："></a>查看所有属性名：</h5><ul><li>let arr=[1,2,3,4,5];arr.x=x 为数组添加 x 下标,值为’x’</li><li>Object,keys(arr1) 查看属性名</li></ul><h5 id="查看数字（字符串）属性名和值"><a href="#查看数字（字符串）属性名和值" class="headerlink" title="查看数字（字符串）属性名和值"></a>查看数字（字符串）属性名和值</h5><ul><li><p>for 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;i&#125;</span>:<span class="subst">$&#123;arr[i]&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>arr.forEach()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr3.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">iterm, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span>:<span class="subst">$&#123;iterm&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>原理:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">array, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    fn(array[i], i, array);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">forEach([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span> (<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>(x, y, z);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>forEach 用 for 访问 array 的每一项</p></li><li><p>对每一项调用 fn(array[i],i,array)</p></li><li><p>第三个参数为数组 array 本身</p></li></ul></li><li><p>for 循环与 forEach 的区别</p><ul><li>for 循环可以随时停止，forEach 不可以</li><li>for 块级作用域，forEach 是函数</li></ul></li></ul><h5 id="查看单个属性"><a href="#查看单个属性" class="headerlink" title="查看单个属性"></a>查看单个属性</h5><ul><li><p>跟对象一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li><li><p>索引越界</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr[arr.length] === <span class="literal">undefined</span>;</span><br><span class="line">arr[-<span class="number">1</span>] === uddefined;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i].toString());</span><br><span class="line">&#125; <span class="comment">//报错 Cannot read property &#x27;toString&#x27; of undefined</span></span><br></pre></td></tr></table></figure></li><li><p>查找某个元素是否在数组里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.indexof(item); <span class="comment">//存在返回索引，否则返回-1</span></span><br></pre></td></tr></table></figure></li><li><p>使用条件查找元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.find(<span class="function">(<span class="params">x</span>) =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>); <span class="comment">//找到第一个偶数</span></span><br></pre></td></tr></table></figure></li><li><p>条件查找元素索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.findIndex(<span class="function">(<span class="params">x</span>) =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>); <span class="comment">//找到第一个偶数索引</span></span><br></pre></td></tr></table></figure><p>5、增加数组中的元素</p></li><li><p>对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr[<span class="number">5</span>] = <span class="number">6</span>; <span class="comment">//可以修改成功，但不推荐，数组下标如果写大了，会出问题</span></span><br></pre></td></tr></table></figure></li><li><p>在尾部增加元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.push(item1,item2...)<span class="comment">//修改arr，返回新长度</span></span><br></pre></td></tr></table></figure></li><li><p>在头部增加元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.unshift(item1,item2...)<span class="comment">//修改arr，返回新长度</span></span><br></pre></td></tr></table></figure></li><li><p>在中间添加元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(start,<span class="number">0</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>...)</span><br></pre></td></tr></table></figure><p>6、修改数组中的元素</p></li><li><p>反转顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reverse(); <span class="comment">//修改原数组</span></span><br></pre></td></tr></table></figure><p>例：将字符串反转’12345’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;12345&quot;</span>.split(<span class="string">&quot;&quot;</span>).reverse().join(<span class="string">&quot;&quot;</span>); <span class="comment">// 54321</span></span><br></pre></td></tr></table></figure></li><li><p>自定义顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">//函数返回值小于0，即a-b&lt;0,a排在b之前。</span></span><br></pre></td></tr></table></figure><p>按照某个属性排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> items = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Edward&quot;</span>, <span class="attr">value</span>: <span class="number">21</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Sharpe&quot;</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;And&quot;</span>, <span class="attr">value</span>: <span class="number">45</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;The&quot;</span>, <span class="attr">value</span>: -<span class="number">12</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;Zeros&quot;</span>, <span class="attr">value</span>: <span class="number">37</span> &#125;,</span><br><span class="line">];</span><br><span class="line">items.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.value - b.value); <span class="comment">//以value值排序</span></span><br></pre></td></tr></table></figure><p>6、数组变换</p></li><li><p>map</p><p>创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(<span class="function">(<span class="params">x</span>) =&gt;</span> x * x); <span class="comment">//每个元素的平方</span></span><br></pre></td></tr></table></figure></li><li><p>filter</p><p>创建一个新数组, 其包含通过所提供函数实现的测试的所有元素 true 为通过，false 不通过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrary.filter(<span class="function">(<span class="params">x</span>) =&gt;</span> x % <span class="number">2</span> === <span class="number">1</span>); <span class="comment">//除以2余1就保留</span></span><br></pre></td></tr></table></figure></li><li><p>reduce（重点）</p><p>对数组中的每个元素执行一个由您提供的函数 Arrayarray，将其结果汇总为单个返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.reduce(<span class="function">(<span class="params">sum, x</span>) =&gt;</span> sum + x, <span class="number">0</span>); <span class="comment">//计算数组铬元素之和</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (y % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x.concat(y);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, []); <span class="comment">//把arr中所有偶数汇总为一个新的数组</span></span><br></pre></td></tr></table></figure><p>可以改写为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x.concat(y % <span class="number">2</span> === <span class="number">0</span> ? y : []);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure></li></ul><p><strong>例子：</strong>数据变换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; 名称: <span class="string">&quot;动物 &quot;</span>, <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">parent</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  &#123; 名称: <span class="string">&quot;狗&quot;</span>, <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">parent</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; 名称: <span class="string">&quot;猫&quot;</span>, <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">parent</span>: <span class="number">1</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>将数组变成对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">id: <span class="number">1</span>, : 名称<span class="string">&#x27;动物 &#x27;</span>, <span class="attr">children</span>: [</span><br><span class="line">&#123;<span class="attr">id</span>: <span class="number">2</span>, 名称: <span class="string">&#x27;狗 &#x27;</span>, <span class="attr">children</span>: <span class="literal">null</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>: <span class="number">3</span>, 名称: <span class="string">&#x27; 猫&#x27;</span>, <span class="attr">children</span>: <span class="literal">null</span>&#125;,</span><br><span class="line">] &#125;</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(</span><br><span class="line">  (result, item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.parent === <span class="literal">null</span>) &#123;</span><br><span class="line">      result.id = item.id;</span><br><span class="line">      result[<span class="string">&quot;名称&quot;</span>] = item[<span class="string">&quot;名称&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.children.push(item);</span><br><span class="line">      <span class="keyword">delete</span> item.parent;</span><br><span class="line">      item.children = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="literal">null</span>, <span class="attr">children</span>: [] &#125; <span class="comment">//初始化id、children</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="五、JS-函数"><a href="#五、JS-函数" class="headerlink" title="五、JS 函数"></a>五、JS 函数</h3><p>函数也是对象</p><h4 id="1、定义函数："><a href="#1、定义函数：" class="headerlink" title="1、定义函数："></a>1、定义函数：</h4><p>1、具名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形式参数<span class="number">1</span>，形式参数<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">语句</span><br><span class="line"><span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、匿名函数</p><ul><li>具名函数去掉函数名，就是匿名函数,也叫函数表达式</li><li><code>let a=function(x,y)&#123;return x+y&#125;</code></li></ul><p>3、箭头函数</p><ul><li><code>let f1=x=&gt;x*x</code></li><li><code>let f2=(x,y)=&gt;x+y</code> 圆括号不能省略</li><li><code>let f3=(x,y)=&gt;&#123;return x+y&#125;</code> 花括号不能省略</li><li><code>let f4=(x,y)=&gt;(&#123;name:x,age:y&#125;)</code> 直接返回会出错，需要加个圆括号</li></ul><p>4、用构造函数</p><ul><li>let f=new Function(‘x’,’y’,’return x+y’)</li><li>基本没人用，但是知道函数是由谁构造的</li><li>所有函数都是由 Function 构造出来的，包括 Object、Array、Function</li></ul><h4 id="2、函数自身和函数调用（fn-fn-）"><a href="#2、函数自身和函数调用（fn-fn-）" class="headerlink" title="2、函数自身和函数调用（fn / fn()）"></a>2、函数自身和函数调用（fn / fn()）</h4><p>1、函数自身</p><ul><li><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">fn;</span><br></pre></td></tr></table></figure></li><li><p>不会有任何结果，因为 fn 没有执行</p></li></ul><p>2、函数调用：</p><ul><li><p>```js<br>let fn = () =&gt; console.log(“hi”);<br>fn();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 结果：打印出&#39;hi&#39;，有圆括号才是调用</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;js</span><br><span class="line">  let fn &#x3D; () &#x3D;&gt; console.log(&quot;hi&quot;);</span><br><span class="line">  let fn2 &#x3D; fn;</span><br><span class="line">  fn2();</span><br></pre></td></tr></table></figure></li><li><p>结果：fn 保存了匿名函数的地址，将这个地址被复制给 fn2，fn2() 调用了匿名函数</p></li><li><p>fn 和 fn2 都是匿名函数的引用而已，真正的函数既不是 fn 也不是 fn2</p></li></ul><h4 id="3、函数的要素"><a href="#3、函数的要素" class="headerlink" title="3、函数的要素"></a>3、函数的要素</h4><h5 id="一、调用时机：就近原则"><a href="#一、调用时机：就近原则" class="headerlink" title="一、调用时机：就近原则"></a>一、调用时机：就近原则</h5><ul><li><p>```js<br>let a = 1;<br>function fn() {<br>  console.log(a);<br>}</p><p>fn();<br>a = 2; //打印出1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;js</span><br><span class="line">  let a &#x3D; 1;</span><br><span class="line">  function fn() &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      console.log(a);</span><br><span class="line">    &#125;, 0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn();</span><br><span class="line">  a &#x3D; 2; &#x2F;&#x2F;打印出2</span><br></pre></td></tr></table></figure></li><li><pre><code class="js">let i = 0;for (i = 0; i &lt; 6; i++) &#123;  setTimeout(() =&gt; &#123;    console.log(i);  &#125;, 0);&#125; //打印出 6个6  而不是0、1、2、3、4、5<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;js</span><br><span class="line">  for (let i &#x3D; 0; i &lt; 6; i++) &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      console.log(i);</span><br><span class="line">    &#125;, 0);</span><br><span class="line">  &#125; &#x2F;&#x2F; 打印出0、1、2、3、4、5   for循环配合let</span><br></pre></td></tr></table></figure>##### 二、作用域</code></pre></li><li><p>```js<br>function fn() {<br>  let a = 1;<br>}<br>console.log(a); //不存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  作用域在大括号之间</span><br><span class="line"></span><br><span class="line">- 全局变量和局部变量：在顶级作用域声明的变量是全局变量，window 的属性是全局变量，其他都是局部变量</span><br><span class="line"></span><br><span class="line">- 函数嵌套（作用域）</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;js</span><br><span class="line">  function f1() &#123;</span><br><span class="line">    let a &#x3D; 1;</span><br><span class="line">    function f2() &#123;</span><br><span class="line">      let a &#x3D; 2;</span><br><span class="line">      function f3() &#123;</span><br><span class="line">        console.log(a); &#x2F;&#x2F;打印出22</span><br><span class="line">      &#125;</span><br><span class="line">      a &#x3D; 22;</span><br><span class="line">      f3();</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(a); &#x2F;&#x2F; 打印出1</span><br><span class="line">    a &#x3D; 100;</span><br><span class="line">    f2();</span><br><span class="line">  &#125;</span><br><span class="line">  f1();</span><br></pre></td></tr></table></figure></li><li><p>作用域规则：</p><p>如果多个作用域有同名变量，那么查找 a 的声明时，就向上取最近的作用域，查找 a 的过程与函数执行无关，但 a 的值与函数执行有关</p></li></ul><h5 id="三、闭包"><a href="#三、闭包" class="headerlink" title="三、闭包"></a>三、闭包</h5><p>如果如果一个函数用到了外部的变量，那么这个函数加这个变量</p><p>就叫做闭包，上面的 a 和 f3 组成了闭包</p><h5 id="四、形式参数"><a href="#四、形式参数" class="headerlink" title="四、形式参数"></a>四、形式参数</h5><ul><li><p>形式参数并不是实际的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其中 x 和 y 就是形参，因为并不是实际的参数</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 调用 add 时，1 和 2 是实际参数，会被赋值给 x y</span></span><br></pre></td></tr></table></figure></li><li><p>形参可认为是变量声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等同于上面代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>形参可多可少，只是给参数取名字</p></li></ul><h5 id="五、返回值"><a href="#五、返回值" class="headerlink" title="五、返回值"></a>五、返回值</h5><ul><li><p>每个函数都有返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">hi();</span><br></pre></td></tr></table></figure><p>没写 return，所以返回值是 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">hi();</span><br></pre></td></tr></table></figure><p>返回值为 console.log(‘hi’) 的值，即 undefined</p></li><li><p>函数执行完了才会返回，只有函数才有函数返回值</p></li></ul><h5 id="六、调用栈"><a href="#六、调用栈" class="headerlink" title="六、调用栈"></a>六、调用栈</h5><p>1、什么是调用栈？</p><p>JS 引擎在调用一个函数前，需要把函数所在的环境 push 到一个数组里，这个数组叫做调用栈，等函数执行完了，就会把环境弹(pop)出来，然后 return 到之前的环境，继续执行后续代码</p><p>2、递归函数</p><ul><li><p>阶乘：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n !== <span class="number">1</span> ? n * f(n - <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>理解：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f(4)</span><br><span class="line">&#x3D; 4 * f(3)</span><br><span class="line">&#x3D; 4 * (3 * f(2))</span><br><span class="line">&#x3D; 4 * (3 * (2 * f(1)))</span><br><span class="line">&#x3D; 4 * (3 * (2 * (1)))</span><br><span class="line">&#x3D; 4 * (3 * (2))</span><br><span class="line">&#x3D; 4 * (6)</span><br><span class="line">24</span><br><span class="line">先递进，再回归</span><br></pre></td></tr></table></figure></li><li><p>递归函数的调用栈很长</p></li><li><p>调用栈上限:浏览器上限，调用栈中压入帧过多，程序会崩溃（爆栈）</p></li></ul><h5 id="七、函数提升"><a href="#七、函数提升" class="headerlink" title="七、函数提升"></a>七、函数提升</h5><ol><li>什么是函数提升？ <code>üfunction fn()&#123;&#125;</code> 不管你把具名函数声明在哪里，它都会跑到第一行</li><li><code>let fn = function()&#123;&#125;</code> 这是赋值，右边的匿名函数声明不会提升</li></ol><h5 id="八、arguments-和-this（除了箭头函数）"><a href="#八、arguments-和-this（除了箭头函数）" class="headerlink" title="八、arguments 和 this（除了箭头函数）"></a>八、arguments 和 this（除了箭头函数）</h5><ul><li><p>每个函数都有，除了箭头函数</p></li><li><p>```js<br>function fn() {<br>  console.log(arguments);<br>  console.log(this);<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 如何传 arguments? 调用 fn 即可传 arguments，&#96;fn(1,2,3)&#96; 那么 arguments 就是 [1,2,3] 伪数组</span><br><span class="line"></span><br><span class="line">- 如何传 this? 目前可以用 fn.call(xxx, 1,2,3) 传 this 和 arguments,而且 xxx 会被自动转化成对象</span><br><span class="line"></span><br><span class="line">- this 的两种使用方法</span><br><span class="line"></span><br><span class="line">  - 隐式传递</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;js</span><br><span class="line">    fn(1, 2); &#x2F;&#x2F; 等价于 fn.call(undefined, 1, 2)</span><br><span class="line">    obj.child.fn(1); &#x2F;&#x2F; 等价于 obj.child.fn.call(obj.child, 1)</span><br></pre></td></tr></table></figure><ul><li><p>显示传递（推荐使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fn.call(<span class="literal">undefined</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">fn.apply(<span class="literal">undefined</span>, [<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>绑定 this：使用 .bind 可以让 this 不被改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">p1, p2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>, p1, p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f2 = f1.bind(&#123; <span class="attr">name</span>: <span class="string">&quot;frank&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// 那么 f2 就是 f1 绑定了 this 之后的新函数</span></span><br><span class="line">f2(); <span class="comment">// 等价于 f1.call(&#123;name:&#x27;frank&#x27;&#125;)</span></span><br></pre></td></tr></table></figure><h5 id="九、箭头函数（没有-arguments-和-this）"><a href="#九、箭头函数（没有-arguments-和-this）" class="headerlink" title="九、箭头函数（没有 arguments 和 this）"></a>九、箭头函数（没有 arguments 和 this）</h5></li><li><p>里面的 this 就是外面的 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">fn(); <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p>•就算你加 call 都没有</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn.call(&#123; <span class="attr">name</span>: <span class="string">&quot;frank&quot;</span> &#125;); <span class="comment">// window</span></span><br></pre></td></tr></table></figure><h5 id="十、立即执行函数"><a href="#十、立即执行函数" class="headerlink" title="十、立即执行函数"></a>十、立即执行函数</h5></li></ul><p>只要在匿名函数前面加个运算符即可让函数立即执行，!、~、()、+、- 都可以，但有些运算符会往上做运算，推荐！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、JavaScript-概述&quot;&gt;&lt;a href=&quot;#1、JavaScript-概述&quot; class=&quot;headerlink&quot; title=&quot;1、JavaScript 概述&quot;&gt;&lt;/a&gt;1、JavaScript 概述&lt;/h2&gt;&lt;p&gt;查看代码行数：&lt;/p&gt;
&lt;p&gt;yar</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>四、HTTP</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/4%E3%80%81HTTP/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/4%E3%80%81HTTP/</id>
    <published>2021-02-19T03:35:19.137Z</published>
    <updated>2021-02-19T03:35:19.137Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、IP-Internet-Protocol-网际互联协议"><a href="#1、IP-Internet-Protocol-网际互联协议" class="headerlink" title="1、IP(Internet Protocol)网际互联协议"></a>1、IP(Internet Protocol)网际互联协议</h3><p>IP 主要约定两件事：</p><ul><li>如何定位一台设备</li><li>如何封装数据报文，以跟其他设备交流</li></ul><p>1、外网 IP 和内网 IP</p><ul><li>租用宽带，连接路由器，就会有一个<strong>外网 IP</strong>（重启路由器，可能会重新分配）</li><li>路由器创建内网，内网中的设备使用内网 IP，一般格式是 192.168.X.X</li></ul><p>2、路由器</p><ul><li>路由器有一个内网 IP、一个外网 IP</li><li>内网中的设备可以互相访问，但不能直接访问外网，需经过路由器中转</li><li>外网中的设备可以互相访问，但无法访问你的内网，访问也必须结果路由器</li><li>内网外网互相隔绝，唯一联通的点就是路由器，也被叫做<strong>网关</strong></li></ul><p>特殊的 IP：</p><p>127.0.0.1 表示自己</p><p>localhost 通过 hosts 指定为自己（可以编辑 hosts 自定义）</p><p>0.0.0.0 不表示任何设备</p><h3 id="2、端口-Port"><a href="#2、端口-Port" class="headerlink" title="2、端口 Port"></a>2、端口 Port</h3><p>一台机器可以提供不同服务</p><ul><li>HTTP 服务最好使用 80 端口</li><li>https 服务使用 443 端口</li><li>ftp 服务使用 21 端口</li><li>一共 65535 个端口</li></ul><p>端口使用规则：</p><ul><li>0~1023 号端口是留给系统使用的端口，只有拥有管理员权限才能使用</li><li>其他端口普通用户可以使用，如 http-server 默认使用 8080 端口（http-server -c -1 -p 1234 把端口改为 1234）</li><li>一个端口如果被占用，只能换一个端口</li></ul><p><strong>端口和 IP 缺一不可</strong></p><h3 id="3、域名"><a href="#3、域名" class="headerlink" title="3、域名"></a>3、域名</h3><ul><li><p>域名就是对 IP 的别称</p><p>ping 命令 <code>ping baidu.com</code> （对应百度的 IP）</p><p>一个域名可以对应不同的 IP，均衡负载</p><p>一个 IP 可以对应不同域名，共享主机</p></li><li><p>域名和 IP 是如何对应的呢？ DNS（<strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem）</p><p>过程：</p><ol><li><p>当你输入域名，浏览器会向网络运营商的<strong>DNS 服务器</strong>询问对应的 IP</p><p>nslookup 命令 <code>nslookup baidu.com</code> 得到百度的 IP 地址</p></li><li><p>浏览器向对应的 IP 的 <strong>80/443 端口</strong> 发送请求</p></li><li><p>请求内容是查看域名首页。</p></li></ol><p>服务器默认<strong>80 端口</strong>提供 HTTP 服务，<strong>443 端口</strong>提供 https 服务（开发者工具可以看到具体的端口）</p><p>域名级别：</p><p>顶级域名：.com</p><p>二级域名：xxx.com 俗称一级域名</p><p>三级域名：<a href="http://www.xxx.com/">www.xxx.com</a> 俗称二级域名 （是 xxx.com 的子域名)</p></li><li><p>域名级别：</p><p>顶级域名：.com</p><p>二级域名：xxx.com 俗称一级域名</p><p>三级域名：<a href="http://www.xxx.com/">www.xxx.com</a> 俗称二级域名 （是 xxx.com 的子域名)</p></li><li><p>请求不同的页面，使用<strong>路径</strong></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">https://developer.mozilla.org/zh-CN/docs/Web/HTML</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">https://developer.mozilla.org/zh-CN/docs/Web/CSS</a></p></li><li><p>同一个页面不同内容，使用<strong>查询参数</strong></p><p><a href="https://www.baidu.com/s?wd=hi">https://www.baidu.com/s?wd=hi</a> （&amp;pn=10 可以确定页数)</p><p><a href="https://www.baidu.com/s?wd=hello">https://www.baidu.com/s?wd=hello</a></p></li><li><p>同一个内容，不同位置 使用<strong>锚点</strong></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E5%8F%82%E8%80%83%E4%B9%A6">https://developer.mozilla.org/zh-CN/docs/Web/CSS#参考书</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E6%95%99%E7%A8%8B">https://developer.mozilla.org/zh-CN/docs/Web/CSS#教程</a></p><p>锚点看起来有中文，其实不支持中文，上述链接会变成</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E5%8F%82%E8%80%83%E4%B9%A6">https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E5%8F%82%E8%80%83%E4%B9%A6</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E6%95%99%E7%A8%8B">https://developer.mozilla.org/zh-CN/docs/Web/CSS#%E6%95%99%E7%A8%8B</a></p><p>锚点无法在 Network 面板看到，因为锚点不会传给服务器</p></li></ul><h4 id="4、URL"><a href="#4、URL" class="headerlink" title="4、URL"></a>4、URL</h4><p><strong>统一资源定位符（</strong>Uniform Resource Locator<strong>）</strong>：协议+域名或 IP+端口号+路径+查询字符串+锚点</p><p><img src="/Straight-GZ/2021/02/19/4%E3%80%81HTTP/桌面\images\url.png" alt="image-20201012155755699"></p><p>https 端口为默认为 443；</p><h3 id="4、HTTP"><a href="#4、HTTP" class="headerlink" title="4、HTTP"></a>4、HTTP</h3><p>基于 TCP 和 IP 两个协议</p><p>一、curl 命令</p><p>用 curl 可以发 HTTP 请求</p><ul><li><p>curl -v <a href="http://baidu.com/">http://baidu.com</a></p></li><li><p>curl -s -v <a href="https://www.baidu.com/">https://www.baidu.com</a></p></li></ul><p>注：</p><ul><li>url 会被 curl 工具重写，先请求 DNS 获得 IP</li><li>先进行 TCP 链接，TCP 连接成功后，发送 HTTP 请求</li><li>请求、响应结束后，关闭 TCP 连接（看不出来），真正结束。</li></ul><p>二、请求与响应</p><p><strong>请求与响应模型</strong></p><p><img src="/Straight-GZ/2021/02/19/4%E3%80%81HTTP/Users\Crystal\AppData\Roaming\Typora\typora-user-images\image-20201013085810028.png" alt="image-20201013085810028"></p><h4 id="1、如何发送请求？"><a href="#1、如何发送请求？" class="headerlink" title="1、如何发送请求？"></a>1、如何发送请求？</h4><p>方法：</p><ul><li><p>用 chrome 地址栏</p></li><li><p>用 curl 命令</p></li></ul><p>概念：帮你发请求的工具叫“用户代理” 英文名 User Agent</p><h4 id="2、如何做出一个响应"><a href="#2、如何做出一个响应" class="headerlink" title="2、如何做出一个响应?"></a>2、如何做出一个响应?</h4><ul><li><p>方法：使用编程 node.js 中 http 模块可以做到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;有个傻子发请求过来啦！路径（带查询参数）为：&quot;</span> + pathWithQuery);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (path === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">  response.statusCode = <span class="number">200</span>;</span><br><span class="line">  response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">  response.write(<span class="string">`二哈`</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&quot;/x&quot;</span>) &#123;</span><br><span class="line">  response.statusCode = <span class="number">200</span>;</span><br><span class="line">  response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/css;charset=utf-8&quot;</span>);</span><br><span class="line">  response.write(<span class="string">`body&#123;color: red;&#125;`</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  response.statusCode = <span class="number">404</span>;</span><br><span class="line">  response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">  response.write(<span class="string">`你输入的路径不存在对应的内容`</span>);</span><br><span class="line">  response.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li>代码是服务器代码，一般放在服务器上</li><li>path 是不带查询参数的路径</li><li>query 是查询参数的对象形式{a:’1’}</li><li>queryString 是带查询参数的路径，一般不用</li><li>request 是请求对象 response 是响应对象</li><li>不同的符号<img src="/Straight-GZ/2021/02/19/4%E3%80%81HTTP/Users\Crystal\AppData\Roaming\Typora\typora-user-images\image-20201013091317073.png" alt="image-20201013091317073"></li></ol></li><li><p>代码逻辑</p><ol><li><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#96;这种字符串&#96;可以回车</span><br><span class="line">&#39;这种字符串&#39;要回车只能用\n表示</span><br></pre></td></tr></table></figure></li><li><p>逻辑</p><ul><li>每次收到请求，都会执行一遍代码</li><li>用 if else 判断路径，并返回响应</li><li>如果是已知路径，一律返回 200；未知路径，一律返回 404</li><li>Content-Type 表示内容的[类型/语法]</li><li>response.write()可以填写返回内容</li><li>response.end()表示响应可以发给用户了</li></ul></li><li><p>注意事项：</p></li></ol><ul><li><p>URL 里的后缀没用，/y.css 里的内容不一定是 CSS 内容</p></li><li><p>Content-Type 才是决定文件类型的关键</p></li></ul></li></ul><h4 id="3、HTTP-基础概念"><a href="#3、HTTP-基础概念" class="headerlink" title="3、HTTP 基础概念"></a>3、HTTP 基础概念</h4><ul><li><p><strong>请求</strong></p><ul><li><p>内容</p><ol><li><strong>请求动词 路径加查询参数 协议名/版本</strong></li><li>host:域名或 IP</li><li>Accept:text/html</li><li>Content-Type:请求体的格式</li><li>回车</li><li>请求体</li></ol></li><li><p>细节：</p><ol><li>三部分：请求行(1)、请求头(2~4)、请求体(6)</li><li>请求动词有 GET/POST/PUT/PATCH/DELETE 等</li><li>请求体在 GET 请求中一般为空</li><li>标准文档 RFC2612 第五章</li><li>大小写不敏感</li></ol></li></ul></li><li><p><strong>响应</strong></p><ul><li><p>内容</p><ol><li>协议名/版本 状态码 状态字符串</li><li>Content-Type：响应体的格式</li><li>回车</li><li>响应体（下载内容）</li></ol></li><li><p>细节：</p><ol><li>三部分：状态行（1）、响应行（2）、响应体</li><li>常见的状态码</li><li>文档位于 　 RFC2612 第六章</li></ol></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、IP-Internet-Protocol-网际互联协议&quot;&gt;&lt;a href=&quot;#1、IP-Internet-Protocol-网际互联协议&quot; class=&quot;headerlink&quot; title=&quot;1、IP(Internet Protocol)网际互联协议&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>三、CSS</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/3%E3%80%81CSS/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/3%E3%80%81CSS/</id>
    <published>2021-02-19T03:35:19.113Z</published>
    <updated>2021-02-19T03:35:19.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、CSS-基础概念："><a href="#1、CSS-基础概念：" class="headerlink" title="1、CSS 基础概念："></a>1、CSS 基础概念：</h2><h3 id="一、css-简介："><a href="#一、css-简介：" class="headerlink" title="一、css 简介："></a>一、css 简介：</h3><p>1、CSS，英文全称：Cascading Style Sheets，由李爵士的挪威同事赖先生（Håkon Wium Lie）于 1994 年首先提出。</p><p>标准的制定者：W3C。搜索 CSS spec 可以找到 CSS 最新标准。</p><p>2、层叠指什么？</p><ul><li><p>样式层叠：可以的多次对同一个选择器进行样式声明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择器层叠：可以用不同的选择器对同一个元素进行样式声明</p></li><li><p>文件层叠：可以用多个文件进行层叠</p></li></ul><p><strong>这些特性使得 CSS 极具灵活性</strong></p><p>3、版本：</p><ul><li>CSS2.1，2004~2011 年，是目前使用最为广泛的版本（IE 支持）</li><li>CSS3，1999 年起草，现代版本、分模块（IE8 部分支持）</li><li>CSS3 之后，分模块各自升级</li></ul><p>4、caniuse.com：查看浏览器支持特性。</p><h3 id="二、语法："><a href="#二、语法：" class="headerlink" title="二、语法："></a>二、语法：</h3><p>1、语法一：样式语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line"></span><br><span class="line">​属性名:属性值;</span><br><span class="line"></span><br><span class="line">​<span class="comment">/*注释*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>符号都是英文符号，</li><li>区分大小写，a 和 A 完全不同</li><li>没有//注释</li><li>最后一个分号可以省略，不建议省略</li><li>任何地方写错浏览器不会报错，会直接忽略</li></ul><p>语法二：at 语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> url(<span class="number">2</span>.css);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">100px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">200px</span>)&#123;</span><br><span class="line"></span><br><span class="line">​语法一</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li><code>@charset</code>必须放在第一行</li><li>前两个 at 语法必须以分号;结尾</li><li>@media 语法</li><li><code>charset</code>是字符集的意思，但 UTF-8 是字符编码 encoding，是历史遗留问题</li></ul><h3 id="三、调试-CSS"><a href="#三、调试-CSS" class="headerlink" title="三、调试 CSS"></a>三、调试 CSS</h3><p>1、方法</p><p>vscode 看颜色</p><p>webstorm 看颜色</p><p>开发者工具看警告</p><p>2、开发者工具的使用</p><ul><li>找到标签</li><li>看它是否有选择器</li><li>看它的样式有没有被划掉</li><li>看它的样式是否有警告</li></ul><p>3、border 调试法</p><p>步骤：</p><ul><li>怀疑某个元素有问题，就给这个元素加 border</li><li>border 没出现，说明选择器或者语法错了</li><li>border 出现了，看看边界是否符合预期</li><li>bug 解决了把 border 删掉</li></ul><h3 id="四、基础概念："><a href="#四、基础概念：" class="headerlink" title="四、基础概念："></a>四、基础概念：</h3><h4 id="1、文档流-Normal-Flow"><a href="#1、文档流-Normal-Flow" class="headerlink" title="1、文档流 Normal Flow"></a>1、文档流 Normal Flow</h4><p>流动方向：</p><ul><li>inline 元素从左到右，到达最右边才会换行</li><li>block 元素从上到下，每一个都另起一行</li><li>inline-block 也是从左到右（换行元素不会跨两行）</li></ul><p>宽度:</p><ul><li>inline 宽度为内部 inline 元素的和，不能用 width 指定</li><li>block 默认自动计算宽度，可用 width 指定（默认为 auto，几乎不写<code>width：100%</code>）</li><li>inline-block 结合前两者特点，可用 width</li></ul><p>高度：</p><ul><li>inline 高度由 line-height 间接确定，跟 height 无关</li><li>block 高度由内部文档流元素决定，可以设置 height</li><li>inline-block 跟 block 类似，可以设置 height</li></ul><p>overflow 溢出：</p><ul><li>内容的宽度或高度大于容器，会溢出</li><li>可以使用 overflow 来设置是否显示滚动条<ul><li>auto 灵活设置</li><li>scroll 永远显示</li><li>hidden 直接隐藏溢出部分</li><li>visible 直接显示溢出部分</li></ul></li></ul><p>脱离文档流：</p><ul><li>float</li><li>position： absolute/fixed</li></ul><h4 id="2、盒模型"><a href="#2、盒模型" class="headerlink" title="2、盒模型"></a>2、盒模型</h4><p>两种：</p><p>content-box 内容盒—内容就是盒子的边界</p><p>border-box 边框盒—边框才是盒子的边界</p><p>公式：</p><p>content-box width=内容宽度</p><p>border-box width=内容宽度+padding+border</p><p>哪个好用?</p><p>border-box</p><p><img src="/Straight-GZ/2021/02/19/3%E3%80%81CSS/Users\Crystal\Music\盒模型.png" alt="image-20201007215036202"></p><h4 id="3、margin-合并"><a href="#3、margin-合并" class="headerlink" title="3、margin 合并"></a>3、margin 合并</h4><p>合并的情况：</p><ul><li><p>父子 margin 合并：</p><p>父元素与第一个子元素上外边距合并，与最后一个子元素下外边距合并，取大的值</p><p>前提是：没有内容将父级元素和子元素隔开，没有 border、padding、行内内容。</p><p>取消合并：<code>overflow：hidden</code> <code>dispaly:flex</code></p></li><li><p>兄弟 margin 合并：</p><p>重叠的部分合并，取大值</p><p>可以用 inline-block 取消合并</p></li></ul><p><strong>margin 合并只合并上下外边距，不合并左右外边距</strong></p><p>基本单位：</p><p>长度单位：</p><ul><li>px 像素</li><li>em 相对于自身 font-size 的倍数</li><li>百分数</li><li>整数</li><li>rem</li><li>vw 和 vh</li></ul><p>颜色：</p><p>十六进制：#ff6600 或者 #f60 #ff660000 最后两位表示 a 透明度</p><p>rgba：颜色 rgb(0,0,0) 或者 rgba(0,0,0,1) a 表示透明度</p><p>hsl：hsl(360,100%,100%) 或者 hsla(360,100%,100%,100%)</p><h2 id="2、布局"><a href="#2、布局" class="headerlink" title="2、布局"></a>2、布局</h2><h3 id="一、布局概述"><a href="#一、布局概述" class="headerlink" title="一、布局概述"></a>一、布局概述</h3><p>布局就是把页面分成一块一块，按左中右、上中下等排列。</p><p>1、布局分类：</p><ul><li><strong>固定宽度布局</strong>，一般为 960/1000/1024px</li><li><strong>不固定布局</strong>，主要靠文档流的原理来布局（文档流是自适应，不需要加额外样式）</li><li><strong>响应式布局</strong>，PC 上固定宽度，手机不固定宽度，混合布局</li></ul><p>2、布局思路</p><p>从大到小：先定下大局，然后完善每个部分的小布局</p><p>从小到大：先完成小布局，然后组合成大布局（新手推荐）</p><p><img src="/Straight-GZ/2021/02/19/3%E3%80%81CSS/桌面\images\布局.png" alt="image-20201008104840623"></p><h3 id="二、float-布局"><a href="#二、float-布局" class="headerlink" title="二、float 布局"></a>二、float 布局</h3><p>步骤：</p><ul><li><p>在子元素上加 float:left 和 width</p></li><li><p>在父元素上加.clearfix（不要忘了加）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经验：</p></li><li><p>留一些空间或者最后一个不设 width，或者设置一个最大宽度</p></li><li><p>不需要做响应式，float 是为 IE 准备的</p></li><li><p>IE6/7 存在双倍 margin bug</p></li></ul><p>实践：</p><ul><li>float 两栏布局（顶部条）：<code>float:left; </code> <code>clearfix</code></li><li>float 三栏布局（内容区）</li><li>float 四栏布局（导航栏）</li><li>float 平均布局（产品展示）需要在内容外再加一层，使用负 margin</li></ul><p>经验：</p><ul><li>加上头尾，即可满足 PC 页面需求</li><li>手机页面不用 float</li><li>float 需要自己计算宽度，不灵活</li><li>应付 IE 足以</li></ul><h3 id="三、flex-布局"><a href="#三、flex-布局" class="headerlink" title="三、flex 布局"></a>三、flex 布局</h3><p>1、容器：container</p><ul><li><p>让一个元素变成 flex 容器:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/* or inline-flex (行内flex)*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>改变 items 流动方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reserve | column | column-reserve;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>row:文本方向相同 row-reserve：文本方向相同，置换起点和终点</p><p>column：文本方向相反 column-reserve：文本方向相反，置换起点和终点</p></li><li><p>改变折行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主轴对齐方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flex-start：从行首开始排列 flex-end：从行尾开始排列 center：居中</p><p>space-between：元素间距离相同，第一个在行首，最后一个在行尾</p><p>space-around:相邻元素距离相同，首个元素距行首位置和最后一个元素距行尾位置是<strong>相邻元素距离的一半</strong></p><p>space-evenly：均匀分配，首个元素距行首位置和最后一个元素距行尾位置和<strong>相邻元素距离相同</strong></p></li><li><p>次轴对齐方式：默认次轴是纵轴</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch |flex-start | flex-end | center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stretch：次轴方向被拉伸到与容器同等宽度</p></li><li><p>多行内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stretch:拉伸所有行填满剩余空间，剩余空间平均分给每一行</p></li></ul><p>项：items</p><ul><li>order：规定每一项的顺序 默认为 0</li><li>flex-grow:增长系数。控制如何变胖 默认为 0</li><li>flex-shrink：收缩规则。控制如何变瘦。0 防止变瘦，默认是 1</li><li>flex-basis：控制基准宽度，默认为 auto</li><li>flex： flex-grow flex-shrink flex-basis 缩写，空格隔开</li><li>align-self</li></ul><h3 id="四、Grid-布局"><a href="#四、Grid-布局" class="headerlink" title="四、Grid 布局"></a>四、Grid 布局</h3><p>1、container</p><ul><li><p>成为 container</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/* or inline-flex (行内flex)*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>行和列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">40px</span> <span class="number">50px</span> auto <span class="number">50px</span> <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">25%</span> <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Straight-GZ/2021/02/19/3%E3%80%81CSS/桌面\grid.png" alt="image-20201009211428577"></p></li><li><p>给每条线取名字：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>:</span><br><span class="line">    [first] <span class="number">40px</span> [line2] <span class="number">50px</span> [line3] auto</span><br><span class="line">    [col4-start] <span class="number">50px</span> [five] <span class="number">40px</span> [end];</span><br><span class="line">  <span class="attribute">grid-template-rows</span>:</span><br><span class="line">    [row1-start] <span class="number">25%</span> [row1-end] <span class="number">100px</span> [third-line]</span><br><span class="line">    auto [last-line];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>items 可以设置范围</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: five;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: row1-start;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>fr（free space） 份 可以和像素混用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">50px</span> <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分区 grid-template-areas</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-areas</span>:</span><br><span class="line">  &quot;<span class="selector-tag">head</span> <span class="selector-tag">head</span>&quot;</span><br><span class="line">  &quot;<span class="selector-tag">nav</span>  <span class="selector-tag">main</span>&quot;</span><br><span class="line">  &quot;<span class="selector-tag">nav</span>  <span class="selector-tag">foot</span>&quot;; <span class="comment">/* 区域划分 当前为 三行 两列 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page</span> &gt; <span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: head; <span class="comment">/*  指定当前元素所在的区域位置, 从grid-template-areas选取值 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#8ca0ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、CSS-定位"><a href="#五、CSS-定位" class="headerlink" title="五、CSS 定位"></a>五、CSS 定位</h3></li></ul><p>布局是屏幕平面上的，<strong>定位是垂直于屏幕的</strong></p><h4 id="1、盒模型："><a href="#1、盒模型：" class="headerlink" title="1、盒模型："></a>1、盒模型：</h4><p><img src="/Straight-GZ/2021/02/19/3%E3%80%81CSS/桌面\images\盒模型1.png" alt="image-20201009222315075"></p><ul><li>背景的范围：border<strong>外边沿</strong>围城的区域（包括 border）</li><li>从左边看 div：background 在文字后面</li></ul><h4 id="2、div-的分层："><a href="#2、div-的分层：" class="headerlink" title="2、div 的分层："></a>2、div 的分层：<img src="/Straight-GZ/2021/02/19/3%E3%80%81CSS/桌面\images\分层.png" alt="image-20201009222803054"></h4><p>浮动元素脱离文档流：浮起来一点点</p><h4 id="3、position-属性"><a href="#3、position-属性" class="headerlink" title="3、position 属性"></a>3、position 属性</h4><ul><li><p>static：默认值，待在文档流里</p></li><li><p>relative：相对定位，升起来，但不脱离文档流</p><ul><li><p>使用场景：</p><p>1.用于做位移（很少用） 2.用于给 absolute 做爸爸</p></li><li><p>配合 z-index</p><p>z-index： auto 默认值，不创建新层叠上下文 可以取 0 正负整数</p></li></ul></li><li><p>absolute：绝对定位，定位基准是祖先里的非 static</p><ul><li><p>使用场景</p><p>1、脱离原来的位置，另起一层（对话框里的关闭按钮）</p><p>2、鼠标提示</p></li><li><p>注意：</p><p>1、某些浏览器如果不写 top/left 位置会错乱</p><p>2、善用<code>left:100%</code> 善用<code>left:50%</code> 加负 margin</p></li></ul></li><li><p>fixed： 固定定位，定位基准是 viewPort （父元素有 transform）</p><ul><li>使用场景：广告、回到顶部按钮</li><li>注意：手机上尽量不要使用，bug 很多。</li></ul></li><li><p>sticky： 粘滞定位</p></li></ul><p>经验：</p><ul><li>如果写了 absolute，一般都得补一个 relative</li><li>如果写了 absolute 或 fixed，一定要补 top 和 left；</li><li>sticky 兼容性差</li></ul><p><strong>例子</strong>：<a href="http://js.jirengu.com/lumad/17/edit?html,css,output">http://js.jirengu.com/lumad/17/edit?html,css,output</a></p><h4 id="4、z-index"><a href="#4、z-index" class="headerlink" title="4、z-index"></a>4、z-index</h4><p><img src="/Straight-GZ/2021/02/19/3%E3%80%81CSS/桌面\images\z-index.png" alt="image-20201009224821008"></p><p>取值：</p><ul><li>auto：不会创建一个新的本地堆叠上下文。在当前堆叠上下文中生成的盒子的堆叠层级和父级盒子相同。</li><li>整型数字：生成的盒子在当前堆叠上下文中的堆叠层级。此盒子也会创建一个堆叠层级为 0 的本地堆叠上下文。这意味着后代（元素）的 z-indexes 不与此元素的外部元素的 z-indexes 进行对比。</li></ul><p>层叠上下文：</p><ul><li><p>每个层叠上下文就是一个新的小世界</p></li><li><p>每个小世界里的 z-index 跟外界无关</p></li><li><p>处在同一小世界的 z-index 才能比较</p></li><li><p>哪些属性可以创建它</p><p>z-index/flex/opacity/transform <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context">层叠上下文 MDN</a></p></li></ul><p><strong>负 margin 与层叠上下文：负 z-index 逃不出小世界</strong></p><h3 id="六、CSS-动画"><a href="#六、CSS-动画" class="headerlink" title="六、CSS 动画"></a>六、CSS 动画</h3><h4 id="1、浏览器渲染原理及过程："><a href="#1、浏览器渲染原理及过程：" class="headerlink" title="1、浏览器渲染原理及过程："></a>1、浏览器渲染原理及过程：</h4><p>浏览器通过解析生成 DOM、CSSDOM，合成 render tree，然后布局（Layout）、绘制（Paint）、合成（Compose）页面。</p><p>步骤：</p><ul><li>根据 HTML 构建 HTML 树（DOM）</li><li>根据 CSS 构建 CSS 树（CSSOM）</li><li>将两棵树合并成一棵渲染树（render tree）</li><li>Layout 布局（文档流、盒模型、计算大小和位置）</li><li>Paint 绘制（边框颜色、文字颜色、阴影等）</li><li>Compose 合成（根据层叠关系展示画面）</li></ul><p><strong>三棵树：</strong></p><p><img src="/Straight-GZ/2021/02/19/3%E3%80%81CSS/桌面\三棵树.png" alt="image-20201010210100772"></p><p>三种更新方式：</p><p>JS / CSS &gt; 样式 &gt; 布局 &gt; 绘制 &gt; 合成</p><p><img src="/Straight-GZ/2021/02/19/3%E3%80%81CSS/桌面\更新方式1"></p><p>如果您修改元素的“layout”属性，也就是改变了元素的几何属性（例如宽度、高度、左侧或顶部位置等），那么浏</p><p>览器将必须检查所有其他元素，然后“自动重排”页面。任何受影响的部分都需要重新绘制，而且最终绘制的元素需进</p><p>行合成。<br><img src="/Straight-GZ/2021/02/19/3%E3%80%81CSS/桌面\2.png"></p><p>如果您修改“paint only”属性（例如背景图片、文字颜色或阴影等），即不会影响页面布局的属性，则浏览器会</p><p>跳过布局，但仍将执行绘制。<br><img src="/Straight-GZ/2021/02/19/3%E3%80%81CSS/桌面\3.png"></p><p>如果您更改一个既不要布局也不要绘制的属性，则浏览器将跳到只执行合成。这个<strong>最后的版本开销最小</strong>，最适合于应</p><p>用生命周期中的高压力点，例如<strong>动画或滚动</strong>。</p><p>一般使用 js 更新样式：</p><ul><li><p>div.style.background=’red’ 改变背景颜色，跳过 Layout，直接 repaint+Compose <br></p></li><li><p>div.classList.add(‘red’) 改变 transform，只需 Compose</p></li><li><p>div.remove()删掉节点 触发当前消失，其他元素 Layout</p><p><strong>不同属性触发的过程 祥见：<a href="https://csstriggers.com/">https://csstriggers.com/</a></strong></p></li></ul><h4 id="2、transform-改变形态"><a href="#2、transform-改变形态" class="headerlink" title="2、transform 改变形态"></a>2、transform 改变形态</h4><p><strong>旋转、旋转，缩放，倾斜或平移。</strong></p><ul><li><p>translate：位移 参数：长度、百分数（translate()不可用）</p><p><code>translateX（tx）</code> 水平移动 <code>translateY(ty)</code> 垂直移动</p><p><code>translateZ(tz)</code> 3D 空间的 z 轴方向移动 配合父元素 perspective() （到 z=0 平面的距离）</p><p><code>translate(tx,ty?)</code> <code>translate(tx,ty,tz)</code></p><p><strong><code>translate(50%,50%)</code>可以做绝对定位元素居中</strong></p></li><li><p>scale：缩放 参数：number</p><p><code>scaleX(sx)</code> 横坐标缩放 <code>scaleY(sy)</code> 纵坐标缩放 <code>scaleX(sx,sy?)</code></p><p><strong>容易出现模糊</strong></p></li><li><p>rotate：旋转</p><p><code>rotate(a)</code> 旋转角度 同<code>rotateZ(a)</code> <code>rotateX(a)</code> x 轴旋转 <code>rotateY(a)</code> y 轴转动</p><p><strong>用 360° 旋转 制作 loading</strong></p></li><li><p>skew：倾斜</p><p><code>skewX()</code>沿横倾斜 <code>skewY()</code>沿纵轴倾斜 <code>skew(ax, ay?)</code></p></li></ul><p><strong>transform 组合使用：</strong></p><p><code>transform: scale(0.5) translate(-100%, -100%);</code></p><p><code>transform: none</code> 取消所有</p><p><strong>注</strong>：</p><ul><li><p>一般配合<strong>transition</strong>过渡</p></li><li><p>inline 元素不支持 transform，需要先变成 block</p></li></ul><h4 id="3、制作动画"><a href="#3、制作动画" class="headerlink" title="3、制作动画"></a>3、制作动画</h4><ol><li>transition 过渡</li></ol><ul><li><p>作用：补充中间帧</p></li><li><p>语法：</p><ol><li><p>transition：属性名 时长 过渡方式 延迟 <code>transition: left 200ms linear</code></p></li><li><p>可以用逗号分隔两个属性 <code>transition: left 200ms,right 200ms</code></p></li><li><p>可以用 all 代表所有属性 <code>transition all 200ms</code></p></li><li><p>过渡方式：linear | ease | ease-in-out | step-start <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/timing-function">详细点击</a></p></li></ol></li><li><p>注意：并不是所有的属性都可以过渡</p><ol><li><p>display：none =&gt; block 无法过渡 一般改成 visibility:hidden =&gt; visible(隐藏或显示，但不改变布局)</p></li><li><p>颜色、透明度，都可以过渡。<strong>过渡必须有起始</strong></p></li></ol></li><li><p>如果有中间点</p><ol><li>使用两次 transform .a=transform=&gt;.b .b=transform=&gt;.c</li></ol></li></ul><ol start="2"><li>使用 setTimeout 或者监听 transitioned 事件</li><li><strong>animation</strong></li></ol><h5 id="例子：跳动的心"><a href="#例子：跳动的心" class="headerlink" title="例子：跳动的心"></a><strong>例子：<a href="http://js.jirengu.com/dunuz/1/edit?html,css,output">跳动的心</a></strong></h5><ol start="2"><li>animation 动画制作</li></ol><ul><li><p>声明关键帧</p><p>**<code>@keyframes</code>**语法 两种写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> slidein &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0%</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> identifier &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加动画</p><p>animation 缩写语法：</p><p><code>animation: 时长|过渡方式|延迟|次数|方向|填充模式|是否暂停|动画名</code></p><ol><li>时长：1s 或者 100ms</li><li>过渡方式：和 transition 的取值一样</li><li>次数：1 或者 2.4 infinite 无限次</li><li>方向 reverse|alternate|alternate-reverse</li><li>填充模式：none|forwards|backwards|both</li><li>是否暂停：paused|running</li><li>以上属性均有单独属性</li></ol><p><strong>我们可以在任意一个点指定关键帧，所以 animation 可以用来做更复杂的动画</strong></p></li></ul><h5 id="例子：跳动的心-1"><a href="#例子：跳动的心-1" class="headerlink" title="例子：跳动的心"></a>例子：<a href="http://js.jirengu.com/fuzib/7/edit?html,css,output">跳动的心</a></h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、CSS-基础概念：&quot;&gt;&lt;a href=&quot;#1、CSS-基础概念：&quot; class=&quot;headerlink&quot; title=&quot;1、CSS 基础概念：&quot;&gt;&lt;/a&gt;1、CSS 基础概念：&lt;/h2&gt;&lt;h3 id=&quot;一、css-简介：&quot;&gt;&lt;a href=&quot;#一、css-简介</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>二、HTML</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/2%E3%80%81HTML/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/2%E3%80%81HTML/</id>
    <published>2021-02-19T03:35:19.090Z</published>
    <updated>2021-02-19T03:35:19.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、概述："><a href="#1、概述：" class="headerlink" title="1、概述："></a>1、概述：</h2><h3 id="万维网："><a href="#万维网：" class="headerlink" title="万维网："></a>万维网：</h3><p>WWW（world wide web）：1990 年诞生，李爵士发明 WWW，同时发明了 HTML HTTP 和 url</p><p><strong>让用户输入网址就能看到网页</strong></p><h2 id="HTML5："><a href="#HTML5：" class="headerlink" title="HTML5："></a>HTML5：</h2><p>1、必须学会：</p><ul><li>语法：怎么写代码</li><li>如何调试：怎么知道代码写错</li><li>查资料：抄代码（MDN）</li><li>标准制定者:W3C 由李爵士创立</li></ul><p>2、CRM 学习法：</p><ul><li>Copy：抄文档，代码</li><li>Run：在自己的机器运行成功</li><li>Modify：加入自己的想法，重新运行</li></ul><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><p>1、标签</p><ul><li><code>&lt;!DOCTYPE html&gt; </code>：文档类型</li><li><code>&lt;tag attr=value&gt;内容&lt;/tag&gt;</code></li><li><code>&lt;tag attr&gt;内容&lt;/tag&gt;</code></li><li><code>&lt;tag attr=value&gt;</code></li><li>大小写没有区别，一般小写；引号看情况加与不加</li></ul><p>2、排错</p><ul><li>vscode 颜色提示</li><li>webstorm 提示（后面用）</li><li>HTML5 验证器：node-w3c-validator -i xxx</li></ul><h3 id="标签全解："><a href="#标签全解：" class="headerlink" title="标签全解："></a>标签全解：</h3><h4 id="1、英语单词"><a href="#1、英语单词" class="headerlink" title="1、英语单词"></a>1、英语单词</h4><p>section 章、节 article 一篇文章 aside 旁边的，与 main 相对</p><p>anchor 锚，定点 emphasis 强调，重读（strong 强壮，重要）</p><p>order 顺序 ordered 有序的 unordered 无序的</p><p>description 描述 term 术语 data 数据 quote 引用</p><h4 id="2、书籍："><a href="#2、书籍：" class="headerlink" title="2、书籍："></a>2、书籍：</h4><p><a href="https://wangdoc.com/html/index.html">网道 HTML 教程</a>：马上、枕上、厕上</p><h4 id="3、章节标签："><a href="#3、章节标签：" class="headerlink" title="3、章节标签："></a>3、章节标签：</h4><ul><li>标题：h1~h6</li><li>章节：section</li><li>文章：article</li><li>段落：p</li><li>头部：header</li><li>footer：脚部</li><li>主要内容：main</li><li>旁支内容：aside</li><li>划分：div</li></ul><p><strong>示例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>页眉<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>第一章<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>页尾<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4、全局属性："><a href="#4、全局属性：" class="headerlink" title="4、全局属性："></a>4、全局属性：</h4><ul><li><p>class：类</p><p>属性相同，为同一类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;para&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个元素有多个类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p1 p2 p3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>contenteditable：使页面内容可编辑，让 style 标签显示出来，配合使用，可在页面编辑内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>鼠标点击，本句内容可修改。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>hidden：隐藏标签内容 可在 CSS 设置可见</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">hidden</span>&gt;</span>本句不会显示在页面上。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>id：唯一标识符，一般不用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>style：指定标签样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>tabindex： tab 的顺序</p><ol><li>值为负 1，表示永不访问</li><li>值为 0，最后一个切换</li><li>值为正整数，表示顺序</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">tabindex</span>=<span class="string">&quot;0&quot;</span>&gt;</span>这段文字可以获得焦点。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>title：显示完整的内容（附加说明）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;版权说明&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>本站内容使用创意共享许可证，可以自由使用<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5、默认样式："><a href="#5、默认样式：" class="headerlink" title="5、默认样式："></a>5、默认样式：</h4></li><li><p>不符合需求，一般需要重置</p></li><li><p>找到类似代码，复制到自己的项目</p></li></ul><h4 id="6、内容标签："><a href="#6、内容标签：" class="headerlink" title="6、内容标签："></a>6、内容标签：</h4><ul><li><p>ol+li（ordered list）：有序标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">效果： 1. 列表项 A 2. 列表项 B 3. 列表项 C</span><br></pre></td></tr></table></figure></li><li><p>ul+li:无序标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 A<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 B<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">效果： 1. 列表项 A 2. 列表项 B 3. 列表项 C</span><br></pre></td></tr></table></figure></li><li><p>dl+dt+dd（description list）:描述列表，用 dd 里的内容描述 dt 里的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>CPU<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>中央处理器<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Memory<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>内存<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Hard Disk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>硬盘<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line">效果： CPU 中央处理器 Memory 内存 Hard Disk 硬盘</span><br></pre></td></tr></table></figure></li><li><p>pre（preview）:保留回车、空格、tab</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">hello                      </span><br><span class="line"></span><br><span class="line">   world&lt;/pre</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>hr:分隔线</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第一个主题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第二个主题<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>br:强制换行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello<span class="tag">&lt;<span class="name">br</span> /&gt;</span>world</span><br></pre></td></tr></table></figure></li><li><p>a（anchor）:链接标签 target=”_black”在新标签打开链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://wikipedia.org/&quot;</span>&gt;</span>维基百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>em（emphasis）:斜体显示，强调语气</p></li><li><p>strong:粗体显示，强调内容本身</p></li><li><p>code:以等宽字体显示，多行代码放在 pre 标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">  let a = 1;</span><br><span class="line">  console.log(a);</span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>q（quote）:引用</p></li><li><p>blockquote:块级引用，换行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>天才就是 1% 的天赋和99%的汗水。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML-重点标签："><a href="#HTML-重点标签：" class="headerlink" title="HTML 重点标签："></a>HTML 重点标签：</h3></li></ul><h4 id="1、英语课堂："><a href="#1、英语课堂：" class="headerlink" title="1、英语课堂："></a>1、英语课堂：</h4><p>hyper：超级 target：目标 reference：引用 href:超链接</p><p>frame：边框，框架 blank：空白 load：加载 canvas:画布</p><p><strong>注：</strong>使用 http-server（hs -c -1）或 parcel 打开 HTML</p><h4 id="2、a-标签"><a href="#2、a-标签" class="headerlink" title="2、a 标签"></a>2、a 标签</h4><ol><li>属性：</li></ol><ul><li><p>href：</p><p>取值：</p><ol><li>网址：</li></ol><ul><li><a href="https://www.baidu.com/">https://www.baidu.com</a></li><li><a href="http://www.baidu.com/">http://www.baidu.com</a></li><li>//<a href="http://www.baidu.com(用这个就可以了)/">www.baidu.com（用这个就可以了）</a></li></ul><ol start="2"><li>路径：</li></ol><ul><li>/a/b/c 和 a/b/c：（绝对路径和相对路径，使用 http-server 效果相同）</li><li>index.html 以及./index.html</li></ul><ol start="3"><li>伪协议</li></ol><ul><li>javascript:代码（”javascript:;”可用于实现 点击没有任何操作)</li><li>mailto:邮箱</li><li>tel：手机号</li></ul><ol start="4"><li>id</li></ol><ul><li>href=#xxx 锚点链接</li></ul></li><li><p>target：</p><ol><li>内置名字</li></ol><ul><li><p>_blank：新窗口打开。</p></li><li><p>_top:</p><p>顶层窗口打开。如果当前窗口就是顶层窗口，这个值等同于<code>_self</code></p></li><li><p>_parent：</p><p>上层窗口打开，这通常用于从父窗口打开的子窗口，或者<code>&lt;iframe&gt;</code>里面的链接。如果当前窗口没有上层窗口，这个值等同于<code>_self</code></p></li><li><p>_self：当前窗口打开，这是默认值。</p></li></ul><ol start="2"><li>程序员命名</li></ol><ul><li><p>window 的 name</p><p>两个页面都在同一个名叫 test 的窗口打开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://foo.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;test&quot;</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://bar.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;test&quot;</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>iframe 的 name</p></li></ul></li><li><p>download：</p><ol><li>作用：不是打开页面，而是下载页面</li><li>问题：不是有浏览器都支持</li></ol></li><li><p>rel=noopener：</p></li></ul><ol start="2"><li>作用：</li></ol><ul><li>跳转到外部页面</li><li>跳转到内部页面</li><li>跳转到邮箱或者号码</li></ul><h4 id="3、table-标签：表格"><a href="#3、table-标签：表格" class="headerlink" title="3、table 标签：表格"></a>3、table 标签：表格</h4><p>相关的标签：</p><ul><li><p>table：表格</p></li><li><p>thead：表头</p></li><li><p>tbody：主体</p></li><li><p>tfoot：表格末尾</p></li><li><p>tr：行</p></li><li><p>td：数据单元格</p></li><li><p>th：表头，标题单元格</p></li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>002<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相关样式：</p><p>table-layout</p><p>border-collapse</p><p>border-spacing</p><h4 id="4、img-标签："><a href="#4、img-标签：" class="headerlink" title="4、img 标签："></a>4、img 标签：</h4><p>作用：</p><p>发出 get 请求，展示一张图片</p><p>属性：</p><ul><li><p>src：指定图片网址</p><p><code>&lt;img src=&quot;foo.jpg&quot;&gt;</code></p></li><li><p>Alt:图片说明。加载失败显示。</p><p><code>&lt;img src=&quot;foo.jpg&quot; alt=&quot;示例图片&quot;&gt;</code></p></li><li><p>height、width：指定高度、宽度 只指定一个，另一个自适应</p></li></ul><p>事件：</p><p>onload/onerror （加载成功/加载失败）</p><p>响应式：</p><p><code>max-width:100%</code> 最大宽度为 100%</p><h4 id="5、form：表单标签"><a href="#5、form：表单标签" class="headerlink" title="5、form：表单标签"></a>5、form：表单标签</h4><p>作用：发 get 或 post 的请求，然后刷新页面</p><p>属性：</p><p>action：服务器接收数据的 url</p><p>autocomplete：是否自动填充（配合 input 标签<code>name=&quot;username&quot;</code>使用，会有用户名建议）</p><p>method：提交数据的 HTTP 方法 （post 或 get）</p><p>target：在哪个窗口展示返回数据</p><p>事件：onsubmit</p><h4 id="6、input-标签："><a href="#6、input-标签：" class="headerlink" title="6、input 标签："></a>6、input 标签：</h4><p>作用：让用户输入内容</p><p><strong>属性</strong>：</p><p>类型 type：决定形式</p><ul><li><p>text 普通本输入框</p></li><li><p>color 选择颜色</p></li><li><p>button 按钮</p><p><code>&lt;input type=&quot;button&quot; value=&quot;点击&quot;&gt;</code></p><p>可使用 button 标签代替</p></li><li><p>submit 提交按钮(必须要有，否则提交不了)</p><p><code>&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</code></p></li><li><p>radio 单选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>checkbox 复选框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>唱</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>跳</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span>Rap</span><br></pre></td></tr></table></figure></li><li><p>password：密码输入框，输入会被遮挡</p></li><li><p>file：文件选择框，multiple 属性，是否允许选择多个文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span>选择一个文件 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span> /&gt;</span>选择多个文件</span><br></pre></td></tr></table></figure></li><li><p>hidden：不显示在页面</p></li></ul><p>其他属性：</p><ul><li><p>name：名称</p></li><li><p>value：值</p></li></ul><p><strong>事件</strong>：</p><p>onchange/onfocus/onblur</p><p><strong>验证器：</strong></p><p>HTML5 新增功能。</p><p>required：是否为必填控件。</p><h4 id="7、其他输入标签"><a href="#7、其他输入标签" class="headerlink" title="7、其他输入标签"></a>7、其他输入标签</h4><ul><li><p>button 标签</p><p>生成一个可以点击的按钮，内部不仅放置文字，还可以放置图像</p><p>type 属性，按钮的类型：submit（提交）、button（不提交）</p></li><li><p>textarea 标签：生成多行的文本框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">type</span>=<span class="string">&quot;resize：none;width: 50%;height 300px &quot;</span>&gt;</span></span><br><span class="line">这是一个很长的故事。</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>resize：none</code> 输入框无法拖动</p></li><li><p>select+option 标签：生成下拉菜单</p><p>selected 表示默认选择的菜单项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">selected</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>label：控件的文字说明</p></li></ul><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li>一般不监听 input 的 click</li><li>form 里面的 input 要有 name</li><li>form 里面要放一个 type=submit 才能触发 submit 事件</li></ul><p>其他标签：</p><p>video：视频</p><p>audio：音频</p><p>canvas：画布</p><p>svg：矢量图</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、概述：&quot;&gt;&lt;a href=&quot;#1、概述：&quot; class=&quot;headerlink&quot; title=&quot;1、概述：&quot;&gt;&lt;/a&gt;1、概述：&lt;/h2&gt;&lt;h3 id=&quot;万维网：&quot;&gt;&lt;a href=&quot;#万维网：&quot; class=&quot;headerlink&quot; title=&quot;万维网：&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>一、 Git</title>
    <link href="https://github.com/Straight-GZ/2021/02/19/1%E3%80%81git/"/>
    <id>https://github.com/Straight-GZ/2021/02/19/1%E3%80%81git/</id>
    <published>2021-02-19T03:35:19.068Z</published>
    <updated>2021-02-19T03:35:19.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、git-入门："><a href="#1、git-入门：" class="headerlink" title="1、git 入门："></a>1、git 入门：</h2><h3 id="英语小课堂"><a href="#英语小课堂" class="headerlink" title="英语小课堂"></a>英语小课堂</h3><p>list 列表（ls) remove 删除(rm) recursive 递归的 echo 回声 touch 触摸 directory 目录/文件夹 force 强制</p><p>list remove recursive echoecho echo directory forceforce force</p><p>救命快捷键：Ctrl+c 中断</p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><h4 id="查："><a href="#查：" class="headerlink" title="查："></a>查：</h4><p>查看目录绝对路径：pwd</p><p>查看当前目录内容：ls</p><p>查看指定目录内容：ls+路径</p><p>查看文件内容：</p><p>cat 路径：全部内容</p><p>head 路径：前面 10 行，head 路径 -n 14（行数）</p><p>tail 路径：后面 10 行，tail 路径 -n 14（行数）</p><p>less 路径：分页查看 j、k</p><h4 id="增："><a href="#增：" class="headerlink" title="增："></a>增：</h4><p>创建文件：</p><ul><li>touch： a 创建一个空文件 多个文件空格隔开</li><li>echo： echo ‘hi’ &gt; 1.txt （覆盖） “&gt;&gt;”表示添加内容 echo -e ‘1/n2’ &gt;&gt;1.txt 添加多行</li></ul><p>创建目录：</p><ul><li><p>mkdir a/</p></li><li><p>mkdir -p a/b/c/d/e(多层目录) 多个目录 空格隔开</p></li><li><p>复制文件：cp 1.txt 2.txt 将 1.txt 的内容复制给 2.txt</p></li><li><p>复制目录：cp -r a b 将 a 目录里的内容复制给 b 目录 -r：递归、重现</p></li></ul><h4 id="删："><a href="#删：" class="headerlink" title="删："></a>删：</h4><p>rm 1.txt 删除文件</p><p>rm -r a 删除目录</p><h4 id="改："><a href="#改：" class="headerlink" title="改："></a>改：</h4><p>追加、修改内容：echo ‘1’&gt;&gt;1.txt</p><p>打开文件修改：code 1.txt start 1.txt</p><p>清空内容：echo “”&gt;1.txt 空内容代替文档内容 打开文件删除</p><p>修改文件名/目录：mv 1.txt 2.txt mv：移动</p><p>重命名文件名/目录：同上</p><p>修改文件最后更新时间：touch 1.txt</p><h3 id="命令的组合："><a href="#命令的组合：" class="headerlink" title="命令的组合："></a>命令的组合：</h3><p>命令成功：没有提示，返回 0</p><p>命令失败：提示 error，返回非 0</p><p>&amp;&amp;命令：当第一条命令成功之后执行下一条命令</p><p>;命令：不管第一条命令是否成功，都执行下一条</p><h4 id="脚本文件："><a href="#脚本文件：" class="headerlink" title="脚本文件："></a>脚本文件：</h4><ol><li>创建文件，后缀无所谓</li><li>添加可执行性权限：chmod +x ./文件名 （./ ：当前目录）</li><li>文件里写命令</li><li>运行 [sh 路径]执行</li><li>shebang #!/usr/bin/env sh</li><li>必须用正常的路径 ./文件名</li><li>添加 path 可以不写目录，直接执行</li></ol><h2 id="2、git-本地仓库"><a href="#2、git-本地仓库" class="headerlink" title="2、git 本地仓库"></a>2、git 本地仓库</h2><p>git 就是一条命令</p><p>六行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 你的英文名</span><br><span class="line">git config --global user.email 你的邮箱</span><br><span class="line">git config --global push.default simple</span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br><span class="line">git config --global core.editor <span class="string">&quot;code --wait&quot;</span></span><br><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure><h3 id="1-让你代码有版本："><a href="#1-让你代码有版本：" class="headerlink" title="1.让你代码有版本："></a>1.让你代码有版本：</h3><p>git init :初始化（指定目录），创建 .git 目录</p><p><strong>git add</strong> 路径:选择哪些变动是需要提交的</p><p>.gitignore：描述哪些文件是不需要提交的</p><p>git commit -m ：字符串：提交，说明理由 （字符串有空格，用引号）</p><p><strong>git commit -v</strong>：回顾修改的内容，添加详细提交理由<strong>（推荐）</strong></p><p>git reset –hard 提交号前六位：回到指定提交版本</p><p>git log： 查看历史 git reflog：查看所有的历史</p><h3 id="2-分支："><a href="#2-分支：" class="headerlink" title="2.分支："></a>2.分支：</h3><p>git branch ：基于当前 commit 创建分支，在哪个分支提交，就创建在哪个分支</p><p>git checkout：切换分支</p><p>git merge:合并分支</p><p><strong>步骤</strong>：</p><ol><li><p>选择需要保留的分支 master</p></li><li><p>运行 git merge x（合并的分支）</p></li><li><p>冲突</p><ul><li><p>发现冲突：</p><p>合并分支的时候<strong>conflict</strong>提示</p><p>使用 git status -sb 查看冲突文件</p></li><li><p>解决冲突：</p><p>依次打开文件</p><p>搜素‘====’四个等于号</p><p>选择要保留的代码，删除不用的代码</p><p>删除’====‘’&lt;&lt;&lt;&lt;’’&gt;&gt;&gt;&gt;’标记</p><p><strong>git add 对应文件</strong></p><p>再次使用 git status -sb 解决下一个冲突文件</p><p>直到没有冲突，运行<strong>git commit （不需要加选项）</strong></p></li></ul></li><li><p>合并完删除无用的分支 git branch -d x</p></li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>git 目录就是本地仓库</li><li>git add 处理的是文件变化，而不是文件，删除文件后，依然需要 git add 添加到提交区</li><li>常用的命令：<strong>git add</strong> 和<strong>git commit -v</strong></li></ul><h2 id="3、git-远程仓库"><a href="#3、git-远程仓库" class="headerlink" title="3、git 远程仓库"></a>3、git 远程仓库</h2><h3 id="生成-ssh-key（帮助文档）："><a href="#生成-ssh-key（帮助文档）：" class="headerlink" title="生成 ssh key（帮助文档）："></a>生成 ssh key（<a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#">帮助文档</a>）：</h3><ul><li>运行 ssh-keygen -t rsa -b 4096 -C +邮箱地址</li><li>一直回车键到没有提示</li><li>cat ~/.ssh/id_rsa.pub 得到公钥内容，复制内容</li><li>打开 Github，在设置页面粘贴公钥内容</li></ul><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><ul><li>运行 ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#103;&#x69;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#103;&#x69;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;</a></li><li>询问 yes/no,回答 yes</li></ul><h3 id="上传代码："><a href="#上传代码：" class="headerlink" title="上传代码："></a>上传代码：</h3><ol><li><p>新建 Github Repo，复制 ssh 地址</p></li><li><p>运行 git remote add origin git@xxxxx</p><p>（在本地添加远程仓库地址，origin 为远程仓库默认名字）</p></li><li><p>git push -u origin master</p></li></ol><ul><li>推送本地 master 分支到远程 originmaster 分支</li><li>提示应该 git pull…，就运行 git pull<img src="/Straight-GZ/2021/02/19/1%E3%80%81git/Users\Crystal\AppData\Roaming\Typora\typora-user-images\image-20200929212241934.png" alt="image-20200929212241934"></li><li>-u origin master 意思为设置上游分支，之后不用再设置，直接 git pull，git push</li></ul><p><strong>上传其它分支：</strong></p><p>一：git push x:x</p><p>二：git checkout x</p><pre><code>git push -u origin x</code></pre><p><strong>上传到两个本地仓库</strong></p><ul><li>git remote add origin2 git@xxxxx</li><li>git push -u origin master</li></ul><p><strong>git pull 冲突</strong>：查看合并分支冲突</p><h3 id="下载代码："><a href="#下载代码：" class="headerlink" title="下载代码："></a>下载代码：</h3><ol><li>git clone git@xxx</li><li>不同机器需要先上传新的 ssh key(一机一 key)</li><li><strong>cd 目标路径</strong></li><li>运行 git add/git commit/[git pull]/git push</li></ol><p>下载某个分支：先下载整个仓库，再切换分支</p><p><strong>git clone</strong>：</p><ul><li><p>git clone git@?/xxx.git:会在当前目录下创建一个 xxx 目录，xxx/.git 是本地仓库，一般需要接 cd xxx 进入目录</p></li><li><p>git clone git@?/xxx.git yyy：会在本地新建一个 yyy 目录，cd yyy 进入目录</p></li><li><p>git clone git@?/xxx.git .:最后一个字符是点，使用当前目录容纳代码和.git，需要先新建一个目录，cd 进入目录</p></li></ul><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><p>常用命令：git alone/git pull/git push</p><p>远程仓库：本地仓库的备份，要先 commit 到本地仓库，然后 push 到远程仓库</p><pre><code>    无法下载部分代码，只能先clone整个仓库生成ssh key（[帮助文档](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#)）：</code></pre><ul><li>运行 ssh-keygen -t rsa -b 4096 -C +邮箱地址</li><li>一直回车键到没有提示</li><li>cat ~/.ssh/id_rsa.pub 得到公钥内容，复制内容</li><li>打开 Github，在设置页面粘贴公钥内容</li></ul><h3 id="测试：-1"><a href="#测试：-1" class="headerlink" title="测试："></a>测试：</h3><ul><li>运行 ssh -T <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#105;&#x74;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a></li><li>询问 yes/no,回答 yes</li></ul><h3 id="上传代码：-1"><a href="#上传代码：-1" class="headerlink" title="上传代码："></a>上传代码：</h3><ol><li><p>新建 Github Repo，复制 ssh 地址</p></li><li><p>运行 git remote add origin git@xxxxx</p><p>（在本地添加远程仓库地址，origin 为远程仓库默认名字）</p></li><li><p>git push -u origin master</p></li></ol><ul><li>推送本地 master 分支到远程 originmaster 分支</li><li>提示应该 git pull…，就运行 git pull<img src="/Straight-GZ/2021/02/19/1%E3%80%81git/Users\Crystal\AppData\Roaming\Typora\typora-user-images\image-20200929212241934.png" alt="image-20200929212241934"></li><li>-u origin master 意思为设置上游分支，之后不用再设置，直接 git pull，git push</li></ul><p><strong>上传其它分支：</strong></p><p>一：git push x:x</p><p>二：git checkout x</p><pre><code>git push -u origin x</code></pre><p><strong>上传到两个本地仓库</strong></p><ul><li>git remote add origin2 git@xxxxx</li><li>git push -u origin master</li></ul><p><strong>git pull 冲突</strong>：查看合并分支冲突</p><h3 id="下载代码：-1"><a href="#下载代码：-1" class="headerlink" title="下载代码："></a>下载代码：</h3><ol><li>git clone git@xxx</li><li>不同机器需要先上传新的 ssh key(一机一 key)</li><li><strong>cd 目标路径</strong></li><li>运行 git add/git commit/[git pull]/git push</li></ol><p>下载某个分支：先下载整个仓库，再切换分支</p><p><strong>git clone</strong>：</p><ul><li><p>git clone git@?/xxx.git:会在当前目录下创建一个 xxx 目录，xxx/.git 是本地仓库，一般需要接 cd xxx 进入目录</p></li><li><p>git clone git@?/xxx.git yyy：会在本地新建一个 yyy 目录，cd yyy 进入目录</p></li><li><p>git clone git@?/xxx.git .:最后一个字符是点，使用当前目录容纳代码和.git，需要先新建一个目录，cd 进入目录</p></li></ul><h3 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h3><p>常用命令：git alone/git pull/git push</p><p>远程仓库：本地仓库的备份，要先 commit 到本地仓库，然后 push 到远程仓库</p><pre><code>    无法下载部分代码，只能先clone整个仓库</code></pre><h2 id="4、git-高级操作"><a href="#4、git-高级操作" class="headerlink" title="4、git 高级操作"></a>4、git 高级操作</h2><p>bash alias 简化命令： ga=”git add” gc=”git commit -v” gl=”git pull” gp=”git push” gco=”git checkout” gst=”git status -sb”</p><p>美化历史命令：git rebase -i xxx</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、git-入门：&quot;&gt;&lt;a href=&quot;#1、git-入门：&quot; class=&quot;headerlink&quot; title=&quot;1、git 入门：&quot;&gt;&lt;/a&gt;1、git 入门：&lt;/h2&gt;&lt;h3 id=&quot;英语小课堂&quot;&gt;&lt;a href=&quot;#英语小课堂&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="git" scheme="https://github.com/Straight-GZ/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/Straight-GZ/2021/01/14/hello-world/"/>
    <id>https://github.com/Straight-GZ/2021/01/14/hello-world/</id>
    <published>2021-01-14T11:57:29.202Z</published>
    <updated>2021-01-14T11:57:29.202Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>111</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
